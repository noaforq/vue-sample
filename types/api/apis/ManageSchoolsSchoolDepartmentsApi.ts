/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  SchoolDepartmentCreateIn,
  SchoolDepartmentDetailOut,
  SchoolDepartmentListOut,
  SchoolDepartmentUpdateIn,
  ValidationError,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    SchoolDepartmentCreateInFromJSON,
    SchoolDepartmentCreateInToJSON,
    SchoolDepartmentDetailOutFromJSON,
    SchoolDepartmentDetailOutToJSON,
    SchoolDepartmentListOutFromJSON,
    SchoolDepartmentListOutToJSON,
    SchoolDepartmentUpdateInFromJSON,
    SchoolDepartmentUpdateInToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface CreateSchoolDepartmentRequest {
    schoolDepartmentCreateIn: SchoolDepartmentCreateIn;
}

export interface GetSchoolDepartmentRequest {
    organizationId: number;
}

export interface GetSchoolDepartmentListRequest {
    schoolId?: number;
}

export interface UpdateSchoolDepartmentRequest {
    organizationId: number;
    schoolDepartmentUpdateIn: SchoolDepartmentUpdateIn;
}

/**
 * 
 */
export class ManageSchoolsSchoolDepartmentsApi extends runtime.BaseAPI {

    /**
     * 学部を作成 - 必要権限: [ALL_ADMIN_EDIT] - 作成者に姓名を入力する
     * 学部作成
     */
    async createSchoolDepartmentRaw(requestParameters: CreateSchoolDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchoolDepartmentDetailOut>> {
        if (requestParameters.schoolDepartmentCreateIn === null || requestParameters.schoolDepartmentCreateIn === undefined) {
            throw new runtime.RequiredError('schoolDepartmentCreateIn','Required parameter requestParameters.schoolDepartmentCreateIn was null or undefined when calling createSchoolDepartment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/school-departments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SchoolDepartmentCreateInToJSON(requestParameters.schoolDepartmentCreateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchoolDepartmentDetailOutFromJSON(jsonValue));
    }

    /**
     * 学部を作成 - 必要権限: [ALL_ADMIN_EDIT] - 作成者に姓名を入力する
     * 学部作成
     */
    async createSchoolDepartment(requestParameters: CreateSchoolDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchoolDepartmentDetailOut> {
        const response = await this.createSchoolDepartmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 学部詳細取得 - 必要権限: [ALL_ADMIN_VIEW] - 以下の条件のデータのみ取得可能     - OrganizationType: SCHOOL     - is_deleted: False
     * 学部詳細取得
     */
    async getSchoolDepartmentRaw(requestParameters: GetSchoolDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchoolDepartmentDetailOut>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling getSchoolDepartment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/school-departments/{organization_id}`.replace(`{${"organization_id"}}`, encodeURIComponent(String(requestParameters.organizationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchoolDepartmentDetailOutFromJSON(jsonValue));
    }

    /**
     * 学部詳細取得 - 必要権限: [ALL_ADMIN_VIEW] - 以下の条件のデータのみ取得可能     - OrganizationType: SCHOOL     - is_deleted: False
     * 学部詳細取得
     */
    async getSchoolDepartment(requestParameters: GetSchoolDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchoolDepartmentDetailOut> {
        const response = await this.getSchoolDepartmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 学部一覧取得 - 必要権限: [ALL_ADMIN_EDIT] - id降順で表示する - 以下の条件のデータのみ取得可能     - OrganizationType: SCHOOL     - is_deleted: False
     * 学部一覧取得
     */
    async getSchoolDepartmentListRaw(requestParameters: GetSchoolDepartmentListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SchoolDepartmentListOut>>> {
        const queryParameters: any = {};

        if (requestParameters.schoolId !== undefined) {
            queryParameters['school_id'] = requestParameters.schoolId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/school-departments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SchoolDepartmentListOutFromJSON));
    }

    /**
     * 学部一覧取得 - 必要権限: [ALL_ADMIN_EDIT] - id降順で表示する - 以下の条件のデータのみ取得可能     - OrganizationType: SCHOOL     - is_deleted: False
     * 学部一覧取得
     */
    async getSchoolDepartmentList(requestParameters: GetSchoolDepartmentListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SchoolDepartmentListOut>> {
        const response = await this.getSchoolDepartmentListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 学部を更新 - 必要権限: [ALL_ADMIN_EDIT] - 更新者に姓名を入力する
     * 学部更新
     */
    async updateSchoolDepartmentRaw(requestParameters: UpdateSchoolDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchoolDepartmentDetailOut>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling updateSchoolDepartment.');
        }

        if (requestParameters.schoolDepartmentUpdateIn === null || requestParameters.schoolDepartmentUpdateIn === undefined) {
            throw new runtime.RequiredError('schoolDepartmentUpdateIn','Required parameter requestParameters.schoolDepartmentUpdateIn was null or undefined when calling updateSchoolDepartment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/school-departments/{organization_id}`.replace(`{${"organization_id"}}`, encodeURIComponent(String(requestParameters.organizationId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SchoolDepartmentUpdateInToJSON(requestParameters.schoolDepartmentUpdateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchoolDepartmentDetailOutFromJSON(jsonValue));
    }

    /**
     * 学部を更新 - 必要権限: [ALL_ADMIN_EDIT] - 更新者に姓名を入力する
     * 学部更新
     */
    async updateSchoolDepartment(requestParameters: UpdateSchoolDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchoolDepartmentDetailOut> {
        const response = await this.updateSchoolDepartmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
