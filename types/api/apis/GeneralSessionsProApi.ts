/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  ProQuestionDetailOut,
  ProQuestionExtraInfoIn,
  ProQuestionExtraInfoOut,
  ProQuestionSubmissionResultOut,
  ProQuestionSubmitHistoryListOut,
  ScoringProIn,
  ScoringProOut,
  ValidationError,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    ProQuestionDetailOutFromJSON,
    ProQuestionDetailOutToJSON,
    ProQuestionExtraInfoInFromJSON,
    ProQuestionExtraInfoInToJSON,
    ProQuestionExtraInfoOutFromJSON,
    ProQuestionExtraInfoOutToJSON,
    ProQuestionSubmissionResultOutFromJSON,
    ProQuestionSubmissionResultOutToJSON,
    ProQuestionSubmitHistoryListOutFromJSON,
    ProQuestionSubmitHistoryListOutToJSON,
    ScoringProInFromJSON,
    ScoringProInToJSON,
    ScoringProOutFromJSON,
    ScoringProOutToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface GetProQuestionSubmissionResultRequest {
    sessionId: number;
    contentId: number;
    submissionResultId: number;
    isLastQuery?: boolean;
}

export interface GetProSessionQuestionRequest {
    sessionId: number;
    contentId: number;
}

export interface GetProSessionQuestionSubmissionHistoryListRequest {
    sessionId: number;
    contentId: number;
}

export interface ScoringProRequest {
    sessionId: number;
    contentId: number;
    scoringProIn: ScoringProIn;
}

export interface UpdateProSessionQuestionExtraInfoRequest {
    sessionId: number;
    contentId: number;
    submissionResultId: number;
    proQuestionExtraInfoIn: ProQuestionExtraInfoIn;
}

/**
 * 
 */
export class GeneralSessionsProApi extends runtime.BaseAPI {

    /**
     * 一般ユーザーPROセッション問題提出結果取得 - 必要権限: [GENERAL_USER] - 処理内容:     - ProSubmissionResultテーブルから結果を取得     - ProSubmissionResult.judge_status != ProJudgeStatus.WAITING_FOR_JUDGINGの場合         - is_done = True - 取得条件:     - Session.is_deleted = False     - セッションが開催期間中     - セッションに登録されている問題     - セッション参加ユーザーである     - ProSubmissionResult.judge_status != ProJudgeStatus.WAITING_FOR_JUDGING     - Content.content_type = ContentType.PRO     - Content.is_official = True     - Content.is_deleted = False - 例外処理:     - 以下の場合NotFound         - session_idが存在しない         - セッション開催期間外の場合         - 対象セッションに登録されていない問題         - content_idが存在しない         - content_idの問題が削除済み         - submission_result_idが存在しない - 補足:     - ポーリング回数に制限を設けるかは一般側の実装に合わせる     - ポーリング回数に制限が設けられた場合は、最後のポーリングの場合の処理は一般側と同様の処理にする
     * 一般ユーザーPROセッション問題提出結果取得
     */
    async getProQuestionSubmissionResultRaw(requestParameters: GetProQuestionSubmissionResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProQuestionSubmissionResultOut>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getProQuestionSubmissionResult.');
        }

        if (requestParameters.contentId === null || requestParameters.contentId === undefined) {
            throw new runtime.RequiredError('contentId','Required parameter requestParameters.contentId was null or undefined when calling getProQuestionSubmissionResult.');
        }

        if (requestParameters.submissionResultId === null || requestParameters.submissionResultId === undefined) {
            throw new runtime.RequiredError('submissionResultId','Required parameter requestParameters.submissionResultId was null or undefined when calling getProQuestionSubmissionResult.');
        }

        const queryParameters: any = {};

        if (requestParameters.isLastQuery !== undefined) {
            queryParameters['is_last_query'] = requestParameters.isLastQuery;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/sessions-pro/{session_id}/contents/{content_id}/submission-results/{submission_result_id}`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))).replace(`{${"content_id"}}`, encodeURIComponent(String(requestParameters.contentId))).replace(`{${"submission_result_id"}}`, encodeURIComponent(String(requestParameters.submissionResultId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProQuestionSubmissionResultOutFromJSON(jsonValue));
    }

    /**
     * 一般ユーザーPROセッション問題提出結果取得 - 必要権限: [GENERAL_USER] - 処理内容:     - ProSubmissionResultテーブルから結果を取得     - ProSubmissionResult.judge_status != ProJudgeStatus.WAITING_FOR_JUDGINGの場合         - is_done = True - 取得条件:     - Session.is_deleted = False     - セッションが開催期間中     - セッションに登録されている問題     - セッション参加ユーザーである     - ProSubmissionResult.judge_status != ProJudgeStatus.WAITING_FOR_JUDGING     - Content.content_type = ContentType.PRO     - Content.is_official = True     - Content.is_deleted = False - 例外処理:     - 以下の場合NotFound         - session_idが存在しない         - セッション開催期間外の場合         - 対象セッションに登録されていない問題         - content_idが存在しない         - content_idの問題が削除済み         - submission_result_idが存在しない - 補足:     - ポーリング回数に制限を設けるかは一般側の実装に合わせる     - ポーリング回数に制限が設けられた場合は、最後のポーリングの場合の処理は一般側と同様の処理にする
     * 一般ユーザーPROセッション問題提出結果取得
     */
    async getProQuestionSubmissionResult(requestParameters: GetProQuestionSubmissionResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProQuestionSubmissionResultOut> {
        const response = await this.getProQuestionSubmissionResultRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 一般ユーザーPROセッション問題詳細取得 - 必要権限：[GENERAL_USER] - 取得条件:     - Session.is_deleted = False     - セッションが開催期間中     - セッションに登録されている問題     - セッション参加ユーザーである     - Content.content_type = ContentType.PRO     - Content.is_official = True     - Content.is_deleted = False     - ProFile.file_type = FileType.DOWNLOAD - 例外処理:     - 以下の場合NotFound         - session_idが存在しない         - セッション開催期間外の場合         - 対象セッションに登録されていない問題         - content_idが存在しない         - content_idの問題が削除済み     - 以下の場合QuestionAnswerNotStarted         - ProResultにデータが存在しない - 補足:     - 取得内容はチャレンジのPRO問題と同様     - レスポンススキーマはquestion_proの問題詳細と同じものを使用
     * 一般ユーザーPROセッション問題詳細取得
     */
    async getProSessionQuestionRaw(requestParameters: GetProSessionQuestionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProQuestionDetailOut>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getProSessionQuestion.');
        }

        if (requestParameters.contentId === null || requestParameters.contentId === undefined) {
            throw new runtime.RequiredError('contentId','Required parameter requestParameters.contentId was null or undefined when calling getProSessionQuestion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/sessions-pro/{session_id}/contents/{content_id}`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))).replace(`{${"content_id"}}`, encodeURIComponent(String(requestParameters.contentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProQuestionDetailOutFromJSON(jsonValue));
    }

    /**
     * 一般ユーザーPROセッション問題詳細取得 - 必要権限：[GENERAL_USER] - 取得条件:     - Session.is_deleted = False     - セッションが開催期間中     - セッションに登録されている問題     - セッション参加ユーザーである     - Content.content_type = ContentType.PRO     - Content.is_official = True     - Content.is_deleted = False     - ProFile.file_type = FileType.DOWNLOAD - 例外処理:     - 以下の場合NotFound         - session_idが存在しない         - セッション開催期間外の場合         - 対象セッションに登録されていない問題         - content_idが存在しない         - content_idの問題が削除済み     - 以下の場合QuestionAnswerNotStarted         - ProResultにデータが存在しない - 補足:     - 取得内容はチャレンジのPRO問題と同様     - レスポンススキーマはquestion_proの問題詳細と同じものを使用
     * 一般ユーザーPROセッション問題詳細取得
     */
    async getProSessionQuestion(requestParameters: GetProSessionQuestionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProQuestionDetailOut> {
        const response = await this.getProSessionQuestionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 一般ユーザーPROセッション問題提出履歴一覧取得 - 必要権限: [GENERAL_USER] - 並び順: created_atの降順 - 処理内容:     - ProSubmissionResultから対象セッションにおける対象ユーザーの提出履歴を取得         - judge_status == ProJudgeStatus.PASSED以外の場合result=\"Failed\"         - judge_status == ProJudgeStatus.SAMPLE_CASE_ERRORの場合error_type=\"Sample Error\"         - judge_status == ProJudgeStatus.TEST_CASE_ERROR or ProJudgeStatus.SERVER_ERRORの場合error_type=\"Error\"         - error_messageが空文字だった場合None     - 取得した提出履歴の最高成績をProQuestionSubmitHistoryOut.best_resultに設定         - ProSubmissionResult.is_valid = Trueのデータ         - ProReviewを参照してランク分けが設定されている場合ランクを求める         - ランクがついた場合総評をProReviewより取得 - 取得条件:     - Session.is_deleted = False     - セッションが開催期間中     - セッションに登録されている問題     - セッション参加ユーザーである     - ProSubmissionResult.judge_status != ProJudgeStatus.WAITING_FOR_JUDGING     - Content.content_type = ContentType.PRO     - Content.is_official = True     - Content.is_deleted = False - 例外処理:     - 以下の場合NotFound         - session_idが存在しない         - セッション開催期間外の場合         - 対象セッションに登録されていない問題         - content_idが存在しない         - content_idの問題が削除済み         - submission_result_idが存在しない - 補足:     - 取得するデータが同じなためスキーマはquestions_proと同じものを使用
     * 一般ユーザーPROセッション問題提出履歴一覧取得
     */
    async getProSessionQuestionSubmissionHistoryListRaw(requestParameters: GetProSessionQuestionSubmissionHistoryListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProQuestionSubmitHistoryListOut>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getProSessionQuestionSubmissionHistoryList.');
        }

        if (requestParameters.contentId === null || requestParameters.contentId === undefined) {
            throw new runtime.RequiredError('contentId','Required parameter requestParameters.contentId was null or undefined when calling getProSessionQuestionSubmissionHistoryList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/sessions-pro/{session_id}/contents/{content_id}/submission-histories`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))).replace(`{${"content_id"}}`, encodeURIComponent(String(requestParameters.contentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProQuestionSubmitHistoryListOutFromJSON(jsonValue));
    }

    /**
     * 一般ユーザーPROセッション問題提出履歴一覧取得 - 必要権限: [GENERAL_USER] - 並び順: created_atの降順 - 処理内容:     - ProSubmissionResultから対象セッションにおける対象ユーザーの提出履歴を取得         - judge_status == ProJudgeStatus.PASSED以外の場合result=\"Failed\"         - judge_status == ProJudgeStatus.SAMPLE_CASE_ERRORの場合error_type=\"Sample Error\"         - judge_status == ProJudgeStatus.TEST_CASE_ERROR or ProJudgeStatus.SERVER_ERRORの場合error_type=\"Error\"         - error_messageが空文字だった場合None     - 取得した提出履歴の最高成績をProQuestionSubmitHistoryOut.best_resultに設定         - ProSubmissionResult.is_valid = Trueのデータ         - ProReviewを参照してランク分けが設定されている場合ランクを求める         - ランクがついた場合総評をProReviewより取得 - 取得条件:     - Session.is_deleted = False     - セッションが開催期間中     - セッションに登録されている問題     - セッション参加ユーザーである     - ProSubmissionResult.judge_status != ProJudgeStatus.WAITING_FOR_JUDGING     - Content.content_type = ContentType.PRO     - Content.is_official = True     - Content.is_deleted = False - 例外処理:     - 以下の場合NotFound         - session_idが存在しない         - セッション開催期間外の場合         - 対象セッションに登録されていない問題         - content_idが存在しない         - content_idの問題が削除済み         - submission_result_idが存在しない - 補足:     - 取得するデータが同じなためスキーマはquestions_proと同じものを使用
     * 一般ユーザーPROセッション問題提出履歴一覧取得
     */
    async getProSessionQuestionSubmissionHistoryList(requestParameters: GetProSessionQuestionSubmissionHistoryListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProQuestionSubmitHistoryListOut> {
        const response = await this.getProSessionQuestionSubmissionHistoryListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * セッションPRO問題を採点実行する - 必要権限：[PRO_SESSION_VIEW] - 実行処理:     - ScoringProIn(入力)で下記を取得       - run_file_name(実行するpythonファイル名)     - ProQuestion(PRO問題)モデルから下記データを取得       - evaluation(評価方法)       - evaluation_function(評価関数)       - evaluation_value(評価に使用する値)       - submit_type(採点方法)       - pass_line()合格ライン(0.1~100.0)     - 下記を共通部品などで取得       - user_upload_gcs_file_path(ユーザーが提出したZipファイルのURL)       - testcase_gcs_file_path(テストケース(Zipファイル)のURL)       - submission_csv_gcs_file_path(答えを書き込むCSVファイルのURL)       - answer_csv_gcs_file_path(解答CSVファイルのURL)       - judge_type(送信側識別用文字列)       - judge_code(送信側識別用数値)       - result_send_url(送信側がジャッジ結果を受け取るURL)     - 取得したデータを用いて採点を行う     - 例外処理     - 採点結果(ScoringProOut)を返却
     * セッションPRO問題採点実行(設計未完了)
     */
    async scoringProRaw(requestParameters: ScoringProRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScoringProOut>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling scoringPro.');
        }

        if (requestParameters.contentId === null || requestParameters.contentId === undefined) {
            throw new runtime.RequiredError('contentId','Required parameter requestParameters.contentId was null or undefined when calling scoringPro.');
        }

        if (requestParameters.scoringProIn === null || requestParameters.scoringProIn === undefined) {
            throw new runtime.RequiredError('scoringProIn','Required parameter requestParameters.scoringProIn was null or undefined when calling scoringPro.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/general/sessions-pro/{session_id}/scoring/pro/{content_id}`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))).replace(`{${"content_id"}}`, encodeURIComponent(String(requestParameters.contentId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ScoringProInToJSON(requestParameters.scoringProIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScoringProOutFromJSON(jsonValue));
    }

    /**
     * セッションPRO問題を採点実行する - 必要権限：[PRO_SESSION_VIEW] - 実行処理:     - ScoringProIn(入力)で下記を取得       - run_file_name(実行するpythonファイル名)     - ProQuestion(PRO問題)モデルから下記データを取得       - evaluation(評価方法)       - evaluation_function(評価関数)       - evaluation_value(評価に使用する値)       - submit_type(採点方法)       - pass_line()合格ライン(0.1~100.0)     - 下記を共通部品などで取得       - user_upload_gcs_file_path(ユーザーが提出したZipファイルのURL)       - testcase_gcs_file_path(テストケース(Zipファイル)のURL)       - submission_csv_gcs_file_path(答えを書き込むCSVファイルのURL)       - answer_csv_gcs_file_path(解答CSVファイルのURL)       - judge_type(送信側識別用文字列)       - judge_code(送信側識別用数値)       - result_send_url(送信側がジャッジ結果を受け取るURL)     - 取得したデータを用いて採点を行う     - 例外処理     - 採点結果(ScoringProOut)を返却
     * セッションPRO問題採点実行(設計未完了)
     */
    async scoringPro(requestParameters: ScoringProRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScoringProOut> {
        const response = await this.scoringProRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 一般ユーザーPROセッション問題提出補足情報(コメント)更新 - 必要権限: [GENERAL_USER] - 処理内容: ProSubmissionResult.extra_infoを更新 - 取得条件:     - Session.is_deleted = False     - セッションが開催期間中     - セッションに登録されている問題     - セッション参加ユーザーである     - ProSubmissionResult.judge_status != ProJudgeStatus.WAITING_FOR_JUDGING     - Content.content_type = ContentType.PRO     - Content.is_official = True     - Content.is_deleted = False - 例外処理:     - 以下の場合NotFound         - session_idが存在しない         - セッション開催期間外の場合         - 対象セッションに登録されていない問題         - content_idが存在しない         - content_idの問題が削除済み         - submission_result_idが存在しない - 補足:     - レスポンススキーマはquestions_proの一般ユーザーPRO問題提出補足情報(コメント)更新と同じものを使用
     * 一般ユーザーPROセッション問題提出補足情報(コメント)更新
     */
    async updateProSessionQuestionExtraInfoRaw(requestParameters: UpdateProSessionQuestionExtraInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProQuestionExtraInfoOut>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling updateProSessionQuestionExtraInfo.');
        }

        if (requestParameters.contentId === null || requestParameters.contentId === undefined) {
            throw new runtime.RequiredError('contentId','Required parameter requestParameters.contentId was null or undefined when calling updateProSessionQuestionExtraInfo.');
        }

        if (requestParameters.submissionResultId === null || requestParameters.submissionResultId === undefined) {
            throw new runtime.RequiredError('submissionResultId','Required parameter requestParameters.submissionResultId was null or undefined when calling updateProSessionQuestionExtraInfo.');
        }

        if (requestParameters.proQuestionExtraInfoIn === null || requestParameters.proQuestionExtraInfoIn === undefined) {
            throw new runtime.RequiredError('proQuestionExtraInfoIn','Required parameter requestParameters.proQuestionExtraInfoIn was null or undefined when calling updateProSessionQuestionExtraInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/general/sessions-pro/{session_id}/contents/{content_id}/submission-results/{submission_result_id}/extra-info`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))).replace(`{${"content_id"}}`, encodeURIComponent(String(requestParameters.contentId))).replace(`{${"submission_result_id"}}`, encodeURIComponent(String(requestParameters.submissionResultId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ProQuestionExtraInfoInToJSON(requestParameters.proQuestionExtraInfoIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProQuestionExtraInfoOutFromJSON(jsonValue));
    }

    /**
     * 一般ユーザーPROセッション問題提出補足情報(コメント)更新 - 必要権限: [GENERAL_USER] - 処理内容: ProSubmissionResult.extra_infoを更新 - 取得条件:     - Session.is_deleted = False     - セッションが開催期間中     - セッションに登録されている問題     - セッション参加ユーザーである     - ProSubmissionResult.judge_status != ProJudgeStatus.WAITING_FOR_JUDGING     - Content.content_type = ContentType.PRO     - Content.is_official = True     - Content.is_deleted = False - 例外処理:     - 以下の場合NotFound         - session_idが存在しない         - セッション開催期間外の場合         - 対象セッションに登録されていない問題         - content_idが存在しない         - content_idの問題が削除済み         - submission_result_idが存在しない - 補足:     - レスポンススキーマはquestions_proの一般ユーザーPRO問題提出補足情報(コメント)更新と同じものを使用
     * 一般ユーザーPROセッション問題提出補足情報(コメント)更新
     */
    async updateProSessionQuestionExtraInfo(requestParameters: UpdateProSessionQuestionExtraInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProQuestionExtraInfoOut> {
        const response = await this.updateProSessionQuestionExtraInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
