/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  FaqCreateIn,
  FaqDetailOut,
  FaqListOut,
  FaqUpdateIn,
  ValidationError,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    FaqCreateInFromJSON,
    FaqCreateInToJSON,
    FaqDetailOutFromJSON,
    FaqDetailOutToJSON,
    FaqListOutFromJSON,
    FaqListOutToJSON,
    FaqUpdateInFromJSON,
    FaqUpdateInToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface CreateFaqRequest {
    faqCreateIn: FaqCreateIn;
}

export interface DeleteFaqRequest {
    faqId: number;
}

export interface GetFaqRequest {
    faqId: number;
}

export interface UpdateFaqRequest {
    faqId: number;
    faqUpdateIn: FaqUpdateIn;
}

/**
 * 
 */
export class ManageFaqsApi extends runtime.BaseAPI {

    /**
     * FAQ作成 - 必要権限: [ASSETS_EDIT] - 作成者をログインユーザーで設定
     * FAQ作成
     */
    async createFaqRaw(requestParameters: CreateFaqRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FaqDetailOut>> {
        if (requestParameters.faqCreateIn === null || requestParameters.faqCreateIn === undefined) {
            throw new runtime.RequiredError('faqCreateIn','Required parameter requestParameters.faqCreateIn was null or undefined when calling createFaq.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/faqs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FaqCreateInToJSON(requestParameters.faqCreateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FaqDetailOutFromJSON(jsonValue));
    }

    /**
     * FAQ作成 - 必要権限: [ASSETS_EDIT] - 作成者をログインユーザーで設定
     * FAQ作成
     */
    async createFaq(requestParameters: CreateFaqRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FaqDetailOut> {
        const response = await this.createFaqRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * FAQを削除 - 必要権限: [ASSETS_EDIT]
     * FAQ削除
     */
    async deleteFaqRaw(requestParameters: DeleteFaqRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.faqId === null || requestParameters.faqId === undefined) {
            throw new runtime.RequiredError('faqId','Required parameter requestParameters.faqId was null or undefined when calling deleteFaq.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/faqs/{faq_id}`.replace(`{${"faq_id"}}`, encodeURIComponent(String(requestParameters.faqId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * FAQを削除 - 必要権限: [ASSETS_EDIT]
     * FAQ削除
     */
    async deleteFaq(requestParameters: DeleteFaqRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteFaqRaw(requestParameters, initOverrides);
    }

    /**
     * FAQ詳細取得 - 必要権限: [ASSETS_EDIT]
     * FAQ詳細取得
     */
    async getFaqRaw(requestParameters: GetFaqRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FaqDetailOut>> {
        if (requestParameters.faqId === null || requestParameters.faqId === undefined) {
            throw new runtime.RequiredError('faqId','Required parameter requestParameters.faqId was null or undefined when calling getFaq.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/faqs/{faq_id}`.replace(`{${"faq_id"}}`, encodeURIComponent(String(requestParameters.faqId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FaqDetailOutFromJSON(jsonValue));
    }

    /**
     * FAQ詳細取得 - 必要権限: [ASSETS_EDIT]
     * FAQ詳細取得
     */
    async getFaq(requestParameters: GetFaqRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FaqDetailOut> {
        const response = await this.getFaqRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * FAQ一覧取得 - 必要権限: [ASSETS_EDIT] - 並び順: id降順
     * FAQ一覧取得
     */
    async getFaqListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FaqListOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/faqs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FaqListOutFromJSON));
    }

    /**
     * FAQ一覧取得 - 必要権限: [ASSETS_EDIT] - 並び順: id降順
     * FAQ一覧取得
     */
    async getFaqList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FaqListOut>> {
        const response = await this.getFaqListRaw(initOverrides);
        return await response.value();
    }

    /**
     * FAQ更新 - 必要権限: [ASSETS_EDIT] - 更新者をログインユーザーで設定
     * FAQ更新
     */
    async updateFaqRaw(requestParameters: UpdateFaqRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FaqDetailOut>> {
        if (requestParameters.faqId === null || requestParameters.faqId === undefined) {
            throw new runtime.RequiredError('faqId','Required parameter requestParameters.faqId was null or undefined when calling updateFaq.');
        }

        if (requestParameters.faqUpdateIn === null || requestParameters.faqUpdateIn === undefined) {
            throw new runtime.RequiredError('faqUpdateIn','Required parameter requestParameters.faqUpdateIn was null or undefined when calling updateFaq.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/faqs/{faq_id}`.replace(`{${"faq_id"}}`, encodeURIComponent(String(requestParameters.faqId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: FaqUpdateInToJSON(requestParameters.faqUpdateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FaqDetailOutFromJSON(jsonValue));
    }

    /**
     * FAQ更新 - 必要権限: [ASSETS_EDIT] - 更新者をログインユーザーで設定
     * FAQ更新
     */
    async updateFaq(requestParameters: UpdateFaqRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FaqDetailOut> {
        const response = await this.updateFaqRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
