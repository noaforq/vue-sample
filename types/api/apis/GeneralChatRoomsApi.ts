/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  GeneralChatFileListOut,
  GeneralChatListDetailOut,
  GeneralChatListOut,
  GeneralChatRoomCreateIn,
  GeneralChatRoomCreateOut,
  GeneralChatRoomListOut,
  GeneralChatSendIn,
  ValidationError,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    GeneralChatFileListOutFromJSON,
    GeneralChatFileListOutToJSON,
    GeneralChatListDetailOutFromJSON,
    GeneralChatListDetailOutToJSON,
    GeneralChatListOutFromJSON,
    GeneralChatListOutToJSON,
    GeneralChatRoomCreateInFromJSON,
    GeneralChatRoomCreateInToJSON,
    GeneralChatRoomCreateOutFromJSON,
    GeneralChatRoomCreateOutToJSON,
    GeneralChatRoomListOutFromJSON,
    GeneralChatRoomListOutToJSON,
    GeneralChatSendInFromJSON,
    GeneralChatSendInToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface CreateGeneralChatRoomRequest {
    generalChatRoomCreateIn: GeneralChatRoomCreateIn;
}

export interface GetGeneralChatFileListRequest {
    chatRoomId: number;
}

export interface GetGeneralChatListRequest {
    chatRoomId: number;
}

export interface GetGeneralChatRoomListRequest {
    chatRoomType?: number;
    roomName?: string;
    limit?: number;
    offset?: number;
}

export interface ReadGeneralChatRequest {
    chatRoomId: number;
}

export interface SendGeneralChatRequest {
    chatRoomId: number;
    generalChatSendIn: GeneralChatSendIn;
}

/**
 * 
 */
export class GeneralChatRoomsApi extends runtime.BaseAPI {

    /**
     * 一般チャットルーム作成 - 企業, 444相手のみ作成可能 - 登録時データ補足情報     - organization_id: リクエストのorganization_idに設定する     - general_user_id: ログインユーザーのIDを設定する     - last_send_time: 現在時刻を設定する     - chat_room_type: 企業: `COMPANY`, エージェント(444): `AGENT` に設定する - 同じホストとユーザーのチャットルームが存在する場合は登録処理は行わず、レスポンスのみ行う
     * 一般チャットルーム作成
     */
    async createGeneralChatRoomRaw(requestParameters: CreateGeneralChatRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeneralChatRoomCreateOut>> {
        if (requestParameters.generalChatRoomCreateIn === null || requestParameters.generalChatRoomCreateIn === undefined) {
            throw new runtime.RequiredError('generalChatRoomCreateIn','Required parameter requestParameters.generalChatRoomCreateIn was null or undefined when calling createGeneralChatRoom.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/general/chat-rooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GeneralChatRoomCreateInToJSON(requestParameters.generalChatRoomCreateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GeneralChatRoomCreateOutFromJSON(jsonValue));
    }

    /**
     * 一般チャットルーム作成 - 企業, 444相手のみ作成可能 - 登録時データ補足情報     - organization_id: リクエストのorganization_idに設定する     - general_user_id: ログインユーザーのIDを設定する     - last_send_time: 現在時刻を設定する     - chat_room_type: 企業: `COMPANY`, エージェント(444): `AGENT` に設定する - 同じホストとユーザーのチャットルームが存在する場合は登録処理は行わず、レスポンスのみ行う
     * 一般チャットルーム作成
     */
    async createGeneralChatRoom(requestParameters: CreateGeneralChatRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeneralChatRoomCreateOut> {
        const response = await this.createGeneralChatRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 一般チャットファイル一覧取得 - 並び順: id昇順 - 取得条件     - 自身の参加しているチャットルームのみ取得可能     - is_deleted: False     - expires_at: 現在日時以上 - レスポンス補足情報     - sender:         - 送信者がホスト側でない(一般ユーザー): ユーザー名         - 送信者がホスト側で`chat_room_type`が`エージェント`: `TechFULキャリアアドバイザー`         - 送信者がホスト側で`chat_room_type`が`企業`: 企業名         - 送信者がホスト側で`chat_room_type`が`学校`: ユーザー名     - icon: 送信者のアイコン         - 送信者がホスト側でない(一般ユーザー): ユーザーアイコンURL         - 送信者がホスト側で`chat_room_type`が`エージェント`: TechFULロゴ画像URL         - 送信者がホスト側で`chat_room_type`が`企業`: 企業ロゴURL         - 送信者がホスト側で`chat_room_type`が`学校`: ユーザーアイコンURL
     * 一般チャットファイル一覧取得
     */
    async getGeneralChatFileListRaw(requestParameters: GetGeneralChatFileListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GeneralChatFileListOut>>> {
        if (requestParameters.chatRoomId === null || requestParameters.chatRoomId === undefined) {
            throw new runtime.RequiredError('chatRoomId','Required parameter requestParameters.chatRoomId was null or undefined when calling getGeneralChatFileList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/chat-rooms/{chat_room_id}/files`.replace(`{${"chat_room_id"}}`, encodeURIComponent(String(requestParameters.chatRoomId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GeneralChatFileListOutFromJSON));
    }

    /**
     * 一般チャットファイル一覧取得 - 並び順: id昇順 - 取得条件     - 自身の参加しているチャットルームのみ取得可能     - is_deleted: False     - expires_at: 現在日時以上 - レスポンス補足情報     - sender:         - 送信者がホスト側でない(一般ユーザー): ユーザー名         - 送信者がホスト側で`chat_room_type`が`エージェント`: `TechFULキャリアアドバイザー`         - 送信者がホスト側で`chat_room_type`が`企業`: 企業名         - 送信者がホスト側で`chat_room_type`が`学校`: ユーザー名     - icon: 送信者のアイコン         - 送信者がホスト側でない(一般ユーザー): ユーザーアイコンURL         - 送信者がホスト側で`chat_room_type`が`エージェント`: TechFULロゴ画像URL         - 送信者がホスト側で`chat_room_type`が`企業`: 企業ロゴURL         - 送信者がホスト側で`chat_room_type`が`学校`: ユーザーアイコンURL
     * 一般チャットファイル一覧取得
     */
    async getGeneralChatFileList(requestParameters: GetGeneralChatFileListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GeneralChatFileListOut>> {
        const response = await this.getGeneralChatFileListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 一般チャット一覧取得 - 並び順: id昇順 - 自身の参加しているチャットルームのみ取得可能 - レスポンス項目     - icon: chat_room_typeで分岐         - エージェントの場合: TechFULロゴ画像         - 学校の場合: 学校ユーザーアイコン画像         - 企業の場合: 企業ロゴ画像     - room_name: chat_room_typeで分岐         - エージェントの場合: `TechFULキャリアアドバイザー`         - 学校の場合: 学校ユーザーアカウント名         - 企業の場合: 企業名     - sub_room_name: 学校の場合は学校名、それ以外は空文字     - chats         - file.is_expired: 有効期限切れ、もしくはis_deletedがTrueの場合True、それ以外はFalse         - is_own:  自身のチャットの場合True         - sender: room_nameと同じ         - icon: 上記iconと同じ
     * 一般チャット一覧取得
     */
    async getGeneralChatListRaw(requestParameters: GetGeneralChatListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeneralChatListOut>> {
        if (requestParameters.chatRoomId === null || requestParameters.chatRoomId === undefined) {
            throw new runtime.RequiredError('chatRoomId','Required parameter requestParameters.chatRoomId was null or undefined when calling getGeneralChatList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/chat-rooms/{chat_room_id}/chats`.replace(`{${"chat_room_id"}}`, encodeURIComponent(String(requestParameters.chatRoomId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GeneralChatListOutFromJSON(jsonValue));
    }

    /**
     * 一般チャット一覧取得 - 並び順: id昇順 - 自身の参加しているチャットルームのみ取得可能 - レスポンス項目     - icon: chat_room_typeで分岐         - エージェントの場合: TechFULロゴ画像         - 学校の場合: 学校ユーザーアイコン画像         - 企業の場合: 企業ロゴ画像     - room_name: chat_room_typeで分岐         - エージェントの場合: `TechFULキャリアアドバイザー`         - 学校の場合: 学校ユーザーアカウント名         - 企業の場合: 企業名     - sub_room_name: 学校の場合は学校名、それ以外は空文字     - chats         - file.is_expired: 有効期限切れ、もしくはis_deletedがTrueの場合True、それ以外はFalse         - is_own:  自身のチャットの場合True         - sender: room_nameと同じ         - icon: 上記iconと同じ
     * 一般チャット一覧取得
     */
    async getGeneralChatList(requestParameters: GetGeneralChatListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeneralChatListOut> {
        const response = await this.getGeneralChatListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 一般チャットルーム一覧取得 - 並び順: 最終送信日時の降順 - 自身の参加しているチャットルームのみ取得 - レスポンス補足情報     - icon: chat_room_typeで分岐         - エージェントの場合: TechFULロゴ画像         - 学校の場合: 学校ユーザーアイコン画像         - 企業の場合: 企業ロゴ画像     - room_name: chat_room_typeで分岐         - エージェントの場合: `TechFULキャリアアドバイザー`         - 学校の場合: 学校ユーザーアカウント名         - 企業の場合: 企業名     - sub_room_name: chat_room_typeが学校の場合は学校名、それ以外は空文字     - chat_partner_type: chat_room_typeで分岐         - エージェントの場合: `エージェント`         - 学校の場合: `学校`         - 企業の場合: `企業`     - unread_count: チャットの未読数
     * 一般チャットルーム一覧取得
     */
    async getGeneralChatRoomListRaw(requestParameters: GetGeneralChatRoomListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeneralChatRoomListOut>> {
        const queryParameters: any = {};

        if (requestParameters.chatRoomType !== undefined) {
            queryParameters['chat_room_type'] = requestParameters.chatRoomType;
        }

        if (requestParameters.roomName !== undefined) {
            queryParameters['room_name'] = requestParameters.roomName;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/chat-rooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GeneralChatRoomListOutFromJSON(jsonValue));
    }

    /**
     * 一般チャットルーム一覧取得 - 並び順: 最終送信日時の降順 - 自身の参加しているチャットルームのみ取得 - レスポンス補足情報     - icon: chat_room_typeで分岐         - エージェントの場合: TechFULロゴ画像         - 学校の場合: 学校ユーザーアイコン画像         - 企業の場合: 企業ロゴ画像     - room_name: chat_room_typeで分岐         - エージェントの場合: `TechFULキャリアアドバイザー`         - 学校の場合: 学校ユーザーアカウント名         - 企業の場合: 企業名     - sub_room_name: chat_room_typeが学校の場合は学校名、それ以外は空文字     - chat_partner_type: chat_room_typeで分岐         - エージェントの場合: `エージェント`         - 学校の場合: `学校`         - 企業の場合: `企業`     - unread_count: チャットの未読数
     * 一般チャットルーム一覧取得
     */
    async getGeneralChatRoomList(requestParameters: GetGeneralChatRoomListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeneralChatRoomListOut> {
        const response = await this.getGeneralChatRoomListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 一般チャット既読 - 既読可能条件     - 自身の参加しているチャットルームのみ - chat_roomが取得できない場合はNotFoundエラー - 指定されたチャットルームで、自身が未読のチャットを既読にする(ChatReadUserに登録する)
     * 一般チャット既読
     */
    async readGeneralChatRaw(requestParameters: ReadGeneralChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.chatRoomId === null || requestParameters.chatRoomId === undefined) {
            throw new runtime.RequiredError('chatRoomId','Required parameter requestParameters.chatRoomId was null or undefined when calling readGeneralChat.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/chat-rooms/{chat_room_id}/read-chats`.replace(`{${"chat_room_id"}}`, encodeURIComponent(String(requestParameters.chatRoomId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 一般チャット既読 - 既読可能条件     - 自身の参加しているチャットルームのみ - chat_roomが取得できない場合はNotFoundエラー - 指定されたチャットルームで、自身が未読のチャットを既読にする(ChatReadUserに登録する)
     * 一般チャット既読
     */
    async readGeneralChat(requestParameters: ReadGeneralChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.readGeneralChatRaw(requestParameters, initOverrides);
    }

    /**
     * 一般チャット送信 - 自身の参加しているチャットルームのみ - チャット送信後に送信先学校ユーザー、企業に対して通知メールを送信する - チャットファイルの場合は有効期限を7日間に設定する - レスポンス項目     - icon: chat_room_typeで分岐         - エージェントの場合: TechFULロゴ画像         - 学校の場合: 学校ユーザーアイコン画像         - 企業の場合: 企業ロゴ画像     - room_name: chat_room_typeで分岐         - エージェントの場合: `TechFULキャリアアドバイザー`         - 学校の場合: 学校ユーザーアカウント名         - 企業の場合: 企業名     - sub_room_name: 学校の場合は学校名、それ以外は空文字     - chats         - file.is_expired: 有効期限切れ、もしくはis_deletedがTrueの場合True、それ以外はFalse         - is_own: 自身のチャットの場合True         - sender: room_nameと同じ         - icon: 上記iconと同じ - 登録時データ補足情報     - ChatRoom.last_send_time: 現在時刻で更新
     * 一般チャット送信
     */
    async sendGeneralChatRaw(requestParameters: SendGeneralChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeneralChatListDetailOut>> {
        if (requestParameters.chatRoomId === null || requestParameters.chatRoomId === undefined) {
            throw new runtime.RequiredError('chatRoomId','Required parameter requestParameters.chatRoomId was null or undefined when calling sendGeneralChat.');
        }

        if (requestParameters.generalChatSendIn === null || requestParameters.generalChatSendIn === undefined) {
            throw new runtime.RequiredError('generalChatSendIn','Required parameter requestParameters.generalChatSendIn was null or undefined when calling sendGeneralChat.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/general/chat-rooms/{chat_room_id}/chats`.replace(`{${"chat_room_id"}}`, encodeURIComponent(String(requestParameters.chatRoomId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GeneralChatSendInToJSON(requestParameters.generalChatSendIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GeneralChatListDetailOutFromJSON(jsonValue));
    }

    /**
     * 一般チャット送信 - 自身の参加しているチャットルームのみ - チャット送信後に送信先学校ユーザー、企業に対して通知メールを送信する - チャットファイルの場合は有効期限を7日間に設定する - レスポンス項目     - icon: chat_room_typeで分岐         - エージェントの場合: TechFULロゴ画像         - 学校の場合: 学校ユーザーアイコン画像         - 企業の場合: 企業ロゴ画像     - room_name: chat_room_typeで分岐         - エージェントの場合: `TechFULキャリアアドバイザー`         - 学校の場合: 学校ユーザーアカウント名         - 企業の場合: 企業名     - sub_room_name: 学校の場合は学校名、それ以外は空文字     - chats         - file.is_expired: 有効期限切れ、もしくはis_deletedがTrueの場合True、それ以外はFalse         - is_own: 自身のチャットの場合True         - sender: room_nameと同じ         - icon: 上記iconと同じ - 登録時データ補足情報     - ChatRoom.last_send_time: 現在時刻で更新
     * 一般チャット送信
     */
    async sendGeneralChat(requestParameters: SendGeneralChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeneralChatListDetailOut> {
        const response = await this.sendGeneralChatRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
