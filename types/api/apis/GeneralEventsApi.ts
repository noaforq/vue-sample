/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  GeneralEventDetailOut,
  GeneralEventListOut,
  GeneralEventThreadListOut,
  GetEventScoreStatsOut,
  ValidationError,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    GeneralEventDetailOutFromJSON,
    GeneralEventDetailOutToJSON,
    GeneralEventListOutFromJSON,
    GeneralEventListOutToJSON,
    GeneralEventThreadListOutFromJSON,
    GeneralEventThreadListOutToJSON,
    GetEventScoreStatsOutFromJSON,
    GetEventScoreStatsOutToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface GetEventScoreStatsRequest {
    eventId: number;
}

export interface GetGeneralEventRequest {
    eventId: number;
}

export interface GetGeneralEventListRequest {
    limit?: number;
    offset?: number;
    search?: string;
    isParticipating?: boolean;
    isInProgress?: boolean;
    isPickedUp?: boolean;
}

export interface GetGeneralEventThreadListRequest {
    eventId: number;
}

/**
 * 
 */
export class GeneralEventsApi extends runtime.BaseAPI {

    /**
     * イベント成績を取得 - 必要権限: [GENERAL_USER] - 例外処理     - eventが見つからない場合はNotFound - 処理手順     - event_idからeventを取得、session_id(複数可能)を取得     - session_idとuser_idでSessionUserを取得できるかどうか確認     -　SessionContentで紐づくContentを取得、question_idを取得     - 練習セッションではないsession_id、user_id、question_idでSessionResultを取得、user_idでグループし、scoreと順位を集計 - 備考     - 練習セッションの問題はは集計対象外なので、該当fieldはNoneのまま返す
     * イベント成績取得
     */
    async getEventScoreStatsRaw(requestParameters: GetEventScoreStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEventScoreStatsOut>> {
        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling getEventScoreStats.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/events/{event_id}/results`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters.eventId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEventScoreStatsOutFromJSON(jsonValue));
    }

    /**
     * イベント成績を取得 - 必要権限: [GENERAL_USER] - 例外処理     - eventが見つからない場合はNotFound - 処理手順     - event_idからeventを取得、session_id(複数可能)を取得     - session_idとuser_idでSessionUserを取得できるかどうか確認     -　SessionContentで紐づくContentを取得、question_idを取得     - 練習セッションではないsession_id、user_id、question_idでSessionResultを取得、user_idでグループし、scoreと順位を集計 - 備考     - 練習セッションの問題はは集計対象外なので、該当fieldはNoneのまま返す
     * イベント成績取得
     */
    async getEventScoreStats(requestParameters: GetEventScoreStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEventScoreStatsOut> {
        const response = await this.getEventScoreStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * イベント詳細を取得 - 必要権限: [GENERAL_USER][SKILL_CHECK_USER] - 取得条件:     - is_deleted = False - レスポンスデータ補足情報     - host_name: 企業名 または 学校名 + 学部名
     * イベント詳細取得
     */
    async getGeneralEventRaw(requestParameters: GetGeneralEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeneralEventDetailOut>> {
        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling getGeneralEvent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/events/{event_id}`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters.eventId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GeneralEventDetailOutFromJSON(jsonValue));
    }

    /**
     * イベント詳細を取得 - 必要権限: [GENERAL_USER][SKILL_CHECK_USER] - 取得条件:     - is_deleted = False - レスポンスデータ補足情報     - host_name: 企業名 または 学校名 + 学部名
     * イベント詳細取得
     */
    async getGeneralEvent(requestParameters: GetGeneralEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeneralEventDetailOut> {
        const response = await this.getGeneralEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * イベント一覧を取得 - 必要権限: [GENERAL_USER] - 並び順:ID降順 - 取得条件:     - is_deleted = False     - is_public = True - クエリパラメータ補足情報     - is_participating = True : ユーザーが参加中のイベント一覧取得     - is_participating = False : 公開イベント一覧     - is_in_progress = True : イベントに紐づくセッションが開催中のみ     - is_picked_up = True: TODO イベントがピックアップ中のみ、現状未実装（特に検索条件なし） - レスポンスデータ補足情報     - is_finished: 「セッションが1つ以上」AND「現在時刻が全セッションの開催終了日の後」     - host_name: 企業名 または 学校名 + 学部名     - sessions         - user_count: セッション参加ユーザーの合計         - session_status         　- 開催予定: セッション開始日時 > 現在日時         　- 開催中: セッション開始日時 <= 現在日時 <= セッション終了日時         　- 終了: 現在日時 > セッション終了日時
     * イベント一覧を取得
     */
    async getGeneralEventListRaw(requestParameters: GetGeneralEventListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeneralEventListOut>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.isParticipating !== undefined) {
            queryParameters['is_participating'] = requestParameters.isParticipating;
        }

        if (requestParameters.isInProgress !== undefined) {
            queryParameters['is_in_progress'] = requestParameters.isInProgress;
        }

        if (requestParameters.isPickedUp !== undefined) {
            queryParameters['is_picked_up'] = requestParameters.isPickedUp;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/events`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GeneralEventListOutFromJSON(jsonValue));
    }

    /**
     * イベント一覧を取得 - 必要権限: [GENERAL_USER] - 並び順:ID降順 - 取得条件:     - is_deleted = False     - is_public = True - クエリパラメータ補足情報     - is_participating = True : ユーザーが参加中のイベント一覧取得     - is_participating = False : 公開イベント一覧     - is_in_progress = True : イベントに紐づくセッションが開催中のみ     - is_picked_up = True: TODO イベントがピックアップ中のみ、現状未実装（特に検索条件なし） - レスポンスデータ補足情報     - is_finished: 「セッションが1つ以上」AND「現在時刻が全セッションの開催終了日の後」     - host_name: 企業名 または 学校名 + 学部名     - sessions         - user_count: セッション参加ユーザーの合計         - session_status         　- 開催予定: セッション開始日時 > 現在日時         　- 開催中: セッション開始日時 <= 現在日時 <= セッション終了日時         　- 終了: 現在日時 > セッション終了日時
     * イベント一覧を取得
     */
    async getGeneralEventList(requestParameters: GetGeneralEventListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeneralEventListOut> {
        const response = await this.getGeneralEventListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * イベントスレッド一覧を取得 - 必要権限: [GENERAL_USER] - 並び順:ID降順 - 取得条件:     - 学校主催イベント     - Event.is_deleted = False     - EventThread.is_deleted = False
     * イベントスレッド一覧を取得
     */
    async getGeneralEventThreadListRaw(requestParameters: GetGeneralEventThreadListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GeneralEventThreadListOut>>> {
        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling getGeneralEventThreadList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/events/{event_id}/threads`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters.eventId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GeneralEventThreadListOutFromJSON));
    }

    /**
     * イベントスレッド一覧を取得 - 必要権限: [GENERAL_USER] - 並び順:ID降順 - 取得条件:     - 学校主催イベント     - Event.is_deleted = False     - EventThread.is_deleted = False
     * イベントスレッド一覧を取得
     */
    async getGeneralEventThreadList(requestParameters: GetGeneralEventThreadListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GeneralEventThreadListOut>> {
        const response = await this.getGeneralEventThreadListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
