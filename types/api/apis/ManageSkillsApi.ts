/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  SkillCreateIn,
  SkillDetailOut,
  SkillListOut,
  SkillUpdateIn,
  ValidationError,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    SkillCreateInFromJSON,
    SkillCreateInToJSON,
    SkillDetailOutFromJSON,
    SkillDetailOutToJSON,
    SkillListOutFromJSON,
    SkillListOutToJSON,
    SkillUpdateInFromJSON,
    SkillUpdateInToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface CreateSkillRequest {
    skillCreateIn: SkillCreateIn;
}

export interface DeleteSkillRequest {
    skillId: number;
}

export interface GetSkillRequest {
    skillId: number;
}

export interface UpdateSkillRequest {
    skillId: number;
    skillUpdateIn: SkillUpdateIn;
}

/**
 * 
 */
export class ManageSkillsApi extends runtime.BaseAPI {

    /**
     * スキルを作成 - 必要権限: [ASSETS_EDIT]
     * スキル作成
     */
    async createSkillRaw(requestParameters: CreateSkillRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SkillDetailOut>> {
        if (requestParameters.skillCreateIn === null || requestParameters.skillCreateIn === undefined) {
            throw new runtime.RequiredError('skillCreateIn','Required parameter requestParameters.skillCreateIn was null or undefined when calling createSkill.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/skills`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SkillCreateInToJSON(requestParameters.skillCreateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SkillDetailOutFromJSON(jsonValue));
    }

    /**
     * スキルを作成 - 必要権限: [ASSETS_EDIT]
     * スキル作成
     */
    async createSkill(requestParameters: CreateSkillRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SkillDetailOut> {
        const response = await this.createSkillRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * スキルを削除 - 必要権限: [ASSETS_EDIT]
     * スキル削除
     */
    async deleteSkillRaw(requestParameters: DeleteSkillRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.skillId === null || requestParameters.skillId === undefined) {
            throw new runtime.RequiredError('skillId','Required parameter requestParameters.skillId was null or undefined when calling deleteSkill.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/skills/{skill_id}`.replace(`{${"skill_id"}}`, encodeURIComponent(String(requestParameters.skillId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * スキルを削除 - 必要権限: [ASSETS_EDIT]
     * スキル削除
     */
    async deleteSkill(requestParameters: DeleteSkillRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSkillRaw(requestParameters, initOverrides);
    }

    /**
     * スキル詳細を取得 - 必要権限: [ASSETS_EDIT]
     * スキル詳細取得
     */
    async getSkillRaw(requestParameters: GetSkillRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SkillDetailOut>> {
        if (requestParameters.skillId === null || requestParameters.skillId === undefined) {
            throw new runtime.RequiredError('skillId','Required parameter requestParameters.skillId was null or undefined when calling getSkill.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/skills/{skill_id}`.replace(`{${"skill_id"}}`, encodeURIComponent(String(requestParameters.skillId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SkillDetailOutFromJSON(jsonValue));
    }

    /**
     * スキル詳細を取得 - 必要権限: [ASSETS_EDIT]
     * スキル詳細取得
     */
    async getSkill(requestParameters: GetSkillRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SkillDetailOut> {
        const response = await this.getSkillRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * スキル一覧を取得 - 必要権限: [ASSETS_EDIT] - 並び順: id降順
     * スキル一覧取得
     */
    async getSkillListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SkillListOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/skills`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SkillListOutFromJSON));
    }

    /**
     * スキル一覧を取得 - 必要権限: [ASSETS_EDIT] - 並び順: id降順
     * スキル一覧取得
     */
    async getSkillList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SkillListOut>> {
        const response = await this.getSkillListRaw(initOverrides);
        return await response.value();
    }

    /**
     * スキルを更新 - 必要権限: [ASSETS_EDIT]
     * スキル更新
     */
    async updateSkillRaw(requestParameters: UpdateSkillRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SkillDetailOut>> {
        if (requestParameters.skillId === null || requestParameters.skillId === undefined) {
            throw new runtime.RequiredError('skillId','Required parameter requestParameters.skillId was null or undefined when calling updateSkill.');
        }

        if (requestParameters.skillUpdateIn === null || requestParameters.skillUpdateIn === undefined) {
            throw new runtime.RequiredError('skillUpdateIn','Required parameter requestParameters.skillUpdateIn was null or undefined when calling updateSkill.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/skills/{skill_id}`.replace(`{${"skill_id"}}`, encodeURIComponent(String(requestParameters.skillId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SkillUpdateInToJSON(requestParameters.skillUpdateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SkillDetailOutFromJSON(jsonValue));
    }

    /**
     * スキルを更新 - 必要権限: [ASSETS_EDIT]
     * スキル更新
     */
    async updateSkill(requestParameters: UpdateSkillRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SkillDetailOut> {
        const response = await this.updateSkillRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
