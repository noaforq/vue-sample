/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  JobFeatureCreateIn,
  JobFeatureDetailOut,
  JobFeatureListOut,
  JobFeatureUpdateIn,
  ValidationError,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    JobFeatureCreateInFromJSON,
    JobFeatureCreateInToJSON,
    JobFeatureDetailOutFromJSON,
    JobFeatureDetailOutToJSON,
    JobFeatureListOutFromJSON,
    JobFeatureListOutToJSON,
    JobFeatureUpdateInFromJSON,
    JobFeatureUpdateInToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface CreateJobFeatureRequest {
    jobFeatureCreateIn: JobFeatureCreateIn;
}

export interface DeleteJobFeatureRequest {
    jobFeatureId: number;
}

export interface GetJobFeatureRequest {
    jobFeatureId: number;
}

export interface UpdateJobFeatureRequest {
    jobFeatureId: number;
    jobFeatureUpdateIn: JobFeatureUpdateIn;
}

/**
 * 
 */
export class ManageJobFeaturesApi extends runtime.BaseAPI {

    /**
     * 求人の特徴を作成 - 必要権限: [ASSETS_EDIT]
     * 求人特徴作成
     */
    async createJobFeatureRaw(requestParameters: CreateJobFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobFeatureDetailOut>> {
        if (requestParameters.jobFeatureCreateIn === null || requestParameters.jobFeatureCreateIn === undefined) {
            throw new runtime.RequiredError('jobFeatureCreateIn','Required parameter requestParameters.jobFeatureCreateIn was null or undefined when calling createJobFeature.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/job-features`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JobFeatureCreateInToJSON(requestParameters.jobFeatureCreateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobFeatureDetailOutFromJSON(jsonValue));
    }

    /**
     * 求人の特徴を作成 - 必要権限: [ASSETS_EDIT]
     * 求人特徴作成
     */
    async createJobFeature(requestParameters: CreateJobFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobFeatureDetailOut> {
        const response = await this.createJobFeatureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 求人の特徴を削除 - 必要権限: [ASSETS_EDIT]
     * 求人特徴削除
     */
    async deleteJobFeatureRaw(requestParameters: DeleteJobFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.jobFeatureId === null || requestParameters.jobFeatureId === undefined) {
            throw new runtime.RequiredError('jobFeatureId','Required parameter requestParameters.jobFeatureId was null or undefined when calling deleteJobFeature.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/job-features/{job_feature_id}`.replace(`{${"job_feature_id"}}`, encodeURIComponent(String(requestParameters.jobFeatureId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 求人の特徴を削除 - 必要権限: [ASSETS_EDIT]
     * 求人特徴削除
     */
    async deleteJobFeature(requestParameters: DeleteJobFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteJobFeatureRaw(requestParameters, initOverrides);
    }

    /**
     * 求人の特徴詳細を取得 - 必要権限: [ASSETS_EDIT]
     * 求人特徴詳細取得
     */
    async getJobFeatureRaw(requestParameters: GetJobFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobFeatureDetailOut>> {
        if (requestParameters.jobFeatureId === null || requestParameters.jobFeatureId === undefined) {
            throw new runtime.RequiredError('jobFeatureId','Required parameter requestParameters.jobFeatureId was null or undefined when calling getJobFeature.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/job-features/{job_feature_id}`.replace(`{${"job_feature_id"}}`, encodeURIComponent(String(requestParameters.jobFeatureId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobFeatureDetailOutFromJSON(jsonValue));
    }

    /**
     * 求人の特徴詳細を取得 - 必要権限: [ASSETS_EDIT]
     * 求人特徴詳細取得
     */
    async getJobFeature(requestParameters: GetJobFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobFeatureDetailOut> {
        const response = await this.getJobFeatureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 求人の特徴一覧を取得 - 必要権限: [ASSETS_EDIT] - 並び順: id降順
     * 求人特徴一覧取得
     */
    async getJobFeatureListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<JobFeatureListOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/job-features`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(JobFeatureListOutFromJSON));
    }

    /**
     * 求人の特徴一覧を取得 - 必要権限: [ASSETS_EDIT] - 並び順: id降順
     * 求人特徴一覧取得
     */
    async getJobFeatureList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<JobFeatureListOut>> {
        const response = await this.getJobFeatureListRaw(initOverrides);
        return await response.value();
    }

    /**
     * 求人の特徴を更新 - 必要権限: [ASSETS_EDIT]
     * 求人特徴更新
     */
    async updateJobFeatureRaw(requestParameters: UpdateJobFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobFeatureDetailOut>> {
        if (requestParameters.jobFeatureId === null || requestParameters.jobFeatureId === undefined) {
            throw new runtime.RequiredError('jobFeatureId','Required parameter requestParameters.jobFeatureId was null or undefined when calling updateJobFeature.');
        }

        if (requestParameters.jobFeatureUpdateIn === null || requestParameters.jobFeatureUpdateIn === undefined) {
            throw new runtime.RequiredError('jobFeatureUpdateIn','Required parameter requestParameters.jobFeatureUpdateIn was null or undefined when calling updateJobFeature.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/job-features/{job_feature_id}`.replace(`{${"job_feature_id"}}`, encodeURIComponent(String(requestParameters.jobFeatureId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: JobFeatureUpdateInToJSON(requestParameters.jobFeatureUpdateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobFeatureDetailOutFromJSON(jsonValue));
    }

    /**
     * 求人の特徴を更新 - 必要権限: [ASSETS_EDIT]
     * 求人特徴更新
     */
    async updateJobFeature(requestParameters: UpdateJobFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobFeatureDetailOut> {
        const response = await this.updateJobFeatureRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
