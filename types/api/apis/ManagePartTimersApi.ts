/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  PartTimersCreateIn,
  PartTimersDetailOut,
  PartTimersListOut,
  ValidationError,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    PartTimersCreateInFromJSON,
    PartTimersCreateInToJSON,
    PartTimersDetailOutFromJSON,
    PartTimersDetailOutToJSON,
    PartTimersListOutFromJSON,
    PartTimersListOutToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface CreatePartTimersRequest {
    partTimersCreateIn: PartTimersCreateIn;
}

export interface DeletePartTimerRequest {
    partTimeId: number;
}

/**
 * 
 */
export class ManagePartTimersApi extends runtime.BaseAPI {

    /**
     * アルバイトアカウント作成 - 必要権限: [STAFF_EDIT] - ログインユーザー所属組織のアルバイトアカウントを作成する - 登録データ補足情報     - created_by: ログインユーザーのlast_name + first_name
     * アルバイト作成
     */
    async createPartTimersRaw(requestParameters: CreatePartTimersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PartTimersDetailOut>> {
        if (requestParameters.partTimersCreateIn === null || requestParameters.partTimersCreateIn === undefined) {
            throw new runtime.RequiredError('partTimersCreateIn','Required parameter requestParameters.partTimersCreateIn was null or undefined when calling createPartTimers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/part-timers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PartTimersCreateInToJSON(requestParameters.partTimersCreateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PartTimersDetailOutFromJSON(jsonValue));
    }

    /**
     * アルバイトアカウント作成 - 必要権限: [STAFF_EDIT] - ログインユーザー所属組織のアルバイトアカウントを作成する - 登録データ補足情報     - created_by: ログインユーザーのlast_name + first_name
     * アルバイト作成
     */
    async createPartTimers(requestParameters: CreatePartTimersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PartTimersDetailOut> {
        const response = await this.createPartTimersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * アルバイトアカウント論理削除 - 必要権限: [STAFF_EDIT] - is_deleted=Falseのアルバイトのみ削除可能 - ログインユーザー所属組織のアルバイトのみ削除可能
     * アルバイト削除
     */
    async deletePartTimerRaw(requestParameters: DeletePartTimerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.partTimeId === null || requestParameters.partTimeId === undefined) {
            throw new runtime.RequiredError('partTimeId','Required parameter requestParameters.partTimeId was null or undefined when calling deletePartTimer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/part-timers/{part_time_id}`.replace(`{${"part_time_id"}}`, encodeURIComponent(String(requestParameters.partTimeId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * アルバイトアカウント論理削除 - 必要権限: [STAFF_EDIT] - is_deleted=Falseのアルバイトのみ削除可能 - ログインユーザー所属組織のアルバイトのみ削除可能
     * アルバイト削除
     */
    async deletePartTimer(requestParameters: DeletePartTimerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePartTimerRaw(requestParameters, initOverrides);
    }

    /**
     * アルバイトアカウント一覧を取得 - 必要権限: [STAFF_VIEW] - ログインユーザー所属組織のアルバイトを取得 - is_deleted=Falseのスタッフのみ取得 - 並び順: id昇順
     * アルバイト一覧
     */
    async getPartTimerListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PartTimersListOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/part-timers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PartTimersListOutFromJSON));
    }

    /**
     * アルバイトアカウント一覧を取得 - 必要権限: [STAFF_VIEW] - ログインユーザー所属組織のアルバイトを取得 - is_deleted=Falseのスタッフのみ取得 - 並び順: id昇順
     * アルバイト一覧
     */
    async getPartTimerList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PartTimersListOut>> {
        const response = await this.getPartTimerListRaw(initOverrides);
        return await response.value();
    }

}
