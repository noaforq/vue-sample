/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  AppSchemasGeneralSessionsTechthonGeneralSessionsTechthonContentOutTechthonContentDetailOut,
  AppSchemasGeneralSessionsTechthonTechthonPortfolioOutTechthonPortfolioOut,
  AppSchemasGeneralSessionsTechthonTechthonRankingOutTechthonRankingOut,
  ExecuteTechthonContentOut,
  SessionsTechthonContentListOut,
  SessionsTechthonEnvironmentListOut,
  TechthonContentIdOut,
  TechthonHintOut,
  TechthonParticipantListOut,
  TechthonServerInfoOut,
  TechthonSkillDataIn,
  TechthonSkillDataOut,
  TechthonTestCaseHintStatusOut,
  ValidationError,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    AppSchemasGeneralSessionsTechthonGeneralSessionsTechthonContentOutTechthonContentDetailOutFromJSON,
    AppSchemasGeneralSessionsTechthonGeneralSessionsTechthonContentOutTechthonContentDetailOutToJSON,
    AppSchemasGeneralSessionsTechthonTechthonPortfolioOutTechthonPortfolioOutFromJSON,
    AppSchemasGeneralSessionsTechthonTechthonPortfolioOutTechthonPortfolioOutToJSON,
    AppSchemasGeneralSessionsTechthonTechthonRankingOutTechthonRankingOutFromJSON,
    AppSchemasGeneralSessionsTechthonTechthonRankingOutTechthonRankingOutToJSON,
    ExecuteTechthonContentOutFromJSON,
    ExecuteTechthonContentOutToJSON,
    SessionsTechthonContentListOutFromJSON,
    SessionsTechthonContentListOutToJSON,
    SessionsTechthonEnvironmentListOutFromJSON,
    SessionsTechthonEnvironmentListOutToJSON,
    TechthonContentIdOutFromJSON,
    TechthonContentIdOutToJSON,
    TechthonHintOutFromJSON,
    TechthonHintOutToJSON,
    TechthonParticipantListOutFromJSON,
    TechthonParticipantListOutToJSON,
    TechthonServerInfoOutFromJSON,
    TechthonServerInfoOutToJSON,
    TechthonSkillDataInFromJSON,
    TechthonSkillDataInToJSON,
    TechthonSkillDataOutFromJSON,
    TechthonSkillDataOutToJSON,
    TechthonTestCaseHintStatusOutFromJSON,
    TechthonTestCaseHintStatusOutToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface ExecuteGeneralSessionsTechthonContentRequest {
    sessionId: number;
    contentId: number;
}

export interface ExecuteGeneralSessionsTechthonEnvironmentRequest {
    sessionId: number;
    contentId: number;
    environmentId: number;
}

export interface GetGeneralSessionsTechthonContentRequest {
    sessionId: number;
    contentId: number;
}

export interface GetGeneralSessionsTechthonContentIdListRequest {
    sessionId: number;
}

export interface GetGeneralSessionsTechthonContentListRequest {
    sessionId: number;
}

export interface GetGeneralSessionsTechthonEnvironmentListRequest {
    sessionId: number;
    contentId: number;
}

export interface GetGeneralSessionsTechthonHintRequest {
    sessionId: number;
    contentId: number;
    testCaseId: number;
    hintId: number;
}

export interface GetGeneralSessionsTechthonHintStatusRequest {
    sessionId: number;
    contentId: number;
    testCaseId: number;
}

export interface GetGeneralSessionsTechthonServerInfoRequest {
    sessionId: number;
}

export interface GetGeneralTechthonSessionPortfolioRequest {
    sessionId: number;
}

export interface GetTechthonParticipantListRequest {
    sessionId: number;
}

export interface GetTechthonRankingRequest {
    sessionId: number;
}

export interface GetTechthonSkillDataRequest {
    sessionId: number;
}

export interface InitializeGeneralSessionsTechthonServerRequest {
    sessionId: number;
}

export interface RestartGeneralSessionsTechthonServerRequest {
    sessionId: number;
}

export interface StartGeneralSessionsTechthonContentRequest {
    sessionId: number;
    contentId: number;
}

export interface UpdateTechthonSkillDataRequest {
    sessionId: number;
    techthonSkillDataIn: TechthonSkillDataIn;
}

/**
 * 
 */
export class GeneralSessionsTechthonApi extends runtime.BaseAPI {

    /**
     * 一般ユーザーテックソンセッション採点実行 - 必要権限: [GENERAL_USER] - 処理内容:     - TechthonResultを取得     - TechthonTestCaseテーブルとTechthonTestCaseRequestParamテーブルからテストケースを取得     - TechthonTestResultにデータを作成         - question_answer_result: QuestionAnswerResult.SCORING     - TechthonTestCaseResultにテストケース毎のデータを作成         - techthon_test_result_id: 上記で作成したTechthonTestResultのID         - techthon_test_case_id: 対応するテストケースのID         - techthon_test_case_judge_status: TechthonJudgeStatus.WAITING     - TechthonのジャッジシステムAPIのリクエストで送るパラメータを準備         - product_urlは以下のように作成             - http:// + 貸し出しサーバーのIPアドレス + TechthonTestCase.url_path     - TechthonのジャッジシステムAPIにリクエスト         - APIのエンドポイント:\'https://techthon.techful-api.com/api/techthon/response_check\'     - テストケースごとに減点率を考慮したスコアを算出         - message == \"Wrong Answer\"の場合、以下のスコアを1/4倍にする             - middleware os network security application         - 減点率は解放されたヒントの内、最大のものを使い各スコアを算出             - ex: userのmiddlwwareの得点 = middlwwareのスコア * 最大の減点率             - 各スコアは四捨五入でint型に         - 各スコアの合計を算出         - TechthonTestCaseResultにジャッジ結果を書き込む     - TechthonTestResultに合計スコアを書き込む     - 過去の結果と比較して今回が最高得点だった場合、TechthonResultを更新する     - 採点結果をフロントに返す - 例外処理:     - 以下の場合NotFound:         - content_idが存在しない・削除済み問題・非公開の問題・コンテンツ区分がテックソンでない         - 削除済みセッション・Techthonセッションではない         - セッション参加者ではない一般ユーザーがセッション問題を閲覧     - 以下の場合QuestionAnswerNotStarted         - TechthonResultにレコードが存在しない - 補足     - Wrong Answerの場合ジャッジ側で1/4倍するべきだが、total_sumしか1/4倍されていないため各スコアの1/4倍処理を加えている     - body_paramに追加するvalueに\"True\" or \"False\"という文字列があった場合、それはbool型に変換する     - body_paramに追加する値には以下のようにvalueがさらにdictになっている場合がある         - {             items: [                 {                     \"id\": 4001,                     \"name\": \"item1\",                     \"price\": 80,                     \"on_sale\": True,                     \"count\": 1000                 },                 {                     \"id\": 4002,                     \"name\": \"item2\",                     \"price\": 100,                     \"on_sale\": True,                     \"count\": 1500                 }             ]         }
     * 一般ユーザーテックソンセッション採点実行
     */
    async executeGeneralSessionsTechthonContentRaw(requestParameters: ExecuteGeneralSessionsTechthonContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExecuteTechthonContentOut>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling executeGeneralSessionsTechthonContent.');
        }

        if (requestParameters.contentId === null || requestParameters.contentId === undefined) {
            throw new runtime.RequiredError('contentId','Required parameter requestParameters.contentId was null or undefined when calling executeGeneralSessionsTechthonContent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/sessions-techthon/{session_id}/contents/{content_id}/execute`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))).replace(`{${"content_id"}}`, encodeURIComponent(String(requestParameters.contentId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExecuteTechthonContentOutFromJSON(jsonValue));
    }

    /**
     * 一般ユーザーテックソンセッション採点実行 - 必要権限: [GENERAL_USER] - 処理内容:     - TechthonResultを取得     - TechthonTestCaseテーブルとTechthonTestCaseRequestParamテーブルからテストケースを取得     - TechthonTestResultにデータを作成         - question_answer_result: QuestionAnswerResult.SCORING     - TechthonTestCaseResultにテストケース毎のデータを作成         - techthon_test_result_id: 上記で作成したTechthonTestResultのID         - techthon_test_case_id: 対応するテストケースのID         - techthon_test_case_judge_status: TechthonJudgeStatus.WAITING     - TechthonのジャッジシステムAPIのリクエストで送るパラメータを準備         - product_urlは以下のように作成             - http:// + 貸し出しサーバーのIPアドレス + TechthonTestCase.url_path     - TechthonのジャッジシステムAPIにリクエスト         - APIのエンドポイント:\'https://techthon.techful-api.com/api/techthon/response_check\'     - テストケースごとに減点率を考慮したスコアを算出         - message == \"Wrong Answer\"の場合、以下のスコアを1/4倍にする             - middleware os network security application         - 減点率は解放されたヒントの内、最大のものを使い各スコアを算出             - ex: userのmiddlwwareの得点 = middlwwareのスコア * 最大の減点率             - 各スコアは四捨五入でint型に         - 各スコアの合計を算出         - TechthonTestCaseResultにジャッジ結果を書き込む     - TechthonTestResultに合計スコアを書き込む     - 過去の結果と比較して今回が最高得点だった場合、TechthonResultを更新する     - 採点結果をフロントに返す - 例外処理:     - 以下の場合NotFound:         - content_idが存在しない・削除済み問題・非公開の問題・コンテンツ区分がテックソンでない         - 削除済みセッション・Techthonセッションではない         - セッション参加者ではない一般ユーザーがセッション問題を閲覧     - 以下の場合QuestionAnswerNotStarted         - TechthonResultにレコードが存在しない - 補足     - Wrong Answerの場合ジャッジ側で1/4倍するべきだが、total_sumしか1/4倍されていないため各スコアの1/4倍処理を加えている     - body_paramに追加するvalueに\"True\" or \"False\"という文字列があった場合、それはbool型に変換する     - body_paramに追加する値には以下のようにvalueがさらにdictになっている場合がある         - {             items: [                 {                     \"id\": 4001,                     \"name\": \"item1\",                     \"price\": 80,                     \"on_sale\": True,                     \"count\": 1000                 },                 {                     \"id\": 4002,                     \"name\": \"item2\",                     \"price\": 100,                     \"on_sale\": True,                     \"count\": 1500                 }             ]         }
     * 一般ユーザーテックソンセッション採点実行
     */
    async executeGeneralSessionsTechthonContent(requestParameters: ExecuteGeneralSessionsTechthonContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExecuteTechthonContentOut> {
        const response = await this.executeGeneralSessionsTechthonContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 一般ユーザーテックソン自動環境構築実行 - 必要権限: [GENERAL_USER] - 処理内容:     - 環境IDとトピックIDからTechthonEnvironmentRelation.idを特定しTechthonTeamに書き込む     - 環境IDからテンプレート名を取得     - 自動環境構築を実行するGCPリソースにテンプレート名とともにリクエスト #TODO: リソース決定したら修正     - レスポンスとして返ってきたサーバー情報をもとにTechthonTeamを更新する - 実行条件:     - SessionUserであること     - Event.is_deleted = False     - Session.is_deleted = False     - テックソンセッションであること(TechthonSessionに該当レコードがあること)     - セッションが開催中であること     - TechthonTeam.techthon_environment_relation_id=NULLであること - 例外処理:     - 以下の場合NotFound:         - 対象セッションではない         - 削除済みセッション         - Techthonセッションではない         - セッションに登録されている問題ではない         - セッションID・コンテンツID・トピックID・環境IDが存在しない         - セッション参加者ではない一般ユーザーが実行     - 以下の場合CannotBeExecutedConditionsNotSatisfied:         - 開催期間内でない         - 既に自動環境構築を実行済み     - 以下の場合InternalServerError:         - 自動環境構築に失敗 - 補足     - 自動環境構築を実行できるのは1チーム1回まで
     * 一般ユーザーテックソン自動環境構築実行
     */
    async executeGeneralSessionsTechthonEnvironmentRaw(requestParameters: ExecuteGeneralSessionsTechthonEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TechthonServerInfoOut>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling executeGeneralSessionsTechthonEnvironment.');
        }

        if (requestParameters.contentId === null || requestParameters.contentId === undefined) {
            throw new runtime.RequiredError('contentId','Required parameter requestParameters.contentId was null or undefined when calling executeGeneralSessionsTechthonEnvironment.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling executeGeneralSessionsTechthonEnvironment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/sessions-techthon/{session_id}/contents/{content_id}/environments/{environment_id}`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))).replace(`{${"content_id"}}`, encodeURIComponent(String(requestParameters.contentId))).replace(`{${"environment_id"}}`, encodeURIComponent(String(requestParameters.environmentId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TechthonServerInfoOutFromJSON(jsonValue));
    }

    /**
     * 一般ユーザーテックソン自動環境構築実行 - 必要権限: [GENERAL_USER] - 処理内容:     - 環境IDとトピックIDからTechthonEnvironmentRelation.idを特定しTechthonTeamに書き込む     - 環境IDからテンプレート名を取得     - 自動環境構築を実行するGCPリソースにテンプレート名とともにリクエスト #TODO: リソース決定したら修正     - レスポンスとして返ってきたサーバー情報をもとにTechthonTeamを更新する - 実行条件:     - SessionUserであること     - Event.is_deleted = False     - Session.is_deleted = False     - テックソンセッションであること(TechthonSessionに該当レコードがあること)     - セッションが開催中であること     - TechthonTeam.techthon_environment_relation_id=NULLであること - 例外処理:     - 以下の場合NotFound:         - 対象セッションではない         - 削除済みセッション         - Techthonセッションではない         - セッションに登録されている問題ではない         - セッションID・コンテンツID・トピックID・環境IDが存在しない         - セッション参加者ではない一般ユーザーが実行     - 以下の場合CannotBeExecutedConditionsNotSatisfied:         - 開催期間内でない         - 既に自動環境構築を実行済み     - 以下の場合InternalServerError:         - 自動環境構築に失敗 - 補足     - 自動環境構築を実行できるのは1チーム1回まで
     * 一般ユーザーテックソン自動環境構築実行
     */
    async executeGeneralSessionsTechthonEnvironment(requestParameters: ExecuteGeneralSessionsTechthonEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TechthonServerInfoOut> {
        const response = await this.executeGeneralSessionsTechthonEnvironmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 一般ユーザーテックソン問題詳細取得 - 必要権限: [GENERAL_USER] - 処理内容:     - Techthonテーブルから問題概要とミッション番号を取得     - 対象問題に紐づくテストケースを全て取得     - TechthonTestCaseResultから結果を取得         - techthon_test_case_id         - response_code         - response_message         - score     - テストケースに紐づくヒントを取得         - 解放されているヒントのみ本文を返す - 実行条件:     - Content.content_type = ContentType.TECHTHON(テックソン)     - Content.is_official = True     - Content.is_published = True     - Content.is_deleted = False     - SessionUserであること     - Event.is_deleted = False     - Session.is_deleted = False     - テックソンセッションであること(TechthonSessionに該当レコードがあること)     - SessionContentに含まれているもの - 例外処理:     - 以下の場合NotFound:         - 削除済み問題         - 対象セッションの問題ではない         - 削除済みセッション         - Techthonセッションではない         - セッション参加者ではない一般ユーザーがセッション問題を閲覧 - 補足     - スキーマのTechthonTestCaseOutにあるtypeはDBには存在しません     - typeには\"リクエスト\"という文字列を直接代入するなどの処理で対応してください     - 採点を一度も行なっていない場合TechthonTestCaseResultにはレコードはありません
     * 一般ユーザーテックソン問題詳細取得
     */
    async getGeneralSessionsTechthonContentRaw(requestParameters: GetGeneralSessionsTechthonContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSchemasGeneralSessionsTechthonGeneralSessionsTechthonContentOutTechthonContentDetailOut>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getGeneralSessionsTechthonContent.');
        }

        if (requestParameters.contentId === null || requestParameters.contentId === undefined) {
            throw new runtime.RequiredError('contentId','Required parameter requestParameters.contentId was null or undefined when calling getGeneralSessionsTechthonContent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/sessions-techthon/{session_id}/contents/{content_id}`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))).replace(`{${"content_id"}}`, encodeURIComponent(String(requestParameters.contentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppSchemasGeneralSessionsTechthonGeneralSessionsTechthonContentOutTechthonContentDetailOutFromJSON(jsonValue));
    }

    /**
     * 一般ユーザーテックソン問題詳細取得 - 必要権限: [GENERAL_USER] - 処理内容:     - Techthonテーブルから問題概要とミッション番号を取得     - 対象問題に紐づくテストケースを全て取得     - TechthonTestCaseResultから結果を取得         - techthon_test_case_id         - response_code         - response_message         - score     - テストケースに紐づくヒントを取得         - 解放されているヒントのみ本文を返す - 実行条件:     - Content.content_type = ContentType.TECHTHON(テックソン)     - Content.is_official = True     - Content.is_published = True     - Content.is_deleted = False     - SessionUserであること     - Event.is_deleted = False     - Session.is_deleted = False     - テックソンセッションであること(TechthonSessionに該当レコードがあること)     - SessionContentに含まれているもの - 例外処理:     - 以下の場合NotFound:         - 削除済み問題         - 対象セッションの問題ではない         - 削除済みセッション         - Techthonセッションではない         - セッション参加者ではない一般ユーザーがセッション問題を閲覧 - 補足     - スキーマのTechthonTestCaseOutにあるtypeはDBには存在しません     - typeには\"リクエスト\"という文字列を直接代入するなどの処理で対応してください     - 採点を一度も行なっていない場合TechthonTestCaseResultにはレコードはありません
     * 一般ユーザーテックソン問題詳細取得
     */
    async getGeneralSessionsTechthonContent(requestParameters: GetGeneralSessionsTechthonContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSchemasGeneralSessionsTechthonGeneralSessionsTechthonContentOutTechthonContentDetailOut> {
        const response = await this.getGeneralSessionsTechthonContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 一般ユーザーテックソンセッションに登録されているコンテンツIDリスト取得 - 必要権限: [GENERAL_USER] - 処理内容:     - SessionContentから対象セッションに紐づくコンテンツIDを取得 - 例外処理:     - 以下の場合NotFound:         - Techthonセッションではない(TechthonSessionに対象セッションIDが存在しない)         - セッション参加者ではない一般ユーザーがセッション問題を閲覧 - 補足     - テックソンセッションにおける詳細画面でのミッションタブを表示するためにこちらを使用
     * 一般ユーザーテックソンセッションに登録されているコンテンツIDリスト取得
     */
    async getGeneralSessionsTechthonContentIdListRaw(requestParameters: GetGeneralSessionsTechthonContentIdListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TechthonContentIdOut>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getGeneralSessionsTechthonContentIdList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/sessions-techthon/{session_id}/contents/content-id-list`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TechthonContentIdOutFromJSON(jsonValue));
    }

    /**
     * 一般ユーザーテックソンセッションに登録されているコンテンツIDリスト取得 - 必要権限: [GENERAL_USER] - 処理内容:     - SessionContentから対象セッションに紐づくコンテンツIDを取得 - 例外処理:     - 以下の場合NotFound:         - Techthonセッションではない(TechthonSessionに対象セッションIDが存在しない)         - セッション参加者ではない一般ユーザーがセッション問題を閲覧 - 補足     - テックソンセッションにおける詳細画面でのミッションタブを表示するためにこちらを使用
     * 一般ユーザーテックソンセッションに登録されているコンテンツIDリスト取得
     */
    async getGeneralSessionsTechthonContentIdList(requestParameters: GetGeneralSessionsTechthonContentIdListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TechthonContentIdOut> {
        const response = await this.getGeneralSessionsTechthonContentIdListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 一般ユーザー用テックションセッションコンテンツ一覧取得 - 必要権限: [GENERAL_USER] - 並び順: order昇順 - 処理内容:     - セッションに登録されている問題情報を取得 - 例外処理:     -session_idのセッションが削除済み、存在しない場合、Techthonセッションでない場合NotFound - 対象テーブル     - TechthonSession     - SessionContent     - Content     - ContentTopic     - ContentCategory     - Techthon
     * 一般ユーザー用テックソンセッションコンテンツ一覧取得
     */
    async getGeneralSessionsTechthonContentListRaw(requestParameters: GetGeneralSessionsTechthonContentListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SessionsTechthonContentListOut>>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getGeneralSessionsTechthonContentList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/sessions-techthon/{session_id}/contents`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SessionsTechthonContentListOutFromJSON));
    }

    /**
     * 一般ユーザー用テックションセッションコンテンツ一覧取得 - 必要権限: [GENERAL_USER] - 並び順: order昇順 - 処理内容:     - セッションに登録されている問題情報を取得 - 例外処理:     -session_idのセッションが削除済み、存在しない場合、Techthonセッションでない場合NotFound - 対象テーブル     - TechthonSession     - SessionContent     - Content     - ContentTopic     - ContentCategory     - Techthon
     * 一般ユーザー用テックソンセッションコンテンツ一覧取得
     */
    async getGeneralSessionsTechthonContentList(requestParameters: GetGeneralSessionsTechthonContentListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SessionsTechthonContentListOut>> {
        const response = await this.getGeneralSessionsTechthonContentListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 一般ユーザー用テックソンセッション自動環境構築一覧取得 - 必要権限: [GENERAL_USER] - 並び順: idの昇順 - 処理内容:     - 対象のテックソン問題のトピックに紐づく自動環境構築一覧を取得 - 対象テーブル     - Session     - SessionContent     - TechthonSession     - Content     - ContentTopic     - TechthonEnvironment     - TechthonEnvironmentRelation - 抽出条件:     - Session.is_deleted = False     - Content.content_type = ContentType.TECHTHON     - Content.is_official = True     - Content.is_deleted = False     - TechthonEnvironment.is_deleted = False     - TechthonEnvironmentRelation.is_default = False - 例外処理:     - 以下の場合NotFound         - 対象セッションが削除済み、Techthonセッションでない         - 対象問題が削除済みの場合         - 対象問題がテックソン問題でない         - セッションID・コンテンツIDが存在しない場合
     * 一般ユーザー用テックソンセッション自動環境構築一覧取得
     */
    async getGeneralSessionsTechthonEnvironmentListRaw(requestParameters: GetGeneralSessionsTechthonEnvironmentListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SessionsTechthonEnvironmentListOut>>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getGeneralSessionsTechthonEnvironmentList.');
        }

        if (requestParameters.contentId === null || requestParameters.contentId === undefined) {
            throw new runtime.RequiredError('contentId','Required parameter requestParameters.contentId was null or undefined when calling getGeneralSessionsTechthonEnvironmentList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/sessions-techthon/{session_id}/contents/{content_id}/environments`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))).replace(`{${"content_id"}}`, encodeURIComponent(String(requestParameters.contentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SessionsTechthonEnvironmentListOutFromJSON));
    }

    /**
     * 一般ユーザー用テックソンセッション自動環境構築一覧取得 - 必要権限: [GENERAL_USER] - 並び順: idの昇順 - 処理内容:     - 対象のテックソン問題のトピックに紐づく自動環境構築一覧を取得 - 対象テーブル     - Session     - SessionContent     - TechthonSession     - Content     - ContentTopic     - TechthonEnvironment     - TechthonEnvironmentRelation - 抽出条件:     - Session.is_deleted = False     - Content.content_type = ContentType.TECHTHON     - Content.is_official = True     - Content.is_deleted = False     - TechthonEnvironment.is_deleted = False     - TechthonEnvironmentRelation.is_default = False - 例外処理:     - 以下の場合NotFound         - 対象セッションが削除済み、Techthonセッションでない         - 対象問題が削除済みの場合         - 対象問題がテックソン問題でない         - セッションID・コンテンツIDが存在しない場合
     * 一般ユーザー用テックソンセッション自動環境構築一覧取得
     */
    async getGeneralSessionsTechthonEnvironmentList(requestParameters: GetGeneralSessionsTechthonEnvironmentListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SessionsTechthonEnvironmentListOut>> {
        const response = await this.getGeneralSessionsTechthonEnvironmentListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 一般ユーザーテックソンヒント詳細取得 - 必要権限: [GENERAL_USER] - 処理内容:     - hint_idからヒント内容を取得 - 実行条件:     - Content.content_type = ContentType.TECHTHON(テックソン)     - Content.is_official = True     - Content.is_published = True     - Content.is_deleted = False     - SessionUserであること     - Event.is_deleted = False     - Session.is_deleted = False     - テックソンセッションであること(TechthonSessionに該当レコードがあること)     - SessionContentに含まれているもの     - TechthonTestCaseHint.is_deleted = False - 例外処理:     - 以下の場合NotFound:         - セッションID・コンテンツID・テストケースID・ヒントIDが存在しない         - 取得できるヒントが存在しない場合         - 削除済み問題・非公開の問題・テックソン問題でない         - 対象セッションの問題ではない         - 削除済みセッション         - Techthonセッションではない         - セッション参加者ではない一般ユーザーがセッション問題を閲覧
     * 一般ユーザーテックソンヒント詳細取得
     */
    async getGeneralSessionsTechthonHintRaw(requestParameters: GetGeneralSessionsTechthonHintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TechthonHintOut>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getGeneralSessionsTechthonHint.');
        }

        if (requestParameters.contentId === null || requestParameters.contentId === undefined) {
            throw new runtime.RequiredError('contentId','Required parameter requestParameters.contentId was null or undefined when calling getGeneralSessionsTechthonHint.');
        }

        if (requestParameters.testCaseId === null || requestParameters.testCaseId === undefined) {
            throw new runtime.RequiredError('testCaseId','Required parameter requestParameters.testCaseId was null or undefined when calling getGeneralSessionsTechthonHint.');
        }

        if (requestParameters.hintId === null || requestParameters.hintId === undefined) {
            throw new runtime.RequiredError('hintId','Required parameter requestParameters.hintId was null or undefined when calling getGeneralSessionsTechthonHint.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/sessions-techthon/{session_id}/contents/{content_id}/test-cases/{test_case_id}/hints/{hint_id}`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))).replace(`{${"content_id"}}`, encodeURIComponent(String(requestParameters.contentId))).replace(`{${"test_case_id"}}`, encodeURIComponent(String(requestParameters.testCaseId))).replace(`{${"hint_id"}}`, encodeURIComponent(String(requestParameters.hintId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TechthonHintOutFromJSON(jsonValue));
    }

    /**
     * 一般ユーザーテックソンヒント詳細取得 - 必要権限: [GENERAL_USER] - 処理内容:     - hint_idからヒント内容を取得 - 実行条件:     - Content.content_type = ContentType.TECHTHON(テックソン)     - Content.is_official = True     - Content.is_published = True     - Content.is_deleted = False     - SessionUserであること     - Event.is_deleted = False     - Session.is_deleted = False     - テックソンセッションであること(TechthonSessionに該当レコードがあること)     - SessionContentに含まれているもの     - TechthonTestCaseHint.is_deleted = False - 例外処理:     - 以下の場合NotFound:         - セッションID・コンテンツID・テストケースID・ヒントIDが存在しない         - 取得できるヒントが存在しない場合         - 削除済み問題・非公開の問題・テックソン問題でない         - 対象セッションの問題ではない         - 削除済みセッション         - Techthonセッションではない         - セッション参加者ではない一般ユーザーがセッション問題を閲覧
     * 一般ユーザーテックソンヒント詳細取得
     */
    async getGeneralSessionsTechthonHint(requestParameters: GetGeneralSessionsTechthonHintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TechthonHintOut> {
        const response = await this.getGeneralSessionsTechthonHintRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 一般ユーザーテックソンテストケースに紐づくヒントの解放状況取得 - 必要権限: [GENERAL_USER] - 処理内容:     - チームIDとテストケースIDからテストケースに紐づく各ヒントの解放状況を取得         - チームIDはuser_idから特定 - レスポンス     - 解放しているヒントはTrue・解放していないヒントはFalseで返す - 実行条件:     - Content.content_type = ContentType.TECHTHON(テックソン)     - Content.is_official = True     - Content.is_published = True     - Content.is_deleted = False     - SessionUserであること     - Event.is_deleted = False     - Session.is_deleted = False     - テックソンセッションであること(TechthonSessionに該当レコードがあること)     - SessionContentに含まれているもの     - TechthonTestCaseHint.is_deleted = False - 例外処理:     - 以下の場合NotFound:         - セッションID・コンテンツID・テストケースIDが存在しない         - 削除済み問題・非公開の問題・テックソン問題でない         - 対象セッションの問題ではない         - 削除済みセッション         - Techthonセッションではない         - セッション参加者ではない一般ユーザーがセッション問題を閲覧
     * 一般ユーザーテックソンヒント解放状況取得
     */
    async getGeneralSessionsTechthonHintStatusRaw(requestParameters: GetGeneralSessionsTechthonHintStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TechthonTestCaseHintStatusOut>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getGeneralSessionsTechthonHintStatus.');
        }

        if (requestParameters.contentId === null || requestParameters.contentId === undefined) {
            throw new runtime.RequiredError('contentId','Required parameter requestParameters.contentId was null or undefined when calling getGeneralSessionsTechthonHintStatus.');
        }

        if (requestParameters.testCaseId === null || requestParameters.testCaseId === undefined) {
            throw new runtime.RequiredError('testCaseId','Required parameter requestParameters.testCaseId was null or undefined when calling getGeneralSessionsTechthonHintStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/sessions-techthon/{session_id}/contents/{content_id}/hint-status/{test_case_id}`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))).replace(`{${"content_id"}}`, encodeURIComponent(String(requestParameters.contentId))).replace(`{${"test_case_id"}}`, encodeURIComponent(String(requestParameters.testCaseId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TechthonTestCaseHintStatusOutFromJSON(jsonValue));
    }

    /**
     * 一般ユーザーテックソンテストケースに紐づくヒントの解放状況取得 - 必要権限: [GENERAL_USER] - 処理内容:     - チームIDとテストケースIDからテストケースに紐づく各ヒントの解放状況を取得         - チームIDはuser_idから特定 - レスポンス     - 解放しているヒントはTrue・解放していないヒントはFalseで返す - 実行条件:     - Content.content_type = ContentType.TECHTHON(テックソン)     - Content.is_official = True     - Content.is_published = True     - Content.is_deleted = False     - SessionUserであること     - Event.is_deleted = False     - Session.is_deleted = False     - テックソンセッションであること(TechthonSessionに該当レコードがあること)     - SessionContentに含まれているもの     - TechthonTestCaseHint.is_deleted = False - 例外処理:     - 以下の場合NotFound:         - セッションID・コンテンツID・テストケースIDが存在しない         - 削除済み問題・非公開の問題・テックソン問題でない         - 対象セッションの問題ではない         - 削除済みセッション         - Techthonセッションではない         - セッション参加者ではない一般ユーザーがセッション問題を閲覧
     * 一般ユーザーテックソンヒント解放状況取得
     */
    async getGeneralSessionsTechthonHintStatus(requestParameters: GetGeneralSessionsTechthonHintStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TechthonTestCaseHintStatusOut> {
        const response = await this.getGeneralSessionsTechthonHintStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 一般ユーザーがテックソンセッションでログインするサーバー情報取得 - 必要権限: [GENERAL_USER] - 処理内容:     - TechthonTeamテーブルからIPアドレス・サーバーID・パスワードを取得         - TechthonTeamMemberテーブルのuser_idでチームIDを特定         - TechthonTeamテーブルのチームIDからサーバー情報を特定 - 実行条件:     - SessionUserであること     - Event.is_deleted = False     - Session.is_deleted = False     - テックソンセッションであること(TechthonSessionに該当レコードがあること) - 例外処理:     - 以下の場合NotFound:         - 対象セッションではない         - 削除済みセッション         - Techthonセッションではない         - セッション参加者ではない一般ユーザーがセッション問題を閲覧 - 補足     - TechthonTeamテーブルではサーバーIDとなっているが、これが貸し出すサーバーのログインユーザーID
     * 一般ユーザーがテックソンセッションでログインするサーバー情報取得
     */
    async getGeneralSessionsTechthonServerInfoRaw(requestParameters: GetGeneralSessionsTechthonServerInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TechthonServerInfoOut>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getGeneralSessionsTechthonServerInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/sessions-techthon/{session_id}/server/info`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TechthonServerInfoOutFromJSON(jsonValue));
    }

    /**
     * 一般ユーザーがテックソンセッションでログインするサーバー情報取得 - 必要権限: [GENERAL_USER] - 処理内容:     - TechthonTeamテーブルからIPアドレス・サーバーID・パスワードを取得         - TechthonTeamMemberテーブルのuser_idでチームIDを特定         - TechthonTeamテーブルのチームIDからサーバー情報を特定 - 実行条件:     - SessionUserであること     - Event.is_deleted = False     - Session.is_deleted = False     - テックソンセッションであること(TechthonSessionに該当レコードがあること) - 例外処理:     - 以下の場合NotFound:         - 対象セッションではない         - 削除済みセッション         - Techthonセッションではない         - セッション参加者ではない一般ユーザーがセッション問題を閲覧 - 補足     - TechthonTeamテーブルではサーバーIDとなっているが、これが貸し出すサーバーのログインユーザーID
     * 一般ユーザーがテックソンセッションでログインするサーバー情報取得
     */
    async getGeneralSessionsTechthonServerInfo(requestParameters: GetGeneralSessionsTechthonServerInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TechthonServerInfoOut> {
        const response = await this.getGeneralSessionsTechthonServerInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Techthonポートフォリオ情報取得 - 必要権限: [GENERAL_USER] - 処理内容:     - TechthonSkillSheetを特定し各データを取得     - User.usernameとUserCommonInfo.display_nameを取得     - チーム戦ならTechtonTeam.team_nameを取得     - session_idとuser.idからTechthonResultを取得し、各socreの合計を求め,取得     - 取得したTechthonResultに紐づくTechthonTestCaseから角scoreの最大値を求め,取得 - 実行条件:     - SessionUserであること     - Event.is_deleted = False     - Session.is_deleted = False     - テックソンセッションであること(TechthonSessionに該当レコードがあること) - 例外処理:     - 以下の場合NotFound:         - 対象セッションではない         - 削除済みセッション         - Techthonセッションではない         - セッション参加者ではない一般ユーザーがセッション問題を閲覧
     * Techthonポートフォリオ情報取得
     */
    async getGeneralTechthonSessionPortfolioRaw(requestParameters: GetGeneralTechthonSessionPortfolioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSchemasGeneralSessionsTechthonTechthonPortfolioOutTechthonPortfolioOut>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getGeneralTechthonSessionPortfolio.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/sessions-techthon/{session_id}/portfolio`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppSchemasGeneralSessionsTechthonTechthonPortfolioOutTechthonPortfolioOutFromJSON(jsonValue));
    }

    /**
     * Techthonポートフォリオ情報取得 - 必要権限: [GENERAL_USER] - 処理内容:     - TechthonSkillSheetを特定し各データを取得     - User.usernameとUserCommonInfo.display_nameを取得     - チーム戦ならTechtonTeam.team_nameを取得     - session_idとuser.idからTechthonResultを取得し、各socreの合計を求め,取得     - 取得したTechthonResultに紐づくTechthonTestCaseから角scoreの最大値を求め,取得 - 実行条件:     - SessionUserであること     - Event.is_deleted = False     - Session.is_deleted = False     - テックソンセッションであること(TechthonSessionに該当レコードがあること) - 例外処理:     - 以下の場合NotFound:         - 対象セッションではない         - 削除済みセッション         - Techthonセッションではない         - セッション参加者ではない一般ユーザーがセッション問題を閲覧
     * Techthonポートフォリオ情報取得
     */
    async getGeneralTechthonSessionPortfolio(requestParameters: GetGeneralTechthonSessionPortfolioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSchemasGeneralSessionsTechthonTechthonPortfolioOutTechthonPortfolioOut> {
        const response = await this.getGeneralTechthonSessionPortfolioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Techthon参加者取得 - 必要権限: [GENERAL_USER] - 処理内容:     - session_idからSessionUserを取得する         - TechthonParticipantListOut.icon = UserCommonInfo.icon         - TechthonParticipantListOut.username = UserCommonInfo.display_name         - TechthonParticipantListOut.registration_date = SessionUser.created_at         - TechthonSession.is_teamed が Trueなら             - TechthonParticipantListOut.team_name = TechthonTeam.team_name             - もしTechthonTeamに所属していないなら \"チーム未登録\" と返す         - Falseなら             - TechthonParticipantListOut.team_name = None - 実行条件:     - SessionUserであること     - Event.is_deleted = False     - Session.is_deleted = False     - テックソンセッションであること(TechthonSessionに該当レコードがあること) - 並び順:     SessionUser.created_atの降順 - 例外処理:     - 以下の場合NotFound:         - 以下の場合NotFound:         - Sessionが存在しない         - SessionUserではない         - Eventが削除済み         - Sessionが削除済み         - テックソンセッションではない - 補足:     - 削除済みのUserは取得しない
     * Techthon参加者取得
     */
    async getTechthonParticipantListRaw(requestParameters: GetTechthonParticipantListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TechthonParticipantListOut>>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getTechthonParticipantList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/sessions-techthon/{session_id}/participant`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TechthonParticipantListOutFromJSON));
    }

    /**
     * Techthon参加者取得 - 必要権限: [GENERAL_USER] - 処理内容:     - session_idからSessionUserを取得する         - TechthonParticipantListOut.icon = UserCommonInfo.icon         - TechthonParticipantListOut.username = UserCommonInfo.display_name         - TechthonParticipantListOut.registration_date = SessionUser.created_at         - TechthonSession.is_teamed が Trueなら             - TechthonParticipantListOut.team_name = TechthonTeam.team_name             - もしTechthonTeamに所属していないなら \"チーム未登録\" と返す         - Falseなら             - TechthonParticipantListOut.team_name = None - 実行条件:     - SessionUserであること     - Event.is_deleted = False     - Session.is_deleted = False     - テックソンセッションであること(TechthonSessionに該当レコードがあること) - 並び順:     SessionUser.created_atの降順 - 例外処理:     - 以下の場合NotFound:         - 以下の場合NotFound:         - Sessionが存在しない         - SessionUserではない         - Eventが削除済み         - Sessionが削除済み         - テックソンセッションではない - 補足:     - 削除済みのUserは取得しない
     * Techthon参加者取得
     */
    async getTechthonParticipantList(requestParameters: GetTechthonParticipantListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TechthonParticipantListOut>> {
        const response = await this.getTechthonParticipantListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Techthonランキング取得 - 必要権限: [GENERAL_USER] - 処理内容:     - TechthonTeam毎に以下を取得         - TechthonResult.total_scoreの合計         - チーム戦なら             - TechthonTeam.team_name         - チーム戦でないなら             - UserCommonInfo.display_name         - 順位(連番) - 実行条件:     - SessionUserであること     - Event.is_deleted = False     - Session.is_deleted = False     - テックソンセッションであること(TechthonSessionに該当レコードがあること) - 例外処理:     - 以下の場合NotFound:         - 対象セッションではない         - 削除済みセッション         - Techthonセッションではない         - セッション参加者ではない一般ユーザーがセッション問題を閲覧 - 並び順     - scoreの昇順     - TechthonResult.updated_atの昇順
     * Techthonランキング取得
     */
    async getTechthonRankingRaw(requestParameters: GetTechthonRankingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AppSchemasGeneralSessionsTechthonTechthonRankingOutTechthonRankingOut>>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getTechthonRanking.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/sessions-techthon/{session_id}/ranking`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AppSchemasGeneralSessionsTechthonTechthonRankingOutTechthonRankingOutFromJSON));
    }

    /**
     * Techthonランキング取得 - 必要権限: [GENERAL_USER] - 処理内容:     - TechthonTeam毎に以下を取得         - TechthonResult.total_scoreの合計         - チーム戦なら             - TechthonTeam.team_name         - チーム戦でないなら             - UserCommonInfo.display_name         - 順位(連番) - 実行条件:     - SessionUserであること     - Event.is_deleted = False     - Session.is_deleted = False     - テックソンセッションであること(TechthonSessionに該当レコードがあること) - 例外処理:     - 以下の場合NotFound:         - 対象セッションではない         - 削除済みセッション         - Techthonセッションではない         - セッション参加者ではない一般ユーザーがセッション問題を閲覧 - 並び順     - scoreの昇順     - TechthonResult.updated_atの昇順
     * Techthonランキング取得
     */
    async getTechthonRanking(requestParameters: GetTechthonRankingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AppSchemasGeneralSessionsTechthonTechthonRankingOutTechthonRankingOut>> {
        const response = await this.getTechthonRankingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Techthon利用技術取得 - 必要権限: [GENERAL_USER] - 処理内容:     - TechthonSkillSheetから各データを取得 - 実行条件:     - SessionUserであること     - Event.is_deleted = False     - Session.is_deleted = False     - テックソンセッションであること(TechthonSessionに該当レコードがあること) - 例外処理:     - 以下の場合NotFound:         - Sessionが存在しない         - SessionUserではない         - Eventが削除済み         - Sessionが削除済み         - テックソンセッションではない
     * Techthon利用技術取得
     */
    async getTechthonSkillDataRaw(requestParameters: GetTechthonSkillDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TechthonSkillDataOut>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getTechthonSkillData.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/sessions-techthon/{session_id}/skill`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TechthonSkillDataOutFromJSON(jsonValue));
    }

    /**
     * Techthon利用技術取得 - 必要権限: [GENERAL_USER] - 処理内容:     - TechthonSkillSheetから各データを取得 - 実行条件:     - SessionUserであること     - Event.is_deleted = False     - Session.is_deleted = False     - テックソンセッションであること(TechthonSessionに該当レコードがあること) - 例外処理:     - 以下の場合NotFound:         - Sessionが存在しない         - SessionUserではない         - Eventが削除済み         - Sessionが削除済み         - テックソンセッションではない
     * Techthon利用技術取得
     */
    async getTechthonSkillData(requestParameters: GetTechthonSkillDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TechthonSkillDataOut> {
        const response = await this.getTechthonSkillDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 一般ユーザーテックソンサーバー初期化実行 - 必要権限: [GENERAL_USER] - 処理内容:     - TechthonEnvironmentRelationからテンプレート名を取得         - TechthonTeam.techthon_environment_relation_id = NULLの場合             - 対象問題のトピックに紐づくTechthonEnvironmentRelation.is_default=Trueのテンプレート         - TechthonTeam.techthon_environment_relation_id != NULLの場合             - TechthonTeam.techthon_environment_relation_idのテンプレート     - サーバー初期化を実行するGCPリソースにテンプレート名とともにリクエスト #TODO: リソース決定したら修正     - レスポンスで返ってきたサーバー情報をもとにTechthonTeamを更新する - 実行条件:     - SessionUserであること     - Event.is_deleted = False     - Session.is_deleted = False     - テックソンセッションであること(TechthonSessionに該当レコードがあること)     - セッションが開催中であること - 例外処理:     - 以下の場合NotFound:         - 対象セッションではない         - 削除済みセッション         - Techthonセッションではない         - セッションに登録されている問題ではない         - セッションID・コンテンツID・トピックID・環境IDが存在しない         - セッション参加者ではない一般ユーザーが実行     - 以下の場合CannotBeExecutedConditionsNotSatisfied:         - 開催期間内でない     - 以下の場合InternalServerError:         - サーバー初期化に失敗
     * 一般ユーザーテックソンサーバー初期化実行
     */
    async initializeGeneralSessionsTechthonServerRaw(requestParameters: InitializeGeneralSessionsTechthonServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TechthonServerInfoOut>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling initializeGeneralSessionsTechthonServer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/sessions-techthon/{session_id}/server/init`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TechthonServerInfoOutFromJSON(jsonValue));
    }

    /**
     * 一般ユーザーテックソンサーバー初期化実行 - 必要権限: [GENERAL_USER] - 処理内容:     - TechthonEnvironmentRelationからテンプレート名を取得         - TechthonTeam.techthon_environment_relation_id = NULLの場合             - 対象問題のトピックに紐づくTechthonEnvironmentRelation.is_default=Trueのテンプレート         - TechthonTeam.techthon_environment_relation_id != NULLの場合             - TechthonTeam.techthon_environment_relation_idのテンプレート     - サーバー初期化を実行するGCPリソースにテンプレート名とともにリクエスト #TODO: リソース決定したら修正     - レスポンスで返ってきたサーバー情報をもとにTechthonTeamを更新する - 実行条件:     - SessionUserであること     - Event.is_deleted = False     - Session.is_deleted = False     - テックソンセッションであること(TechthonSessionに該当レコードがあること)     - セッションが開催中であること - 例外処理:     - 以下の場合NotFound:         - 対象セッションではない         - 削除済みセッション         - Techthonセッションではない         - セッションに登録されている問題ではない         - セッションID・コンテンツID・トピックID・環境IDが存在しない         - セッション参加者ではない一般ユーザーが実行     - 以下の場合CannotBeExecutedConditionsNotSatisfied:         - 開催期間内でない     - 以下の場合InternalServerError:         - サーバー初期化に失敗
     * 一般ユーザーテックソンサーバー初期化実行
     */
    async initializeGeneralSessionsTechthonServer(requestParameters: InitializeGeneralSessionsTechthonServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TechthonServerInfoOut> {
        const response = await this.initializeGeneralSessionsTechthonServerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 一般ユーザーテックソンサーバー再起動実行 - 必要権限: [GENERAL_USER] - 処理内容:     - TechthonTeamからインスタンス名を取得     - サーバー再起動を実行するGCPリソースにインスタンス名とともにリクエスト #TODO: リソース決定したら修正     - レスポンスで返ってきたサーバー情報をもとにTechthonTeamを更新する - 実行条件:     - SessionUserであること     - Event.is_deleted = False     - Session.is_deleted = False     - テックソンセッションであること(TechthonSessionに該当レコードがあること)     - セッションが開催中であること - 例外処理:     - 以下の場合NotFound:         - 対象セッションではない         - 削除済みセッション         - Techthonセッションではない         - セッションに登録されている問題ではない         - セッションID・コンテンツID・トピックID・環境IDが存在しない         - セッション参加者ではない一般ユーザーが実行     - 以下の場合CannotBeExecutedConditionsNotSatisfied:         - 開催期間内でない     - 以下の場合InternalServerError:         - サーバー再起動に失敗
     * 一般ユーザーテックソンサーバー再起動実行
     */
    async restartGeneralSessionsTechthonServerRaw(requestParameters: RestartGeneralSessionsTechthonServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TechthonServerInfoOut>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling restartGeneralSessionsTechthonServer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/sessions-techthon/{session_id}/server/restart`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TechthonServerInfoOutFromJSON(jsonValue));
    }

    /**
     * 一般ユーザーテックソンサーバー再起動実行 - 必要権限: [GENERAL_USER] - 処理内容:     - TechthonTeamからインスタンス名を取得     - サーバー再起動を実行するGCPリソースにインスタンス名とともにリクエスト #TODO: リソース決定したら修正     - レスポンスで返ってきたサーバー情報をもとにTechthonTeamを更新する - 実行条件:     - SessionUserであること     - Event.is_deleted = False     - Session.is_deleted = False     - テックソンセッションであること(TechthonSessionに該当レコードがあること)     - セッションが開催中であること - 例外処理:     - 以下の場合NotFound:         - 対象セッションではない         - 削除済みセッション         - Techthonセッションではない         - セッションに登録されている問題ではない         - セッションID・コンテンツID・トピックID・環境IDが存在しない         - セッション参加者ではない一般ユーザーが実行     - 以下の場合CannotBeExecutedConditionsNotSatisfied:         - 開催期間内でない     - 以下の場合InternalServerError:         - サーバー再起動に失敗
     * 一般ユーザーテックソンサーバー再起動実行
     */
    async restartGeneralSessionsTechthonServer(requestParameters: RestartGeneralSessionsTechthonServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TechthonServerInfoOut> {
        const response = await this.restartGeneralSessionsTechthonServerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 一般ユーザーテックソン問題解答開始 - 必要権限: [GENERAL_USER] - 処理内容:     - TechthonResultにデータを作成         - チームIDはuser_idから特定         - question_result_status = QuestionResultStatus.ANSWERING         - 対象のuser_idが存在する場合は作成しない - 実行条件:     - Content.content_type = ContentType.TECHTHON(テックソン)     - Content.is_official = True     - Content.is_published = True     - Content.is_deleted = False     - SessionUserであること     - Event.is_deleted = False     - Session.is_deleted = False     - テックソンセッションであること(TechthonSessionに該当レコードがあること)     - SessionContentに含まれているもの - 例外処理:     - 以下の場合NotFound:         - 削除済み問題         - 対象セッションの問題ではない         - 削除済みセッション         - Techthonセッションではない         - セッション参加者ではない一般ユーザーがセッション問題を閲覧 - 補足     - 通常問題は詳細取得と解答開始のAPIをわけているのでテックソンも同様にしている
     * 一般ユーザーテックソン問題解答開始
     */
    async startGeneralSessionsTechthonContentRaw(requestParameters: StartGeneralSessionsTechthonContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling startGeneralSessionsTechthonContent.');
        }

        if (requestParameters.contentId === null || requestParameters.contentId === undefined) {
            throw new runtime.RequiredError('contentId','Required parameter requestParameters.contentId was null or undefined when calling startGeneralSessionsTechthonContent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/sessions-techthon/{session_id}/contents/{content_id}/answer-start`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))).replace(`{${"content_id"}}`, encodeURIComponent(String(requestParameters.contentId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 一般ユーザーテックソン問題解答開始 - 必要権限: [GENERAL_USER] - 処理内容:     - TechthonResultにデータを作成         - チームIDはuser_idから特定         - question_result_status = QuestionResultStatus.ANSWERING         - 対象のuser_idが存在する場合は作成しない - 実行条件:     - Content.content_type = ContentType.TECHTHON(テックソン)     - Content.is_official = True     - Content.is_published = True     - Content.is_deleted = False     - SessionUserであること     - Event.is_deleted = False     - Session.is_deleted = False     - テックソンセッションであること(TechthonSessionに該当レコードがあること)     - SessionContentに含まれているもの - 例外処理:     - 以下の場合NotFound:         - 削除済み問題         - 対象セッションの問題ではない         - 削除済みセッション         - Techthonセッションではない         - セッション参加者ではない一般ユーザーがセッション問題を閲覧 - 補足     - 通常問題は詳細取得と解答開始のAPIをわけているのでテックソンも同様にしている
     * 一般ユーザーテックソン問題解答開始
     */
    async startGeneralSessionsTechthonContent(requestParameters: StartGeneralSessionsTechthonContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.startGeneralSessionsTechthonContentRaw(requestParameters, initOverrides);
    }

    /**
     * Techthon利用技術更新 - 必要権限: [GENERAL_USER] - 処理内容:     - session_idとuser.idからTechthonSkillSheetを特定     - TechthonSkillSheetを更新 (なければ作成) - 実行条件:     - SessionUserであること     - Event.is_deleted = False     - Session.is_deleted = False     - テックソンセッションであること(TechthonSessionに該当レコードがあること) - 例外処理:     - 以下の場合NotFound:         - Sessionが存在しない         - SessionUserではない         - Eventが削除済み         - Sessionが削除済み         - テックソンセッションではない
     * Techthon利用技術更新
     */
    async updateTechthonSkillDataRaw(requestParameters: UpdateTechthonSkillDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TechthonSkillDataOut>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling updateTechthonSkillData.');
        }

        if (requestParameters.techthonSkillDataIn === null || requestParameters.techthonSkillDataIn === undefined) {
            throw new runtime.RequiredError('techthonSkillDataIn','Required parameter requestParameters.techthonSkillDataIn was null or undefined when calling updateTechthonSkillData.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/general/sessions-techthon/{session_id}/skill`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TechthonSkillDataInToJSON(requestParameters.techthonSkillDataIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TechthonSkillDataOutFromJSON(jsonValue));
    }

    /**
     * Techthon利用技術更新 - 必要権限: [GENERAL_USER] - 処理内容:     - session_idとuser.idからTechthonSkillSheetを特定     - TechthonSkillSheetを更新 (なければ作成) - 実行条件:     - SessionUserであること     - Event.is_deleted = False     - Session.is_deleted = False     - テックソンセッションであること(TechthonSessionに該当レコードがあること) - 例外処理:     - 以下の場合NotFound:         - Sessionが存在しない         - SessionUserではない         - Eventが削除済み         - Sessionが削除済み         - テックソンセッションではない
     * Techthon利用技術更新
     */
    async updateTechthonSkillData(requestParameters: UpdateTechthonSkillDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TechthonSkillDataOut> {
        const response = await this.updateTechthonSkillDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
