/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  JudgeResultIn,
  NotifyJudgeErrorIn,
  ValidationError,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    JudgeResultInFromJSON,
    JudgeResultInToJSON,
    NotifyJudgeErrorInFromJSON,
    NotifyJudgeErrorInToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface JudgeResultRequest {
    judgeResultIn: JudgeResultIn;
}

export interface NotifyJudgeErrorRequest {
    notifyJudgeErrorIn: NotifyJudgeErrorIn;
}

/**
 * 
 */
export class JudgeApi extends runtime.BaseAPI {

    /**
     * judge結果を書き込み - judgeシステムからアクセス可能
     * judge結果書き込み
     */
    async judgeResultRaw(requestParameters: JudgeResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.judgeResultIn === null || requestParameters.judgeResultIn === undefined) {
            throw new runtime.RequiredError('judgeResultIn','Required parameter requestParameters.judgeResultIn was null or undefined when calling judgeResult.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/judge/results`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JudgeResultInToJSON(requestParameters.judgeResultIn),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * judge結果を書き込み - judgeシステムからアクセス可能
     * judge結果書き込み
     */
    async judgeResult(requestParameters: JudgeResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.judgeResultRaw(requestParameters, initOverrides);
    }

    /**
     * ユーザからバックエンドへのジャッジエラー報告 - 444 の Slack に Webhook で送信 - 指定された問題やセッションが存在しない / is_deleted==True の場合は NotFound - 「時刻」「提出id」「問題名(id)」「ユーザー名(id)」「出題場所」「window.navigator.userAgentの情報」を通知
     * ジャッジエラー報告API
     */
    async notifyJudgeErrorRaw(requestParameters: NotifyJudgeErrorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.notifyJudgeErrorIn === null || requestParameters.notifyJudgeErrorIn === undefined) {
            throw new runtime.RequiredError('notifyJudgeErrorIn','Required parameter requestParameters.notifyJudgeErrorIn was null or undefined when calling notifyJudgeError.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/judge/errors`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotifyJudgeErrorInToJSON(requestParameters.notifyJudgeErrorIn),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ユーザからバックエンドへのジャッジエラー報告 - 444 の Slack に Webhook で送信 - 指定された問題やセッションが存在しない / is_deleted==True の場合は NotFound - 「時刻」「提出id」「問題名(id)」「ユーザー名(id)」「出題場所」「window.navigator.userAgentの情報」を通知
     * ジャッジエラー報告API
     */
    async notifyJudgeError(requestParameters: NotifyJudgeErrorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notifyJudgeErrorRaw(requestParameters, initOverrides);
    }

}
