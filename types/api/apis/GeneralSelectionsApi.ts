/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  SelectionsOut,
  ValidationError,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    SelectionsOutFromJSON,
    SelectionsOutToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface GeneralGetSelectionsRequest {
    hostName?: string;
    steps?: string;
    limit?: number;
    offset?: number;
}

export interface GeneralGetSelectionsAcceptionRequest {
    selectionId: number;
}

export interface GeneralGetSelectionsRejectionRequest {
    selectionId: number;
}

/**
 * 
 */
export class GeneralSelectionsApi extends runtime.BaseAPI {

    /**
     * 選考管理一覧取得
     */
    async generalGetSelectionsRaw(requestParameters: GeneralGetSelectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SelectionsOut>> {
        const queryParameters: any = {};

        if (requestParameters.hostName !== undefined) {
            queryParameters['host_name'] = requestParameters.hostName;
        }

        if (requestParameters.steps !== undefined) {
            queryParameters['steps'] = requestParameters.steps;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/selections`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SelectionsOutFromJSON(jsonValue));
    }

    /**
     * 選考管理一覧取得
     */
    async generalGetSelections(requestParameters: GeneralGetSelectionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SelectionsOut> {
        const response = await this.generalGetSelectionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * スカウトを受諾する
     */
    async generalGetSelectionsAcceptionRaw(requestParameters: GeneralGetSelectionsAcceptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.selectionId === null || requestParameters.selectionId === undefined) {
            throw new runtime.RequiredError('selectionId','Required parameter requestParameters.selectionId was null or undefined when calling generalGetSelectionsAcception.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/selections/acception/{selection_id}`.replace(`{${"selection_id"}}`, encodeURIComponent(String(requestParameters.selectionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * スカウトを受諾する
     */
    async generalGetSelectionsAcception(requestParameters: GeneralGetSelectionsAcceptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.generalGetSelectionsAcceptionRaw(requestParameters, initOverrides);
    }

    /**
     * スカウトを辞退する
     */
    async generalGetSelectionsRejectionRaw(requestParameters: GeneralGetSelectionsRejectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.selectionId === null || requestParameters.selectionId === undefined) {
            throw new runtime.RequiredError('selectionId','Required parameter requestParameters.selectionId was null or undefined when calling generalGetSelectionsRejection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/selections/rejection/{selection_id}`.replace(`{${"selection_id"}}`, encodeURIComponent(String(requestParameters.selectionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * スカウトを辞退する
     */
    async generalGetSelectionsRejection(requestParameters: GeneralGetSelectionsRejectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.generalGetSelectionsRejectionRaw(requestParameters, initOverrides);
    }

}
