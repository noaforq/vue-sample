/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  DisplayScope,
  MeOut,
  UpdateEmailIn,
  UpdatePasswordIn,
  UserAllSubmissionsOut,
  UserCodeCheckSubmissionOut,
  UserPortFolioCodeOut,
  ValidationError,
  VerifyEmailIn,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    DisplayScopeFromJSON,
    DisplayScopeToJSON,
    MeOutFromJSON,
    MeOutToJSON,
    UpdateEmailInFromJSON,
    UpdateEmailInToJSON,
    UpdatePasswordInFromJSON,
    UpdatePasswordInToJSON,
    UserAllSubmissionsOutFromJSON,
    UserAllSubmissionsOutToJSON,
    UserCodeCheckSubmissionOutFromJSON,
    UserCodeCheckSubmissionOutToJSON,
    UserPortFolioCodeOutFromJSON,
    UserPortFolioCodeOutToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
    VerifyEmailInFromJSON,
    VerifyEmailInToJSON,
} from '../models/index';

export interface GetUserAllSubmissionListRequest {
    userId: number;
    displayScope?: DisplayScope;
    eventId?: number;
    limit?: number;
    offset?: number;
}

export interface GetUserCodeCheckSubmissionsRequest {
    userId: number;
    contentId: number;
    expiresAt?: number;
    httpMethod?: string;
    token?: string;
    sessionId?: number;
}

export interface GetUserPortfolioCodeRequest {
    userId: number;
    contentId: number;
    expiresAt?: number;
    httpMethod?: string;
    token?: string;
    sessionId?: number;
}

export interface SendVerifyEmailRequest {
    verifyEmailIn: VerifyEmailIn;
    isSubEmail?: boolean;
}

export interface UpdateEmailRequest {
    updateEmailIn: UpdateEmailIn;
}

export interface UpdatePasswordRequest {
    updatePasswordIn: UpdatePasswordIn;
}

/**
 * 
 */
export class CommonUsersApi extends runtime.BaseAPI {

    /**
     * ログインユーザー情報取得
     * ログインユーザー情報取得(仮実装)
     */
    async getMeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MeOut>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/users/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MeOutFromJSON(jsonValue));
    }

    /**
     * ログインユーザー情報取得
     * ログインユーザー情報取得(仮実装)
     */
    async getMe(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MeOut> {
        const response = await this.getMeRaw(initOverrides);
        return await response.value();
    }

    /**
     * - ユースケース     - https://docs.google.com/spreadsheets/d/1v6J6rlky2VQ0xg2yEWsBkP_sLRCg0BuMGCyf1jxixRM/edit#gid=0     - 一般ユーザー         - ポートフォリオ対象問題         - ポートフォリオQuestionResult判定条件             - https://docs.google.com/spreadsheets/d/1E0VU8yO151bZjphcOwXvsxro7YhNfb-GLtI4MbUrbBo/edit#gid=55629785     - EVENT_ALL         - 自組織主催全セッションの問題 (イベントでの提出のみ)     - EVENT         - 該当イベント内の全セッションの問題を表示 (イベントでの提出のみ)
     * ユーザー全提出履歴一覧取得
     */
    async getUserAllSubmissionListRaw(requestParameters: GetUserAllSubmissionListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserAllSubmissionsOut>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUserAllSubmissionList.');
        }

        const queryParameters: any = {};

        if (requestParameters.displayScope !== undefined) {
            queryParameters['display_scope'] = requestParameters.displayScope;
        }

        if (requestParameters.eventId !== undefined) {
            queryParameters['event_id'] = requestParameters.eventId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/users/{user_id}/question-results`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserAllSubmissionsOutFromJSON(jsonValue));
    }

    /**
     * - ユースケース     - https://docs.google.com/spreadsheets/d/1v6J6rlky2VQ0xg2yEWsBkP_sLRCg0BuMGCyf1jxixRM/edit#gid=0     - 一般ユーザー         - ポートフォリオ対象問題         - ポートフォリオQuestionResult判定条件             - https://docs.google.com/spreadsheets/d/1E0VU8yO151bZjphcOwXvsxro7YhNfb-GLtI4MbUrbBo/edit#gid=55629785     - EVENT_ALL         - 自組織主催全セッションの問題 (イベントでの提出のみ)     - EVENT         - 該当イベント内の全セッションの問題を表示 (イベントでの提出のみ)
     * ユーザー全提出履歴一覧取得
     */
    async getUserAllSubmissionList(requestParameters: GetUserAllSubmissionListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserAllSubmissionsOut> {
        const response = await this.getUserAllSubmissionListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * コード確認画面の提出物部分を取得する - 必要権限:     - 一般ユーザー: 自分のみ     - エージェント     - スキルチェック管理者: 自組織のスキルチェックイベント参加者のみ     - 学校管理者: 自組織イベント参加者のみ     - tokenでの認証 - データ取得可能条件:     - Question.question_typeが[QuestionType.SELECTION, QuestionType.BLANK]以外     - QuestionResultが存在する
     * コード確認画面の提出物部分を取得する
     */
    async getUserCodeCheckSubmissionsRaw(requestParameters: GetUserCodeCheckSubmissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserCodeCheckSubmissionOut>>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUserCodeCheckSubmissions.');
        }

        if (requestParameters.contentId === null || requestParameters.contentId === undefined) {
            throw new runtime.RequiredError('contentId','Required parameter requestParameters.contentId was null or undefined when calling getUserCodeCheckSubmissions.');
        }

        const queryParameters: any = {};

        if (requestParameters.expiresAt !== undefined) {
            queryParameters['expires_at'] = requestParameters.expiresAt;
        }

        if (requestParameters.httpMethod !== undefined) {
            queryParameters['http_method'] = requestParameters.httpMethod;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        if (requestParameters.sessionId !== undefined) {
            queryParameters['session_id'] = requestParameters.sessionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/users/{user_id}/question-results/questions/{content_id}/submissions`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"content_id"}}`, encodeURIComponent(String(requestParameters.contentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserCodeCheckSubmissionOutFromJSON));
    }

    /**
     * コード確認画面の提出物部分を取得する - 必要権限:     - 一般ユーザー: 自分のみ     - エージェント     - スキルチェック管理者: 自組織のスキルチェックイベント参加者のみ     - 学校管理者: 自組織イベント参加者のみ     - tokenでの認証 - データ取得可能条件:     - Question.question_typeが[QuestionType.SELECTION, QuestionType.BLANK]以外     - QuestionResultが存在する
     * コード確認画面の提出物部分を取得する
     */
    async getUserCodeCheckSubmissions(requestParameters: GetUserCodeCheckSubmissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserCodeCheckSubmissionOut>> {
        const response = await this.getUserCodeCheckSubmissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * コード確認を取得する - 必要権限:     - 一般ユーザー: 自分のみ     - エージェント     - スキルチェック管理者: 自組織のスキルチェックイベント参加者のみ     - 学校管理者: 自組織イベント参加者のみ     - tokenでの認証 - データ取得可能条件:     - User.is_deleted == False     - QuestionResult.user_id == user_id
     * コード確認画面の問題文部分を取得する
     */
    async getUserPortfolioCodeRaw(requestParameters: GetUserPortfolioCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserPortFolioCodeOut>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUserPortfolioCode.');
        }

        if (requestParameters.contentId === null || requestParameters.contentId === undefined) {
            throw new runtime.RequiredError('contentId','Required parameter requestParameters.contentId was null or undefined when calling getUserPortfolioCode.');
        }

        const queryParameters: any = {};

        if (requestParameters.expiresAt !== undefined) {
            queryParameters['expires_at'] = requestParameters.expiresAt;
        }

        if (requestParameters.httpMethod !== undefined) {
            queryParameters['http_method'] = requestParameters.httpMethod;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        if (requestParameters.sessionId !== undefined) {
            queryParameters['session_id'] = requestParameters.sessionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/users/{user_id}/question-results/{content_id}/code-check`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"content_id"}}`, encodeURIComponent(String(requestParameters.contentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserPortFolioCodeOutFromJSON(jsonValue));
    }

    /**
     * コード確認を取得する - 必要権限:     - 一般ユーザー: 自分のみ     - エージェント     - スキルチェック管理者: 自組織のスキルチェックイベント参加者のみ     - 学校管理者: 自組織イベント参加者のみ     - tokenでの認証 - データ取得可能条件:     - User.is_deleted == False     - QuestionResult.user_id == user_id
     * コード確認画面の問題文部分を取得する
     */
    async getUserPortfolioCode(requestParameters: GetUserPortfolioCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserPortFolioCodeOut> {
        const response = await this.getUserPortfolioCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * メールアドレス変更用のメールを送信 - メール本文にemail変更のURLを含む - メールアドレスの確認を行うためのメールを送信するAPIなので、メールアドレスの更新処理は行わない
     * ユーザーemail変更確認メール送信
     */
    async sendVerifyEmailRaw(requestParameters: SendVerifyEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.verifyEmailIn === null || requestParameters.verifyEmailIn === undefined) {
            throw new runtime.RequiredError('verifyEmailIn','Required parameter requestParameters.verifyEmailIn was null or undefined when calling sendVerifyEmail.');
        }

        const queryParameters: any = {};

        if (requestParameters.isSubEmail !== undefined) {
            queryParameters['is_sub_email'] = requestParameters.isSubEmail;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/common/users/me/email/verify`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyEmailInToJSON(requestParameters.verifyEmailIn),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * メールアドレス変更用のメールを送信 - メール本文にemail変更のURLを含む - メールアドレスの確認を行うためのメールを送信するAPIなので、メールアドレスの更新処理は行わない
     * ユーザーemail変更確認メール送信
     */
    async sendVerifyEmail(requestParameters: SendVerifyEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sendVerifyEmailRaw(requestParameters, initOverrides);
    }

    /**
     * メールアドレス更新 - ユーザー情報のemailパラメータを更新する
     * メールアドレス更新
     */
    async updateEmailRaw(requestParameters: UpdateEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.updateEmailIn === null || requestParameters.updateEmailIn === undefined) {
            throw new runtime.RequiredError('updateEmailIn','Required parameter requestParameters.updateEmailIn was null or undefined when calling updateEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/common/users/me/email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateEmailInToJSON(requestParameters.updateEmailIn),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * メールアドレス更新 - ユーザー情報のemailパラメータを更新する
     * メールアドレス更新
     */
    async updateEmail(requestParameters: UpdateEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateEmailRaw(requestParameters, initOverrides);
    }

    /**
     * パスワード更新
     * パスワード更新
     */
    async updatePasswordRaw(requestParameters: UpdatePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.updatePasswordIn === null || requestParameters.updatePasswordIn === undefined) {
            throw new runtime.RequiredError('updatePasswordIn','Required parameter requestParameters.updatePasswordIn was null or undefined when calling updatePassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/common/users/me/password`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePasswordInToJSON(requestParameters.updatePasswordIn),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * パスワード更新
     * パスワード更新
     */
    async updatePassword(requestParameters: UpdatePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updatePasswordRaw(requestParameters, initOverrides);
    }

}
