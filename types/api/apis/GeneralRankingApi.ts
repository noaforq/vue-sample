/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GeneralRankingChallengeOut,
  ValidationError,
} from '../models/index';
import {
    GeneralRankingChallengeOutFromJSON,
    GeneralRankingChallengeOutToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface GetGeneralChallengeRankingRequest {
    rankingType?: number;
}

/**
 * 
 */
export class GeneralRankingApi extends runtime.BaseAPI {

    /**
     * 一般ユーザーチャレンジ問題ランキング取得 一般ユーザーのダッシュボードに表示するランキング 集計するランキングは3種類あるが、クエリパラメータで対応 - 必要権限：[GENERAL_USER] - ランキング種類     - 総合ランキング 週間ランキング(スコア別) 週間ランキング(解答別) - レスポンス     - 該当ユーザーのランキング情報     - 集計対象となった合計ユーザー数     - top10のユーザー名と集計結果 - 処理内容     - ranking_type = 総合ランキングの場合         - QuestionResultからユーザーごとの累積スコアを集計         - 合計ユーザー数を上記結果のレコード数より算出         - 該当ユーザーの必要情報を抽出         - top10のユーザー名とスコアを抽出         - 該当ユーザーと一つ上の順位のユーザとのスコアの差分を算出     - ranking_type = 週間ランキング(スコア別)の場合         - QuestionResultからユーザごとの週間の累積スコアを集計         - 合計ユーザー数を上記結果のレコード数より算出         - 該当ユーザーの必要情報を抽出         - top10のユーザー名とスコアを抽出     - ranking_type = 週間ランキング(解答別)の場合         - QuestionResultからユーザーごとの週間の問題解答数を集計         - 合計ユーザー数を上記結果のレコード数より算出         - 該当ユーザーの必要情報を抽出         - top10のユーザー名とスコアを抽出 - 取得条件     - QuestionResult         - question_result_type: チャレンジ         - updated_at: 週間ランキングの場合その対象週         - question_result_status: 合格 (解答別の集計の場合必要)     - User         - user_type: 一般ユーザー         - is_deleted: False - 補足     - 1度もユーザーが解答していない場合         - 順位は「-位」と表示する         - スコア or 解答数は0とする         - 次の順位までのスコアは表示しない     - 該当ユーザーが1位の場合         - 次の順位までのスコアは「-pt」or「-回」と表示する     - TOP10に表示する人数         - スコアが同点のユーザーが複数いる場合、10人目の順位と同じ順位のユーザーは全て表示         - ex: 1 2 3 4 5 6 7 7 9 9 9 9         - ex: 1 2 3 4 5 6 7 8 9 10 10
     * 一般チャレンジ問題ランキング取得
     */
    async getGeneralChallengeRankingRaw(requestParameters: GetGeneralChallengeRankingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeneralRankingChallengeOut>> {
        const queryParameters: any = {};

        if (requestParameters.rankingType !== undefined) {
            queryParameters['ranking_type'] = requestParameters.rankingType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/ranking/challenge`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GeneralRankingChallengeOutFromJSON(jsonValue));
    }

    /**
     * 一般ユーザーチャレンジ問題ランキング取得 一般ユーザーのダッシュボードに表示するランキング 集計するランキングは3種類あるが、クエリパラメータで対応 - 必要権限：[GENERAL_USER] - ランキング種類     - 総合ランキング 週間ランキング(スコア別) 週間ランキング(解答別) - レスポンス     - 該当ユーザーのランキング情報     - 集計対象となった合計ユーザー数     - top10のユーザー名と集計結果 - 処理内容     - ranking_type = 総合ランキングの場合         - QuestionResultからユーザーごとの累積スコアを集計         - 合計ユーザー数を上記結果のレコード数より算出         - 該当ユーザーの必要情報を抽出         - top10のユーザー名とスコアを抽出         - 該当ユーザーと一つ上の順位のユーザとのスコアの差分を算出     - ranking_type = 週間ランキング(スコア別)の場合         - QuestionResultからユーザごとの週間の累積スコアを集計         - 合計ユーザー数を上記結果のレコード数より算出         - 該当ユーザーの必要情報を抽出         - top10のユーザー名とスコアを抽出     - ranking_type = 週間ランキング(解答別)の場合         - QuestionResultからユーザーごとの週間の問題解答数を集計         - 合計ユーザー数を上記結果のレコード数より算出         - 該当ユーザーの必要情報を抽出         - top10のユーザー名とスコアを抽出 - 取得条件     - QuestionResult         - question_result_type: チャレンジ         - updated_at: 週間ランキングの場合その対象週         - question_result_status: 合格 (解答別の集計の場合必要)     - User         - user_type: 一般ユーザー         - is_deleted: False - 補足     - 1度もユーザーが解答していない場合         - 順位は「-位」と表示する         - スコア or 解答数は0とする         - 次の順位までのスコアは表示しない     - 該当ユーザーが1位の場合         - 次の順位までのスコアは「-pt」or「-回」と表示する     - TOP10に表示する人数         - スコアが同点のユーザーが複数いる場合、10人目の順位と同じ順位のユーザーは全て表示         - ex: 1 2 3 4 5 6 7 7 9 9 9 9         - ex: 1 2 3 4 5 6 7 8 9 10 10
     * 一般チャレンジ問題ランキング取得
     */
    async getGeneralChallengeRanking(requestParameters: GetGeneralChallengeRankingRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeneralRankingChallengeOut> {
        const response = await this.getGeneralChallengeRankingRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
