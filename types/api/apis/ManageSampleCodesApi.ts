/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  SampleCodeCreateIn,
  SampleCodeDetailOut,
  SampleCodeListOut,
  SampleCodeUpdateIn,
  ValidationError,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    SampleCodeCreateInFromJSON,
    SampleCodeCreateInToJSON,
    SampleCodeDetailOutFromJSON,
    SampleCodeDetailOutToJSON,
    SampleCodeListOutFromJSON,
    SampleCodeListOutToJSON,
    SampleCodeUpdateInFromJSON,
    SampleCodeUpdateInToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface CreateSampleCodeRequest {
    sampleCodeCreateIn: SampleCodeCreateIn;
}

export interface DeleteSampleCodeRequest {
    sampleCodeId: number;
}

export interface GetSampleCodeRequest {
    sampleCodeId: number;
}

export interface UpdateSampleCodeRequest {
    sampleCodeId: number;
    sampleCodeUpdateIn: SampleCodeUpdateIn;
}

/**
 * 
 */
export class ManageSampleCodesApi extends runtime.BaseAPI {

    /**
     * サンプルコードを作成 - 必要権限: [ASSETS_EDIT]
     * サンプルコード作成
     */
    async createSampleCodeRaw(requestParameters: CreateSampleCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SampleCodeDetailOut>> {
        if (requestParameters.sampleCodeCreateIn === null || requestParameters.sampleCodeCreateIn === undefined) {
            throw new runtime.RequiredError('sampleCodeCreateIn','Required parameter requestParameters.sampleCodeCreateIn was null or undefined when calling createSampleCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/sample-codes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SampleCodeCreateInToJSON(requestParameters.sampleCodeCreateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SampleCodeDetailOutFromJSON(jsonValue));
    }

    /**
     * サンプルコードを作成 - 必要権限: [ASSETS_EDIT]
     * サンプルコード作成
     */
    async createSampleCode(requestParameters: CreateSampleCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SampleCodeDetailOut> {
        const response = await this.createSampleCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * サンプルコードを削除 - 必要権限: [ASSETS_EDIT]
     * サンプルコード削除
     */
    async deleteSampleCodeRaw(requestParameters: DeleteSampleCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sampleCodeId === null || requestParameters.sampleCodeId === undefined) {
            throw new runtime.RequiredError('sampleCodeId','Required parameter requestParameters.sampleCodeId was null or undefined when calling deleteSampleCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sample-codes/{sample_code_id}`.replace(`{${"sample_code_id"}}`, encodeURIComponent(String(requestParameters.sampleCodeId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * サンプルコードを削除 - 必要権限: [ASSETS_EDIT]
     * サンプルコード削除
     */
    async deleteSampleCode(requestParameters: DeleteSampleCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSampleCodeRaw(requestParameters, initOverrides);
    }

    /**
     * サンプルコード詳細を取得 - 必要権限: [ASSETS_EDIT]
     * サンプルコード詳細取得
     */
    async getSampleCodeRaw(requestParameters: GetSampleCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SampleCodeDetailOut>> {
        if (requestParameters.sampleCodeId === null || requestParameters.sampleCodeId === undefined) {
            throw new runtime.RequiredError('sampleCodeId','Required parameter requestParameters.sampleCodeId was null or undefined when calling getSampleCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sample-codes/{sample_code_id}`.replace(`{${"sample_code_id"}}`, encodeURIComponent(String(requestParameters.sampleCodeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SampleCodeDetailOutFromJSON(jsonValue));
    }

    /**
     * サンプルコード詳細を取得 - 必要権限: [ASSETS_EDIT]
     * サンプルコード詳細取得
     */
    async getSampleCode(requestParameters: GetSampleCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SampleCodeDetailOut> {
        const response = await this.getSampleCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * サンプルコード一覧を取得 - 必要権限: [ASSETS_EDIT] - 並び順: id降順
     * サンプルコード一覧取得
     */
    async getSampleCodeListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SampleCodeListOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sample-codes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SampleCodeListOutFromJSON));
    }

    /**
     * サンプルコード一覧を取得 - 必要権限: [ASSETS_EDIT] - 並び順: id降順
     * サンプルコード一覧取得
     */
    async getSampleCodeList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SampleCodeListOut>> {
        const response = await this.getSampleCodeListRaw(initOverrides);
        return await response.value();
    }

    /**
     * サンプルコードを更新 - 必要権限: [ASSETS_EDIT]
     * サンプルコード更新
     */
    async updateSampleCodeRaw(requestParameters: UpdateSampleCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SampleCodeDetailOut>> {
        if (requestParameters.sampleCodeId === null || requestParameters.sampleCodeId === undefined) {
            throw new runtime.RequiredError('sampleCodeId','Required parameter requestParameters.sampleCodeId was null or undefined when calling updateSampleCode.');
        }

        if (requestParameters.sampleCodeUpdateIn === null || requestParameters.sampleCodeUpdateIn === undefined) {
            throw new runtime.RequiredError('sampleCodeUpdateIn','Required parameter requestParameters.sampleCodeUpdateIn was null or undefined when calling updateSampleCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/sample-codes/{sample_code_id}`.replace(`{${"sample_code_id"}}`, encodeURIComponent(String(requestParameters.sampleCodeId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SampleCodeUpdateInToJSON(requestParameters.sampleCodeUpdateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SampleCodeDetailOutFromJSON(jsonValue));
    }

    /**
     * サンプルコードを更新 - 必要権限: [ASSETS_EDIT]
     * サンプルコード更新
     */
    async updateSampleCode(requestParameters: UpdateSampleCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SampleCodeDetailOut> {
        const response = await this.updateSampleCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
