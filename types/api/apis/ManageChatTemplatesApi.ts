/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  ChatTemplateCreateIn,
  ChatTemplateDetailOut,
  ChatTemplateUpdateIn,
  ValidationError,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    ChatTemplateCreateInFromJSON,
    ChatTemplateCreateInToJSON,
    ChatTemplateDetailOutFromJSON,
    ChatTemplateDetailOutToJSON,
    ChatTemplateUpdateInFromJSON,
    ChatTemplateUpdateInToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface CreateChatTemplateRequest {
    chatTemplateCreateIn: ChatTemplateCreateIn;
}

export interface DeleteChatTemplateRequest {
    chatTemplateId: number;
}

export interface GetChatTemplateRequest {
    chatTemplateId: number;
}

export interface UpdateChatTemplateRequest {
    chatTemplateId: number;
    chatTemplateUpdateIn: ChatTemplateUpdateIn;
}

/**
 * 
 */
export class ManageChatTemplatesApi extends runtime.BaseAPI {

    /**
     * チャットテンプレート作成 - 必要権限: [CHAT] - ログインユーザーのチャットテンプレートを作成
     * チャットテンプレート作成
     */
    async createChatTemplateRaw(requestParameters: CreateChatTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatTemplateDetailOut>> {
        if (requestParameters.chatTemplateCreateIn === null || requestParameters.chatTemplateCreateIn === undefined) {
            throw new runtime.RequiredError('chatTemplateCreateIn','Required parameter requestParameters.chatTemplateCreateIn was null or undefined when calling createChatTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/chat-templates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChatTemplateCreateInToJSON(requestParameters.chatTemplateCreateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatTemplateDetailOutFromJSON(jsonValue));
    }

    /**
     * チャットテンプレート作成 - 必要権限: [CHAT] - ログインユーザーのチャットテンプレートを作成
     * チャットテンプレート作成
     */
    async createChatTemplate(requestParameters: CreateChatTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatTemplateDetailOut> {
        const response = await this.createChatTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * チャットテンプレート削除 - 必要権限: [CHAT] - ログインユーザーのチャットテンプレートのみ削除可能
     * チャットテンプレート削除
     */
    async deleteChatTemplateRaw(requestParameters: DeleteChatTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.chatTemplateId === null || requestParameters.chatTemplateId === undefined) {
            throw new runtime.RequiredError('chatTemplateId','Required parameter requestParameters.chatTemplateId was null or undefined when calling deleteChatTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/chat-templates/{chat_template_id}`.replace(`{${"chat_template_id"}}`, encodeURIComponent(String(requestParameters.chatTemplateId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * チャットテンプレート削除 - 必要権限: [CHAT] - ログインユーザーのチャットテンプレートのみ削除可能
     * チャットテンプレート削除
     */
    async deleteChatTemplate(requestParameters: DeleteChatTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteChatTemplateRaw(requestParameters, initOverrides);
    }

    /**
     * チャットテンプレート詳細取得 - 必要権限: [CHAT] - ログインユーザーのチャットテンプレートのみ取得可能
     * チャットテンプレート詳細取得
     */
    async getChatTemplateRaw(requestParameters: GetChatTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatTemplateDetailOut>> {
        if (requestParameters.chatTemplateId === null || requestParameters.chatTemplateId === undefined) {
            throw new runtime.RequiredError('chatTemplateId','Required parameter requestParameters.chatTemplateId was null or undefined when calling getChatTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/chat-templates/{chat_template_id}`.replace(`{${"chat_template_id"}}`, encodeURIComponent(String(requestParameters.chatTemplateId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatTemplateDetailOutFromJSON(jsonValue));
    }

    /**
     * チャットテンプレート詳細取得 - 必要権限: [CHAT] - ログインユーザーのチャットテンプレートのみ取得可能
     * チャットテンプレート詳細取得
     */
    async getChatTemplate(requestParameters: GetChatTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatTemplateDetailOut> {
        const response = await this.getChatTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * チャットテンプレート一覧取得 - 必要権限: [CHAT] - 並び順: id 降順 - ログインユーザーのチャットテンプレートを取得
     * チャットテンプレート一覧取得
     */
    async getChatTemplateListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ChatTemplateDetailOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/chat-templates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChatTemplateDetailOutFromJSON));
    }

    /**
     * チャットテンプレート一覧取得 - 必要権限: [CHAT] - 並び順: id 降順 - ログインユーザーのチャットテンプレートを取得
     * チャットテンプレート一覧取得
     */
    async getChatTemplateList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ChatTemplateDetailOut>> {
        const response = await this.getChatTemplateListRaw(initOverrides);
        return await response.value();
    }

    /**
     * チャットテンプレート更新 - 必要権限: [CHAT] - ログインユーザーのチャットテンプレートのみ更新可能
     * チャットテンプレート更新
     */
    async updateChatTemplateRaw(requestParameters: UpdateChatTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatTemplateDetailOut>> {
        if (requestParameters.chatTemplateId === null || requestParameters.chatTemplateId === undefined) {
            throw new runtime.RequiredError('chatTemplateId','Required parameter requestParameters.chatTemplateId was null or undefined when calling updateChatTemplate.');
        }

        if (requestParameters.chatTemplateUpdateIn === null || requestParameters.chatTemplateUpdateIn === undefined) {
            throw new runtime.RequiredError('chatTemplateUpdateIn','Required parameter requestParameters.chatTemplateUpdateIn was null or undefined when calling updateChatTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/chat-templates/{chat_template_id}`.replace(`{${"chat_template_id"}}`, encodeURIComponent(String(requestParameters.chatTemplateId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ChatTemplateUpdateInToJSON(requestParameters.chatTemplateUpdateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatTemplateDetailOutFromJSON(jsonValue));
    }

    /**
     * チャットテンプレート更新 - 必要権限: [CHAT] - ログインユーザーのチャットテンプレートのみ更新可能
     * チャットテンプレート更新
     */
    async updateChatTemplate(requestParameters: UpdateChatTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatTemplateDetailOut> {
        const response = await this.updateChatTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
