/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  ContentPackageContentUpdateIn,
  ContentPackageCreateIn,
  ContentPackageDetailOut,
  ContentPackageListForEventOut,
  ContentPackageListOut,
  ContentPackageUpdateIn,
  ValidationError,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    ContentPackageContentUpdateInFromJSON,
    ContentPackageContentUpdateInToJSON,
    ContentPackageCreateInFromJSON,
    ContentPackageCreateInToJSON,
    ContentPackageDetailOutFromJSON,
    ContentPackageDetailOutToJSON,
    ContentPackageListForEventOutFromJSON,
    ContentPackageListForEventOutToJSON,
    ContentPackageListOutFromJSON,
    ContentPackageListOutToJSON,
    ContentPackageUpdateInFromJSON,
    ContentPackageUpdateInToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface CreateContentPackageRequest {
    contentPackageCreateIn: ContentPackageCreateIn;
}

export interface DeleteContentPackageRequest {
    contentPackageId: number;
}

export interface GetContentPackageRequest {
    contentPackageId: number;
}

export interface GetContentPackageForEventRequest {
    contentPackageId: number;
}

export interface GetContentPackageListForEventRequest {
    sessionId: number;
}

export interface UpdateContentPackageRequest {
    contentPackageId: number;
    contentPackageUpdateIn: ContentPackageUpdateIn;
}

export interface UpdateContentPackageContentRequest {
    contentPackageId: number;
    contentPackageContentUpdateIn: Array<ContentPackageContentUpdateIn>;
}

/**
 * 
 */
export class ManageContentPackagesApi extends runtime.BaseAPI {

    /**
     * コンテンツパッケージを作成 - 必要権限: [CONTENT_PACKAGE_EDIT] - 登録データ補足情報     - created_at: user.full_name
     * コンテンツパッケージ作成
     */
    async createContentPackageRaw(requestParameters: CreateContentPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentPackageDetailOut>> {
        if (requestParameters.contentPackageCreateIn === null || requestParameters.contentPackageCreateIn === undefined) {
            throw new runtime.RequiredError('contentPackageCreateIn','Required parameter requestParameters.contentPackageCreateIn was null or undefined when calling createContentPackage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/content-packages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContentPackageCreateInToJSON(requestParameters.contentPackageCreateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentPackageDetailOutFromJSON(jsonValue));
    }

    /**
     * コンテンツパッケージを作成 - 必要権限: [CONTENT_PACKAGE_EDIT] - 登録データ補足情報     - created_at: user.full_name
     * コンテンツパッケージ作成
     */
    async createContentPackage(requestParameters: CreateContentPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentPackageDetailOut> {
        const response = await this.createContentPackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * コンテンツパッケージを削除 - 必要権限: [CONTENT_PACKAGE_EDIT] - 物理削除
     * コンテンツパッケージ削除
     */
    async deleteContentPackageRaw(requestParameters: DeleteContentPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.contentPackageId === null || requestParameters.contentPackageId === undefined) {
            throw new runtime.RequiredError('contentPackageId','Required parameter requestParameters.contentPackageId was null or undefined when calling deleteContentPackage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/content-packages/{content_package_id}`.replace(`{${"content_package_id"}}`, encodeURIComponent(String(requestParameters.contentPackageId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * コンテンツパッケージを削除 - 必要権限: [CONTENT_PACKAGE_EDIT] - 物理削除
     * コンテンツパッケージ削除
     */
    async deleteContentPackage(requestParameters: DeleteContentPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteContentPackageRaw(requestParameters, initOverrides);
    }

    /**
     * コンテンツパッケージ詳細を取得 - 必要権限: [PRIVATE_CONTENT_PACKAGE_VIEW] - 登録コンテンツの並び順: order昇順
     * コンテンツパッケージ詳細取得
     */
    async getContentPackageRaw(requestParameters: GetContentPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentPackageDetailOut>> {
        if (requestParameters.contentPackageId === null || requestParameters.contentPackageId === undefined) {
            throw new runtime.RequiredError('contentPackageId','Required parameter requestParameters.contentPackageId was null or undefined when calling getContentPackage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/content-packages/{content_package_id}`.replace(`{${"content_package_id"}}`, encodeURIComponent(String(requestParameters.contentPackageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentPackageDetailOutFromJSON(jsonValue));
    }

    /**
     * コンテンツパッケージ詳細を取得 - 必要権限: [PRIVATE_CONTENT_PACKAGE_VIEW] - 登録コンテンツの並び順: order昇順
     * コンテンツパッケージ詳細取得
     */
    async getContentPackage(requestParameters: GetContentPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentPackageDetailOut> {
        const response = await this.getContentPackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * コンテンツパッケージ詳細を取得 - 必要権限: [OWN_SESSION_EDIT, ALL_EVENT_AND_SESSION_EDIT] - 登録コンテンツの並び順: order昇順 - 取得可能条件     - is_published=True
     * イベント用コンテンツパッケージ詳細取得
     */
    async getContentPackageForEventRaw(requestParameters: GetContentPackageForEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentPackageDetailOut>> {
        if (requestParameters.contentPackageId === null || requestParameters.contentPackageId === undefined) {
            throw new runtime.RequiredError('contentPackageId','Required parameter requestParameters.contentPackageId was null or undefined when calling getContentPackageForEvent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/content-packages/{content_package_id}/for-event`.replace(`{${"content_package_id"}}`, encodeURIComponent(String(requestParameters.contentPackageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentPackageDetailOutFromJSON(jsonValue));
    }

    /**
     * コンテンツパッケージ詳細を取得 - 必要権限: [OWN_SESSION_EDIT, ALL_EVENT_AND_SESSION_EDIT] - 登録コンテンツの並び順: order昇順 - 取得可能条件     - is_published=True
     * イベント用コンテンツパッケージ詳細取得
     */
    async getContentPackageForEvent(requestParameters: GetContentPackageForEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentPackageDetailOut> {
        const response = await this.getContentPackageForEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * コンテンツパッケージ一覧を取得 - 必要権限: [PRIVATE_CONTENT_PACKAGE_VIEW] - 並び順: id降順
     * コンテンツパッケージ一覧取得
     */
    async getContentPackageListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ContentPackageListOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/content-packages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ContentPackageListOutFromJSON));
    }

    /**
     * コンテンツパッケージ一覧を取得 - 必要権限: [PRIVATE_CONTENT_PACKAGE_VIEW] - 並び順: id降順
     * コンテンツパッケージ一覧取得
     */
    async getContentPackageList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ContentPackageListOut>> {
        const response = await this.getContentPackageListRaw(initOverrides);
        return await response.value();
    }

    /**
     * イベント用コンテンツパッケージ一覧を取得 - 必要権限: [OWN_SESSION_EDIT, ALL_EVENT_AND_SESSION_EDIT]     - ALL_EVENT_AND_SESSION_EDIT権限を持たない場合は自組織主催のイベントのみ指定可能 - 指定したセッションが存在しない場合NOT_FOUNDエラー - 並び順: id降順 - 取得可能条件     - is_published=True     - 企業主催のイベントの場合         - is_company_package=True     - 学校主催のイベントの場合         - is_school_package=True
     * イベント用コンテンツパッケージ一覧取得
     */
    async getContentPackageListForEventRaw(requestParameters: GetContentPackageListForEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ContentPackageListForEventOut>>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getContentPackageListForEvent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/content-packages/for-event/{session_id}`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ContentPackageListForEventOutFromJSON));
    }

    /**
     * イベント用コンテンツパッケージ一覧を取得 - 必要権限: [OWN_SESSION_EDIT, ALL_EVENT_AND_SESSION_EDIT]     - ALL_EVENT_AND_SESSION_EDIT権限を持たない場合は自組織主催のイベントのみ指定可能 - 指定したセッションが存在しない場合NOT_FOUNDエラー - 並び順: id降順 - 取得可能条件     - is_published=True     - 企業主催のイベントの場合         - is_company_package=True     - 学校主催のイベントの場合         - is_school_package=True
     * イベント用コンテンツパッケージ一覧取得
     */
    async getContentPackageListForEvent(requestParameters: GetContentPackageListForEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ContentPackageListForEventOut>> {
        const response = await this.getContentPackageListForEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * コンテンツパッケージを更新 - 必要権限: [CONTENT_PACKAGE_EDIT] - 登録データ補足情報     - updated_at: user.full_name
     * コンテンツパッケージ更新
     */
    async updateContentPackageRaw(requestParameters: UpdateContentPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentPackageDetailOut>> {
        if (requestParameters.contentPackageId === null || requestParameters.contentPackageId === undefined) {
            throw new runtime.RequiredError('contentPackageId','Required parameter requestParameters.contentPackageId was null or undefined when calling updateContentPackage.');
        }

        if (requestParameters.contentPackageUpdateIn === null || requestParameters.contentPackageUpdateIn === undefined) {
            throw new runtime.RequiredError('contentPackageUpdateIn','Required parameter requestParameters.contentPackageUpdateIn was null or undefined when calling updateContentPackage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/content-packages/{content_package_id}`.replace(`{${"content_package_id"}}`, encodeURIComponent(String(requestParameters.contentPackageId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ContentPackageUpdateInToJSON(requestParameters.contentPackageUpdateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentPackageDetailOutFromJSON(jsonValue));
    }

    /**
     * コンテンツパッケージを更新 - 必要権限: [CONTENT_PACKAGE_EDIT] - 登録データ補足情報     - updated_at: user.full_name
     * コンテンツパッケージ更新
     */
    async updateContentPackage(requestParameters: UpdateContentPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentPackageDetailOut> {
        const response = await this.updateContentPackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * コンテンツパッケージの登録コンテンツを更新 - 必要権限: [CONTENT_PACKAGE_EDIT] - 登録データ補足情報     - updated_at: user.full_name - 古い登録コンテンツをパッケージからすべて削除して、新しいコンテンツを登録する
     * パッケージコンテンツ更新
     */
    async updateContentPackageContentRaw(requestParameters: UpdateContentPackageContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentPackageDetailOut>> {
        if (requestParameters.contentPackageId === null || requestParameters.contentPackageId === undefined) {
            throw new runtime.RequiredError('contentPackageId','Required parameter requestParameters.contentPackageId was null or undefined when calling updateContentPackageContent.');
        }

        if (requestParameters.contentPackageContentUpdateIn === null || requestParameters.contentPackageContentUpdateIn === undefined) {
            throw new runtime.RequiredError('contentPackageContentUpdateIn','Required parameter requestParameters.contentPackageContentUpdateIn was null or undefined when calling updateContentPackageContent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/content-packages/{content_package_id}/contents`.replace(`{${"content_package_id"}}`, encodeURIComponent(String(requestParameters.contentPackageId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.contentPackageContentUpdateIn.map(ContentPackageContentUpdateInToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentPackageDetailOutFromJSON(jsonValue));
    }

    /**
     * コンテンツパッケージの登録コンテンツを更新 - 必要権限: [CONTENT_PACKAGE_EDIT] - 登録データ補足情報     - updated_at: user.full_name - 古い登録コンテンツをパッケージからすべて削除して、新しいコンテンツを登録する
     * パッケージコンテンツ更新
     */
    async updateContentPackageContent(requestParameters: UpdateContentPackageContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentPackageDetailOut> {
        const response = await this.updateContentPackageContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
