/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  CreateHeatmapSampleCaseIn,
  GenerateAccessTokenIn,
  GenerateAccessTokenOut,
  UpdateCommentByStaffIn,
  UpdateCommentByStaffOut,
  ValidationError,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    CreateHeatmapSampleCaseInFromJSON,
    CreateHeatmapSampleCaseInToJSON,
    GenerateAccessTokenInFromJSON,
    GenerateAccessTokenInToJSON,
    GenerateAccessTokenOutFromJSON,
    GenerateAccessTokenOutToJSON,
    UpdateCommentByStaffInFromJSON,
    UpdateCommentByStaffInToJSON,
    UpdateCommentByStaffOutFromJSON,
    UpdateCommentByStaffOutToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface CreateHeatmapSampleCaseRequest {
    createHeatmapSampleCaseIn: CreateHeatmapSampleCaseIn;
}

export interface GenerateAccessTokenRequest {
    generateAccessTokenIn: GenerateAccessTokenIn;
}

export interface UpdateCommentByStaffRequest {
    userId: number;
    updateCommentByStaffIn: UpdateCommentByStaffIn;
}

/**
 * 
 */
export class ManagePortfoliosApi extends runtime.BaseAPI {

    /**
     * ヒートマップサンプルケース作成 - 必要権限: [ASSETS_EDIT] - 処理手順     - usernameでユーザーを特定 (削除されても特定)     - SkillHeatmapSampleCaseを作成         - order: 最大値+1         - is_published: True         - industry, occupation 中間テーブルレコード作成         - SkillHeatmapSampleCaseCellを作成             - QuestionResultをトピック別集計                 - 対象: チャレンジ問題 or use_in_portfolio.use_in_portfolio=True                 - UserSkill取得と共通化できるかも
     * ヒートマップサンプルケース作成
     */
    async createHeatmapSampleCaseRaw(requestParameters: CreateHeatmapSampleCaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.createHeatmapSampleCaseIn === null || requestParameters.createHeatmapSampleCaseIn === undefined) {
            throw new runtime.RequiredError('createHeatmapSampleCaseIn','Required parameter requestParameters.createHeatmapSampleCaseIn was null or undefined when calling createHeatmapSampleCase.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/portfolios/heatmap-case`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateHeatmapSampleCaseInToJSON(requestParameters.createHeatmapSampleCaseIn),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * ヒートマップサンプルケース作成 - 必要権限: [ASSETS_EDIT] - 処理手順     - usernameでユーザーを特定 (削除されても特定)     - SkillHeatmapSampleCaseを作成         - order: 最大値+1         - is_published: True         - industry, occupation 中間テーブルレコード作成         - SkillHeatmapSampleCaseCellを作成             - QuestionResultをトピック別集計                 - 対象: チャレンジ問題 or use_in_portfolio.use_in_portfolio=True                 - UserSkill取得と共通化できるかも
     * ヒートマップサンプルケース作成
     */
    async createHeatmapSampleCase(requestParameters: CreateHeatmapSampleCaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.createHeatmapSampleCaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 第三者閲覧用URLを発行する - 必要権限:     - RECRUITMENT - データ取得可能条件:     - User.is_deleted = False     - User.user_type = UserType.GENERAL_USER - expires_at取得:     - datetime.utcnow() + timedelta(days=...) - レスポンス補足:     - expires_at: TIMESTAMPで返す - 実行処理:     - userが特定できるかどうかチェック     - token生成     - レスポンス返す - URL想定:     - /limited/portfolio?user_id=<user_id>&expires=<expires>&signature=<signature>
     * 第三者用のポートフォリオアクセストークンを発行する
     */
    async generateAccessTokenRaw(requestParameters: GenerateAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerateAccessTokenOut>> {
        if (requestParameters.generateAccessTokenIn === null || requestParameters.generateAccessTokenIn === undefined) {
            throw new runtime.RequiredError('generateAccessTokenIn','Required parameter requestParameters.generateAccessTokenIn was null or undefined when calling generateAccessToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/portfolios/users/token-issuance`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateAccessTokenInToJSON(requestParameters.generateAccessTokenIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerateAccessTokenOutFromJSON(jsonValue));
    }

    /**
     * 第三者閲覧用URLを発行する - 必要権限:     - RECRUITMENT - データ取得可能条件:     - User.is_deleted = False     - User.user_type = UserType.GENERAL_USER - expires_at取得:     - datetime.utcnow() + timedelta(days=...) - レスポンス補足:     - expires_at: TIMESTAMPで返す - 実行処理:     - userが特定できるかどうかチェック     - token生成     - レスポンス返す - URL想定:     - /limited/portfolio?user_id=<user_id>&expires=<expires>&signature=<signature>
     * 第三者用のポートフォリオアクセストークンを発行する
     */
    async generateAccessToken(requestParameters: GenerateAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerateAccessTokenOut> {
        const response = await this.generateAccessTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 担当者からの一言を更新する - 必要権限:     - [RECRUITMENT] - データ取得可能条件     - User.is_deleted == False     - ReferableUser.is_deleted == False     - ReferableUser.company_id == user.organization.company_id
     * 担当者からの一言を更新する
     */
    async updateCommentByStaffRaw(requestParameters: UpdateCommentByStaffRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateCommentByStaffOut>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling updateCommentByStaff.');
        }

        if (requestParameters.updateCommentByStaffIn === null || requestParameters.updateCommentByStaffIn === undefined) {
            throw new runtime.RequiredError('updateCommentByStaffIn','Required parameter requestParameters.updateCommentByStaffIn was null or undefined when calling updateCommentByStaff.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/portfolios/users/{user_id}/comment-by-staff`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCommentByStaffInToJSON(requestParameters.updateCommentByStaffIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateCommentByStaffOutFromJSON(jsonValue));
    }

    /**
     * 担当者からの一言を更新する - 必要権限:     - [RECRUITMENT] - データ取得可能条件     - User.is_deleted == False     - ReferableUser.is_deleted == False     - ReferableUser.company_id == user.organization.company_id
     * 担当者からの一言を更新する
     */
    async updateCommentByStaff(requestParameters: UpdateCommentByStaffRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateCommentByStaffOut> {
        const response = await this.updateCommentByStaffRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
