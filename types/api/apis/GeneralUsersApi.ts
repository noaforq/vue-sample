/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  DeleteUserIn,
  NewAccountInfoIn,
  NewAccountInfoOut,
  ScoutAcceptanceIn,
  SignupIn,
  SignupOut,
  SignupTemporaryIn,
  UserCareerIn,
  UserCareerOut,
  UserProfileIn,
  UserProfileOut,
  UserSkillInfoIn,
  UserSkillInfoOut,
  ValidationError,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    DeleteUserInFromJSON,
    DeleteUserInToJSON,
    NewAccountInfoInFromJSON,
    NewAccountInfoInToJSON,
    NewAccountInfoOutFromJSON,
    NewAccountInfoOutToJSON,
    ScoutAcceptanceInFromJSON,
    ScoutAcceptanceInToJSON,
    SignupInFromJSON,
    SignupInToJSON,
    SignupOutFromJSON,
    SignupOutToJSON,
    SignupTemporaryInFromJSON,
    SignupTemporaryInToJSON,
    UserCareerInFromJSON,
    UserCareerInToJSON,
    UserCareerOutFromJSON,
    UserCareerOutToJSON,
    UserProfileInFromJSON,
    UserProfileInToJSON,
    UserProfileOutFromJSON,
    UserProfileOutToJSON,
    UserSkillInfoInFromJSON,
    UserSkillInfoInToJSON,
    UserSkillInfoOutFromJSON,
    UserSkillInfoOutToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface ApproveScoutInvitationRequest {
    organizationId: number;
}

export interface CreateNewAccountInfoRequest {
    newAccountInfoIn: NewAccountInfoIn;
}

export interface DeleteUserRequest {
    deleteUserIn: DeleteUserIn;
}

export interface SignupRequest {
    signupIn: SignupIn;
}

export interface SignupTemporaryRequest {
    signupTemporaryIn: SignupTemporaryIn;
}

export interface UpdateScoutAcceptanceRequest {
    scoutAcceptanceIn: ScoutAcceptanceIn;
}

export interface UpdateUserCareerRequest {
    userCareerIn: UserCareerIn;
}

export interface UpdateUserProfileRequest {
    userProfileIn: UserProfileIn;
}

export interface UpdateUserSkillInformationRequest {
    userSkillInfoIn: UserSkillInfoIn;
}

/**
 * 
 */
export class GeneralUsersApi extends runtime.BaseAPI {

    /**
     * 人材紹介スカウトを承諾する
     */
    async approveScoutInvitationRaw(requestParameters: ApproveScoutInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling approveScoutInvitation.');
        }

        const queryParameters: any = {};

        if (requestParameters.organizationId !== undefined) {
            queryParameters['organization_id'] = requestParameters.organizationId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/users/scout`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * 人材紹介スカウトを承諾する
     */
    async approveScoutInvitation(requestParameters: ApproveScoutInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.approveScoutInvitationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 一般ユーザーのアカウント情報を新規登録 サインアップ後の一般ユーザー情報を登録する - 必要権限：[GENERAL_USER] - 登録内容詳細：     - GeneralUser.is_entered_required_items=Trueで登録 - 存在しないoccupation_id/prefecture_id指定時にDataDoesNotExist - 3つ以上のPG言語が入力された場合 ParameterError - 学歴の入力詳細     - 手動入力の場合：~master_id=Null, ~name=入力名     - 学校系マスタから入力の場合：~master_id=入力値、~name=Null
     * 新規ユーザー情報登録
     */
    async createNewAccountInfoRaw(requestParameters: CreateNewAccountInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NewAccountInfoOut>> {
        if (requestParameters.newAccountInfoIn === null || requestParameters.newAccountInfoIn === undefined) {
            throw new runtime.RequiredError('newAccountInfoIn','Required parameter requestParameters.newAccountInfoIn was null or undefined when calling createNewAccountInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/general/users/new`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewAccountInfoInToJSON(requestParameters.newAccountInfoIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NewAccountInfoOutFromJSON(jsonValue));
    }

    /**
     * 一般ユーザーのアカウント情報を新規登録 サインアップ後の一般ユーザー情報を登録する - 必要権限：[GENERAL_USER] - 登録内容詳細：     - GeneralUser.is_entered_required_items=Trueで登録 - 存在しないoccupation_id/prefecture_id指定時にDataDoesNotExist - 3つ以上のPG言語が入力された場合 ParameterError - 学歴の入力詳細     - 手動入力の場合：~master_id=Null, ~name=入力名     - 学校系マスタから入力の場合：~master_id=入力値、~name=Null
     * 新規ユーザー情報登録
     */
    async createNewAccountInfo(requestParameters: CreateNewAccountInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NewAccountInfoOut> {
        const response = await this.createNewAccountInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 一般ユーザーのアカウントを削除 - 必要権限：[GENERAL_USER] - 処理内容：     - QuitReasonにデータを作成         - QuitReason.user_id = user.id         - QuitReason.quit_reason_type = quit_reason_type         - QuitReason.quit_reason = quit_reason     - userのis_deletedをtrueに更新 - 存在しないquit_reason_typeを指定したらParameterError
     * 一般ユーザー退会
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.deleteUserIn === null || requestParameters.deleteUserIn === undefined) {
            throw new runtime.RequiredError('deleteUserIn','Required parameter requestParameters.deleteUserIn was null or undefined when calling deleteUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/general/users/me/deletion`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteUserInToJSON(requestParameters.deleteUserIn),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 一般ユーザーのアカウントを削除 - 必要権限：[GENERAL_USER] - 処理内容：     - QuitReasonにデータを作成         - QuitReason.user_id = user.id         - QuitReason.quit_reason_type = quit_reason_type         - QuitReason.quit_reason = quit_reason     - userのis_deletedをtrueに更新 - 存在しないquit_reason_typeを指定したらParameterError
     * 一般ユーザー退会
     */
    async deleteUser(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserRaw(requestParameters, initOverrides);
    }

    /**
     * 最新の利用規約（求人利用規約・個人情報利用規約）に同意しているか確認する - 必要権限: [GENERAL_USER] [SKILL_CHECK_USER] - レスポンス詳細     - is_agreed_latest_terms(最新バージョンの規約に同意しているか)     - is_agreed_past_terms(過去バージョンも含むいずれかの規約に同意していたか)
     * 最新の利用規約に同意しているか確認する
     */
    async getLatestAgreedTermsInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/users/terms-of-use-consent-info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 最新の利用規約（求人利用規約・個人情報利用規約）に同意しているか確認する - 必要権限: [GENERAL_USER] [SKILL_CHECK_USER] - レスポンス詳細     - is_agreed_latest_terms(最新バージョンの規約に同意しているか)     - is_agreed_past_terms(過去バージョンも含むいずれかの規約に同意していたか)
     * 最新の利用規約に同意しているか確認する
     */
    async getLatestAgreedTermsInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getLatestAgreedTermsInfoRaw(initOverrides);
        return await response.value();
    }

    /**
     * 一般ユーザーキャリア情報取得 ログインユーザーに紐づくキャリア情報を更新する - 必要権限：[GENERAL_USER]
     * 一般ユーザーキャリア情報取得
     */
    async getUserCareerRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserCareerOut>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/users/career`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserCareerOutFromJSON(jsonValue));
    }

    /**
     * 一般ユーザーキャリア情報取得 ログインユーザーに紐づくキャリア情報を更新する - 必要権限：[GENERAL_USER]
     * 一般ユーザーキャリア情報取得
     */
    async getUserCareer(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserCareerOut> {
        const response = await this.getUserCareerRaw(initOverrides);
        return await response.value();
    }

    /**
     * 一般ユーザープロフィール情報取得 ログインユーザーに紐づくプロフィール情報を取得する - 必要権限：[GENERAL_USER] - 出力項目詳細     - job_hunting_type == JOB_HUNTINGの場合job_hunting_status出力     - job_hunting_type == JOB_CHANGEの場合job_changing_status出力
     * プロフィール情報取得
     */
    async getUserProfileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserProfileOut>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/users/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileOutFromJSON(jsonValue));
    }

    /**
     * 一般ユーザープロフィール情報取得 ログインユーザーに紐づくプロフィール情報を取得する - 必要権限：[GENERAL_USER] - 出力項目詳細     - job_hunting_type == JOB_HUNTINGの場合job_hunting_status出力     - job_hunting_type == JOB_CHANGEの場合job_changing_status出力
     * プロフィール情報取得
     */
    async getUserProfile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserProfileOut> {
        const response = await this.getUserProfileRaw(initOverrides);
        return await response.value();
    }

    /**
     * 一般ユーザースキル情報取得 ログインユーザーに紐づくスキル情報を更新する - 必要権限：[GENERAL_USER] - 得意PG言語、得意フレームワークは各３つまで登録可能
     * 一般ユーザースキル情報取得
     */
    async getUserSkillInformationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSkillInfoOut>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/users/skill-information`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSkillInfoOutFromJSON(jsonValue));
    }

    /**
     * 一般ユーザースキル情報取得 ログインユーザーに紐づくスキル情報を更新する - 必要権限：[GENERAL_USER] - 得意PG言語、得意フレームワークは各３つまで登録可能
     * 一般ユーザースキル情報取得
     */
    async getUserSkillInformation(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSkillInfoOut> {
        const response = await this.getUserSkillInformationRaw(initOverrides);
        return await response.value();
    }

    /**
     * 一般ユーザー本登録 - トークンからユーザーを取得     - ユーザーが取得できない、本登録日時が入っていない場合はInvalidCredentialsエラー - 使用したトークンを削除 - ユーザーの本登録日時を現在日時に設定 - ユーザーのis_deletedをFalseに変更 - ユーザーのアクセストークンを発行
     * 一般ユーザー本登録
     */
    async signupRaw(requestParameters: SignupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SignupOut>> {
        if (requestParameters.signupIn === null || requestParameters.signupIn === undefined) {
            throw new runtime.RequiredError('signupIn','Required parameter requestParameters.signupIn was null or undefined when calling signup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/general/users/signup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignupInToJSON(requestParameters.signupIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignupOutFromJSON(jsonValue));
    }

    /**
     * 一般ユーザー本登録 - トークンからユーザーを取得     - ユーザーが取得できない、本登録日時が入っていない場合はInvalidCredentialsエラー - 使用したトークンを削除 - ユーザーの本登録日時を現在日時に設定 - ユーザーのis_deletedをFalseに変更 - ユーザーのアクセストークンを発行
     * 一般ユーザー本登録
     */
    async signup(requestParameters: SignupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SignupOut> {
        const response = await this.signupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 一般ユーザー仮登録 - 同じusernameを持つ本登録ユーザーが存在した場合ALREADY_EXISTS_USERNAME - 同じemailを持つ本登録ユーザーが存在した場合ALREADY_EXISTS_EMAIL - 同じusernameまたはemailを持つ仮登録ユーザーは削除 - リクエスト内容でユーザーを作成     - 仮登録の状態ではis_deleted=Trueとする - 仮登録ユーザーに対して`利用規約`,`プライバシーポリシー`,`新規登録時の注意事項`の規約登録 - 本登録用のトークンを発行 - 仮登録メールをユーザーに送信
     * 一般ユーザー仮登録
     */
    async signupTemporaryRaw(requestParameters: SignupTemporaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.signupTemporaryIn === null || requestParameters.signupTemporaryIn === undefined) {
            throw new runtime.RequiredError('signupTemporaryIn','Required parameter requestParameters.signupTemporaryIn was null or undefined when calling signupTemporary.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/general/users/signup/temporary`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignupTemporaryInToJSON(requestParameters.signupTemporaryIn),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 一般ユーザー仮登録 - 同じusernameを持つ本登録ユーザーが存在した場合ALREADY_EXISTS_USERNAME - 同じemailを持つ本登録ユーザーが存在した場合ALREADY_EXISTS_EMAIL - 同じusernameまたはemailを持つ仮登録ユーザーは削除 - リクエスト内容でユーザーを作成     - 仮登録の状態ではis_deleted=Trueとする - 仮登録ユーザーに対して`利用規約`,`プライバシーポリシー`,`新規登録時の注意事項`の規約登録 - 本登録用のトークンを発行 - 仮登録メールをユーザーに送信
     * 一般ユーザー仮登録
     */
    async signupTemporary(requestParameters: SignupTemporaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.signupTemporaryRaw(requestParameters, initOverrides);
    }

    /**
     * リクエストを送ってきたユーザのプロフィールのスカウト受信設定を更新する\"
     * ユーザプロフィールのスカウト受信設定を更新する
     */
    async updateScoutAcceptanceRaw(requestParameters: UpdateScoutAcceptanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.scoutAcceptanceIn === null || requestParameters.scoutAcceptanceIn === undefined) {
            throw new runtime.RequiredError('scoutAcceptanceIn','Required parameter requestParameters.scoutAcceptanceIn was null or undefined when calling updateScoutAcceptance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/general/users/scout-acceptance`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ScoutAcceptanceInToJSON(requestParameters.scoutAcceptanceIn),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * リクエストを送ってきたユーザのプロフィールのスカウト受信設定を更新する\"
     * ユーザプロフィールのスカウト受信設定を更新する
     */
    async updateScoutAcceptance(requestParameters: UpdateScoutAcceptanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateScoutAcceptanceRaw(requestParameters, initOverrides);
    }

    /**
     * 一般ユーザーキャリア情報更新 ログインユーザーに紐づくキャリア情報を更新する - 必要権限：[GENERAL_USER] - 職歴情報は最大３つまで登録可能 - 学歴の入力詳細     - 手動入力の場合：~master_id=Null, ~name=入力名     - 学校系マスタから入力の場合：~master_id=入力値、~name=Null
     * 一般ユーザーキャリア情報更新
     */
    async updateUserCareerRaw(requestParameters: UpdateUserCareerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserCareerOut>> {
        if (requestParameters.userCareerIn === null || requestParameters.userCareerIn === undefined) {
            throw new runtime.RequiredError('userCareerIn','Required parameter requestParameters.userCareerIn was null or undefined when calling updateUserCareer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/general/users/career`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserCareerInToJSON(requestParameters.userCareerIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserCareerOutFromJSON(jsonValue));
    }

    /**
     * 一般ユーザーキャリア情報更新 ログインユーザーに紐づくキャリア情報を更新する - 必要権限：[GENERAL_USER] - 職歴情報は最大３つまで登録可能 - 学歴の入力詳細     - 手動入力の場合：~master_id=Null, ~name=入力名     - 学校系マスタから入力の場合：~master_id=入力値、~name=Null
     * 一般ユーザーキャリア情報更新
     */
    async updateUserCareer(requestParameters: UpdateUserCareerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserCareerOut> {
        const response = await this.updateUserCareerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 一般ユーザープロフィール情報を更新する ログインユーザーに紐づくプロフィール情報を更新する - 必要権限：[GENERAL_USER]
     * プロフィール情報更新
     */
    async updateUserProfileRaw(requestParameters: UpdateUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserProfileOut>> {
        if (requestParameters.userProfileIn === null || requestParameters.userProfileIn === undefined) {
            throw new runtime.RequiredError('userProfileIn','Required parameter requestParameters.userProfileIn was null or undefined when calling updateUserProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/general/users/profile`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserProfileInToJSON(requestParameters.userProfileIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileOutFromJSON(jsonValue));
    }

    /**
     * 一般ユーザープロフィール情報を更新する ログインユーザーに紐づくプロフィール情報を更新する - 必要権限：[GENERAL_USER]
     * プロフィール情報更新
     */
    async updateUserProfile(requestParameters: UpdateUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserProfileOut> {
        const response = await this.updateUserProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 一般ユーザースキル情報更新 ログインユーザーに紐づくスキル情報を更新する - 必要権限：[GENERAL_USER] - 得意PG言語、得意フレームワークは各３つまで登録可能
     * 一般ユーザースキル情報更新
     */
    async updateUserSkillInformationRaw(requestParameters: UpdateUserSkillInformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSkillInfoOut>> {
        if (requestParameters.userSkillInfoIn === null || requestParameters.userSkillInfoIn === undefined) {
            throw new runtime.RequiredError('userSkillInfoIn','Required parameter requestParameters.userSkillInfoIn was null or undefined when calling updateUserSkillInformation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/general/users/skill-information`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserSkillInfoInToJSON(requestParameters.userSkillInfoIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSkillInfoOutFromJSON(jsonValue));
    }

    /**
     * 一般ユーザースキル情報更新 ログインユーザーに紐づくスキル情報を更新する - 必要権限：[GENERAL_USER] - 得意PG言語、得意フレームワークは各３つまで登録可能
     * 一般ユーザースキル情報更新
     */
    async updateUserSkillInformation(requestParameters: UpdateUserSkillInformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSkillInfoOut> {
        const response = await this.updateUserSkillInformationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
