/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  AppRoutersManageEducationalMaterialsGetEducationalMaterialListForEventOrdering,
  AppRoutersManageEducationalMaterialsGetEducationalMaterialListOrdering,
  EducationalMaterialCreateIn,
  EducationalMaterialDetailOut,
  EducationalMaterialListForEventOut,
  EducationalMaterialListOut,
  EducationalMaterialType,
  EducationalMaterialUpdateIn,
  ValidationError,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    AppRoutersManageEducationalMaterialsGetEducationalMaterialListForEventOrderingFromJSON,
    AppRoutersManageEducationalMaterialsGetEducationalMaterialListForEventOrderingToJSON,
    AppRoutersManageEducationalMaterialsGetEducationalMaterialListOrderingFromJSON,
    AppRoutersManageEducationalMaterialsGetEducationalMaterialListOrderingToJSON,
    EducationalMaterialCreateInFromJSON,
    EducationalMaterialCreateInToJSON,
    EducationalMaterialDetailOutFromJSON,
    EducationalMaterialDetailOutToJSON,
    EducationalMaterialListForEventOutFromJSON,
    EducationalMaterialListForEventOutToJSON,
    EducationalMaterialListOutFromJSON,
    EducationalMaterialListOutToJSON,
    EducationalMaterialTypeFromJSON,
    EducationalMaterialTypeToJSON,
    EducationalMaterialUpdateInFromJSON,
    EducationalMaterialUpdateInToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface CreateEducationalMaterialRequest {
    educationalMaterialCreateIn: EducationalMaterialCreateIn;
}

export interface DeleteEducationalMaterialRequest {
    contentId: number;
}

export interface GetEducationalMaterialRequest {
    contentId: number;
}

export interface GetEducationalMaterialForEventRequest {
    contentId: number;
}

export interface GetEducationalMaterialListRequest {
    limit?: number;
    offset?: number;
    educationalMaterialType?: EducationalMaterialType;
    contentCategoryId?: Array<number>;
    difficulty?: Array<number>;
    orderBy?: AppRoutersManageEducationalMaterialsGetEducationalMaterialListOrdering;
}

export interface GetEducationalMaterialListForEventRequest {
    sessionId: number;
    limit?: number;
    offset?: number;
    name?: string;
    tags?: Array<string>;
    educationalMaterialType?: Array<EducationalMaterialType>;
    contentCategoryIds?: Array<number>;
    difficulties?: Array<number>;
    isOfficial?: boolean;
    createdBy?: Array<string>;
    isSharedBetweenSchools?: boolean;
    orderBy?: AppRoutersManageEducationalMaterialsGetEducationalMaterialListForEventOrdering;
}

export interface UpdateEducationalMaterialRequest {
    contentId: number;
    educationalMaterialUpdateIn: EducationalMaterialUpdateIn;
}

/**
 * 
 */
export class ManageEducationalMaterialsApi extends runtime.BaseAPI {

    /**
     * 教材作成 - 必要権限: [MATERIAL_EDIT] - データ固定値     - コンテンツタイプ:教材     - コンテンツ区分:その他問題     - 公式問題:UserTypeがSTAFF, PART_TIMER, MANAGER, SUPERUSERの場合はTrue     - 作成者:ログインユーザー名 - \"他の学校アカウントに共有\":学校アカウントのみ変更可能 - 自組織に指定したコンテンツタグがない場合は作成し、すでにある場合はあるものを取得して紐付ける - `created_by`と`updated_by`のそれぞれに`first_name`と`last_name`を入力する
     * 教材作成
     */
    async createEducationalMaterialRaw(requestParameters: CreateEducationalMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EducationalMaterialDetailOut>> {
        if (requestParameters.educationalMaterialCreateIn === null || requestParameters.educationalMaterialCreateIn === undefined) {
            throw new runtime.RequiredError('educationalMaterialCreateIn','Required parameter requestParameters.educationalMaterialCreateIn was null or undefined when calling createEducationalMaterial.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/educational-materials`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EducationalMaterialCreateInToJSON(requestParameters.educationalMaterialCreateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EducationalMaterialDetailOutFromJSON(jsonValue));
    }

    /**
     * 教材作成 - 必要権限: [MATERIAL_EDIT] - データ固定値     - コンテンツタイプ:教材     - コンテンツ区分:その他問題     - 公式問題:UserTypeがSTAFF, PART_TIMER, MANAGER, SUPERUSERの場合はTrue     - 作成者:ログインユーザー名 - \"他の学校アカウントに共有\":学校アカウントのみ変更可能 - 自組織に指定したコンテンツタグがない場合は作成し、すでにある場合はあるものを取得して紐付ける - `created_by`と`updated_by`のそれぞれに`first_name`と`last_name`を入力する
     * 教材作成
     */
    async createEducationalMaterial(requestParameters: CreateEducationalMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EducationalMaterialDetailOut> {
        const response = await this.createEducationalMaterialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 教材を削除 - 必要権限: [MATERIAL_EDIT] - 論理削除 - 削除可能データ     - is_deleted=False     - コンテンツタイプ: 教材     - 自組織
     * 教材削除
     */
    async deleteEducationalMaterialRaw(requestParameters: DeleteEducationalMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.contentId === null || requestParameters.contentId === undefined) {
            throw new runtime.RequiredError('contentId','Required parameter requestParameters.contentId was null or undefined when calling deleteEducationalMaterial.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/educational-materials/{content_id}`.replace(`{${"content_id"}}`, encodeURIComponent(String(requestParameters.contentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 教材を削除 - 必要権限: [MATERIAL_EDIT] - 論理削除 - 削除可能データ     - is_deleted=False     - コンテンツタイプ: 教材     - 自組織
     * 教材削除
     */
    async deleteEducationalMaterial(requestParameters: DeleteEducationalMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteEducationalMaterialRaw(requestParameters, initOverrides);
    }

    /**
     * 教材詳細取得 - 必要権限: [MATERIAL_VIEW] - 取得可能データ     - is_deleted=False     - コンテンツタイプ: 教材     - 自組織
     * 教材詳細取得
     */
    async getEducationalMaterialRaw(requestParameters: GetEducationalMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EducationalMaterialDetailOut>> {
        if (requestParameters.contentId === null || requestParameters.contentId === undefined) {
            throw new runtime.RequiredError('contentId','Required parameter requestParameters.contentId was null or undefined when calling getEducationalMaterial.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/educational-materials/{content_id}`.replace(`{${"content_id"}}`, encodeURIComponent(String(requestParameters.contentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EducationalMaterialDetailOutFromJSON(jsonValue));
    }

    /**
     * 教材詳細取得 - 必要権限: [MATERIAL_VIEW] - 取得可能データ     - is_deleted=False     - コンテンツタイプ: 教材     - 自組織
     * 教材詳細取得
     */
    async getEducationalMaterial(requestParameters: GetEducationalMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EducationalMaterialDetailOut> {
        const response = await this.getEducationalMaterialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * イベント用教材詳細取得 - 必要権限: [MATERIAL_VIEW] - 取得可能データ     - is_deleted=False     - コンテンツタイプ: 教材     - 自組織または`is_shared_between_schools=True`の教材
     * イベント用教材詳細取得
     */
    async getEducationalMaterialForEventRaw(requestParameters: GetEducationalMaterialForEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EducationalMaterialDetailOut>> {
        if (requestParameters.contentId === null || requestParameters.contentId === undefined) {
            throw new runtime.RequiredError('contentId','Required parameter requestParameters.contentId was null or undefined when calling getEducationalMaterialForEvent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/educational-materials/{content_id}/event`.replace(`{${"content_id"}}`, encodeURIComponent(String(requestParameters.contentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EducationalMaterialDetailOutFromJSON(jsonValue));
    }

    /**
     * イベント用教材詳細取得 - 必要権限: [MATERIAL_VIEW] - 取得可能データ     - is_deleted=False     - コンテンツタイプ: 教材     - 自組織または`is_shared_between_schools=True`の教材
     * イベント用教材詳細取得
     */
    async getEducationalMaterialForEvent(requestParameters: GetEducationalMaterialForEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EducationalMaterialDetailOut> {
        const response = await this.getEducationalMaterialForEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 教材一覧取得 - 必要権限: [MATERIAL_VIEW] - 取得可能データ     - is_deleted=False     - コンテンツタイプ: 教材     - 自組織
     * 教材一覧取得
     */
    async getEducationalMaterialListRaw(requestParameters: GetEducationalMaterialListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EducationalMaterialListOut>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.educationalMaterialType !== undefined) {
            queryParameters['educational_material_type'] = requestParameters.educationalMaterialType;
        }

        if (requestParameters.contentCategoryId) {
            queryParameters['content_category_id'] = requestParameters.contentCategoryId;
        }

        if (requestParameters.difficulty) {
            queryParameters['difficulty'] = requestParameters.difficulty;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['order_by'] = requestParameters.orderBy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/educational-materials`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EducationalMaterialListOutFromJSON(jsonValue));
    }

    /**
     * 教材一覧取得 - 必要権限: [MATERIAL_VIEW] - 取得可能データ     - is_deleted=False     - コンテンツタイプ: 教材     - 自組織
     * 教材一覧取得
     */
    async getEducationalMaterialList(requestParameters: GetEducationalMaterialListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EducationalMaterialListOut> {
        const response = await this.getEducationalMaterialListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * イベント用教材一覧取得 - 必要権限: [OWN_SESSION_EDIT, ALL_EVENT_AND_SESSION_EDIT]     - ALL_EVENT_AND_SESSION_EDIT権限を持たない場合は自組織主催のイベントのみ指定可能 - 指定したセッションが存在しない場合NOT_FOUNDエラー - 取得可能データ     - is_deleted=False     - コンテンツタイプ: 教材     - 学校主催のイベントの場合         - イベント主催組織の教材または`is_shared_between_schools=True`の教材     - 学校以外が主催のイベントの場合         - 自組織の教材 - 作成者のレスポンス値について     - 学校主催のイベントの場合         - イベントの主催組織と同じ組織が作成した教材: 教材の作成者         - 上記以外: `共有コンテンツ`(固定値)     - 上記以外         - 教材の作成者
     * イベント用教材一覧取得
     */
    async getEducationalMaterialListForEventRaw(requestParameters: GetEducationalMaterialListForEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EducationalMaterialListForEventOut>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getEducationalMaterialListForEvent.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.tags) {
            queryParameters['tags'] = requestParameters.tags;
        }

        if (requestParameters.educationalMaterialType) {
            queryParameters['educational_material_type'] = requestParameters.educationalMaterialType;
        }

        if (requestParameters.contentCategoryIds) {
            queryParameters['content_category_ids'] = requestParameters.contentCategoryIds;
        }

        if (requestParameters.difficulties) {
            queryParameters['difficulties'] = requestParameters.difficulties;
        }

        if (requestParameters.isOfficial !== undefined) {
            queryParameters['is_official'] = requestParameters.isOfficial;
        }

        if (requestParameters.createdBy) {
            queryParameters['created_by'] = requestParameters.createdBy;
        }

        if (requestParameters.isSharedBetweenSchools !== undefined) {
            queryParameters['is_shared_between_schools'] = requestParameters.isSharedBetweenSchools;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['order_by'] = requestParameters.orderBy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/educational-materials/event/{session_id}`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EducationalMaterialListForEventOutFromJSON(jsonValue));
    }

    /**
     * イベント用教材一覧取得 - 必要権限: [OWN_SESSION_EDIT, ALL_EVENT_AND_SESSION_EDIT]     - ALL_EVENT_AND_SESSION_EDIT権限を持たない場合は自組織主催のイベントのみ指定可能 - 指定したセッションが存在しない場合NOT_FOUNDエラー - 取得可能データ     - is_deleted=False     - コンテンツタイプ: 教材     - 学校主催のイベントの場合         - イベント主催組織の教材または`is_shared_between_schools=True`の教材     - 学校以外が主催のイベントの場合         - 自組織の教材 - 作成者のレスポンス値について     - 学校主催のイベントの場合         - イベントの主催組織と同じ組織が作成した教材: 教材の作成者         - 上記以外: `共有コンテンツ`(固定値)     - 上記以外         - 教材の作成者
     * イベント用教材一覧取得
     */
    async getEducationalMaterialListForEvent(requestParameters: GetEducationalMaterialListForEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EducationalMaterialListForEventOut> {
        const response = await this.getEducationalMaterialListForEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 教材更新 - 必要権限: [MATERIAL_EDIT] - \"他の学校アカウントに共有\":学校アカウントのみ変更可能 - 自組織に指定したコンテンツタグがない場合は作成し、すでにある場合はあるものを取得して紐付ける - updated_by: last_name + first_name
     * 教材更新
     */
    async updateEducationalMaterialRaw(requestParameters: UpdateEducationalMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EducationalMaterialDetailOut>> {
        if (requestParameters.contentId === null || requestParameters.contentId === undefined) {
            throw new runtime.RequiredError('contentId','Required parameter requestParameters.contentId was null or undefined when calling updateEducationalMaterial.');
        }

        if (requestParameters.educationalMaterialUpdateIn === null || requestParameters.educationalMaterialUpdateIn === undefined) {
            throw new runtime.RequiredError('educationalMaterialUpdateIn','Required parameter requestParameters.educationalMaterialUpdateIn was null or undefined when calling updateEducationalMaterial.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/educational-materials/{content_id}`.replace(`{${"content_id"}}`, encodeURIComponent(String(requestParameters.contentId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EducationalMaterialUpdateInToJSON(requestParameters.educationalMaterialUpdateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EducationalMaterialDetailOutFromJSON(jsonValue));
    }

    /**
     * 教材更新 - 必要権限: [MATERIAL_EDIT] - \"他の学校アカウントに共有\":学校アカウントのみ変更可能 - 自組織に指定したコンテンツタグがない場合は作成し、すでにある場合はあるものを取得して紐付ける - updated_by: last_name + first_name
     * 教材更新
     */
    async updateEducationalMaterial(requestParameters: UpdateEducationalMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EducationalMaterialDetailOut> {
        const response = await this.updateEducationalMaterialRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
