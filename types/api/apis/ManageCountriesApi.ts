/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  CountryCreateIn,
  CountryDetailOut,
  CountryListOut,
  CountryUpdateIn,
  ValidationError,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    CountryCreateInFromJSON,
    CountryCreateInToJSON,
    CountryDetailOutFromJSON,
    CountryDetailOutToJSON,
    CountryListOutFromJSON,
    CountryListOutToJSON,
    CountryUpdateInFromJSON,
    CountryUpdateInToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface CreateCountryRequest {
    countryCreateIn: CountryCreateIn;
}

export interface DeleteCountryRequest {
    countryId: number;
}

export interface GetCountryRequest {
    countryId: number;
}

export interface UpdateCountryRequest {
    countryId: number;
    countryUpdateIn: CountryUpdateIn;
}

/**
 * 
 */
export class ManageCountriesApi extends runtime.BaseAPI {

    /**
     * 国を作成 - 必要権限: [ASSETS_EDIT]
     * 国作成
     */
    async createCountryRaw(requestParameters: CreateCountryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountryDetailOut>> {
        if (requestParameters.countryCreateIn === null || requestParameters.countryCreateIn === undefined) {
            throw new runtime.RequiredError('countryCreateIn','Required parameter requestParameters.countryCreateIn was null or undefined when calling createCountry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/countries`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CountryCreateInToJSON(requestParameters.countryCreateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountryDetailOutFromJSON(jsonValue));
    }

    /**
     * 国を作成 - 必要権限: [ASSETS_EDIT]
     * 国作成
     */
    async createCountry(requestParameters: CreateCountryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountryDetailOut> {
        const response = await this.createCountryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 国を削除 - 必要権限: [ASSETS_EDIT]
     * 国削除
     */
    async deleteCountryRaw(requestParameters: DeleteCountryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.countryId === null || requestParameters.countryId === undefined) {
            throw new runtime.RequiredError('countryId','Required parameter requestParameters.countryId was null or undefined when calling deleteCountry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/countries/{country_id}`.replace(`{${"country_id"}}`, encodeURIComponent(String(requestParameters.countryId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 国を削除 - 必要権限: [ASSETS_EDIT]
     * 国削除
     */
    async deleteCountry(requestParameters: DeleteCountryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCountryRaw(requestParameters, initOverrides);
    }

    /**
     * 国詳細を取得 - 必要権限: [ASSETS_EDIT]
     * 国詳細取得
     */
    async getCountryRaw(requestParameters: GetCountryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountryDetailOut>> {
        if (requestParameters.countryId === null || requestParameters.countryId === undefined) {
            throw new runtime.RequiredError('countryId','Required parameter requestParameters.countryId was null or undefined when calling getCountry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/countries/{country_id}`.replace(`{${"country_id"}}`, encodeURIComponent(String(requestParameters.countryId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountryDetailOutFromJSON(jsonValue));
    }

    /**
     * 国詳細を取得 - 必要権限: [ASSETS_EDIT]
     * 国詳細取得
     */
    async getCountry(requestParameters: GetCountryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountryDetailOut> {
        const response = await this.getCountryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 国一覧を取得 - 必要権限: [ASSETS_EDIT] - 並び順: id降順
     * 国一覧取得
     */
    async getCountryListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CountryListOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/countries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CountryListOutFromJSON));
    }

    /**
     * 国一覧を取得 - 必要権限: [ASSETS_EDIT] - 並び順: id降順
     * 国一覧取得
     */
    async getCountryList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CountryListOut>> {
        const response = await this.getCountryListRaw(initOverrides);
        return await response.value();
    }

    /**
     * 国を更新 - 必要権限: [ASSETS_EDIT]
     * 国更新
     */
    async updateCountryRaw(requestParameters: UpdateCountryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountryDetailOut>> {
        if (requestParameters.countryId === null || requestParameters.countryId === undefined) {
            throw new runtime.RequiredError('countryId','Required parameter requestParameters.countryId was null or undefined when calling updateCountry.');
        }

        if (requestParameters.countryUpdateIn === null || requestParameters.countryUpdateIn === undefined) {
            throw new runtime.RequiredError('countryUpdateIn','Required parameter requestParameters.countryUpdateIn was null or undefined when calling updateCountry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/countries/{country_id}`.replace(`{${"country_id"}}`, encodeURIComponent(String(requestParameters.countryId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CountryUpdateInToJSON(requestParameters.countryUpdateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountryDetailOutFromJSON(jsonValue));
    }

    /**
     * 国を更新 - 必要権限: [ASSETS_EDIT]
     * 国更新
     */
    async updateCountry(requestParameters: UpdateCountryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountryDetailOut> {
        const response = await this.updateCountryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
