/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  CheckAgreedTermsOut,
  Locale,
  TermCommonDetailOut,
  TermType,
  ValidationError,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    CheckAgreedTermsOutFromJSON,
    CheckAgreedTermsOutToJSON,
    LocaleFromJSON,
    LocaleToJSON,
    TermCommonDetailOutFromJSON,
    TermCommonDetailOutToJSON,
    TermTypeFromJSON,
    TermTypeToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface AgreeUserTermRequest {
    termType: TermType;
}

export interface GetTermCommonRequest {
    termType: TermType;
    locale?: Locale;
}

/**
 * 
 */
export class CommonTermsApi extends runtime.BaseAPI {

    /**
     * 利用規約同意、再同意 指定されたTermTypeで最新の利用規約登録
     * 利用規約同意API(共通)
     */
    async agreeUserTermRaw(requestParameters: AgreeUserTermRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.termType === null || requestParameters.termType === undefined) {
            throw new runtime.RequiredError('termType','Required parameter requestParameters.termType was null or undefined when calling agreeUserTerm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/terms/{term_type}`.replace(`{${"term_type"}}`, encodeURIComponent(String(requestParameters.termType))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * 利用規約同意、再同意 指定されたTermTypeで最新の利用規約登録
     * 利用規約同意API(共通)
     */
    async agreeUserTerm(requestParameters: AgreeUserTermRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.agreeUserTermRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ユーザーが最新の利用規約に同意しているか確認する(共通) - ログインユーザーのUserTypeによって確認するTermTypeを選択する     - UserType.GENERAL         - TermType 1, 2, 3     - UserType.SCHOOL         - TermType 6     - UserType.COMPANY         - TermType 7     - 上記以外のUser_Type         - Trueを返す - レスポンス     - is_agreed_latest_terms(最新の利用規約に同意しているか)     - (同意していない場合)term_type
     * 最新の利用規約に同意しているか確認
     */
    async checkUserAgreedTermsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckAgreedTermsOut>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/terms/check`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckAgreedTermsOutFromJSON(jsonValue));
    }

    /**
     * ユーザーが最新の利用規約に同意しているか確認する(共通) - ログインユーザーのUserTypeによって確認するTermTypeを選択する     - UserType.GENERAL         - TermType 1, 2, 3     - UserType.SCHOOL         - TermType 6     - UserType.COMPANY         - TermType 7     - 上記以外のUser_Type         - Trueを返す - レスポンス     - is_agreed_latest_terms(最新の利用規約に同意しているか)     - (同意していない場合)term_type
     * 最新の利用規約に同意しているか確認
     */
    async checkUserAgreedTerms(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckAgreedTermsOut> {
        const response = await this.checkUserAgreedTermsRaw(initOverrides);
        return await response.value();
    }

    /**
     * 規約詳細情報取得(共通) - 指定されたterm_typeの最新versionを取得する - ロケールによって返却する規約本文(TermCommonDetailOut.content_lc)を切り替える
     * 規約詳細情報取得(共通)
     */
    async getTermCommonRaw(requestParameters: GetTermCommonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TermCommonDetailOut>> {
        if (requestParameters.termType === null || requestParameters.termType === undefined) {
            throw new runtime.RequiredError('termType','Required parameter requestParameters.termType was null or undefined when calling getTermCommon.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.locale !== undefined && requestParameters.locale !== null) {
            headerParameters['locale'] = String(requestParameters.locale);
        }

        const response = await this.request({
            path: `/common/terms/{term_type}`.replace(`{${"term_type"}}`, encodeURIComponent(String(requestParameters.termType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TermCommonDetailOutFromJSON(jsonValue));
    }

    /**
     * 規約詳細情報取得(共通) - 指定されたterm_typeの最新versionを取得する - ロケールによって返却する規約本文(TermCommonDetailOut.content_lc)を切り替える
     * 規約詳細情報取得(共通)
     */
    async getTermCommon(requestParameters: GetTermCommonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TermCommonDetailOut> {
        const response = await this.getTermCommonRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
