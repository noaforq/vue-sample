/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  AppSchemasManageManualsGetPdfManualListOutGetPDFManualListOut,
  CreatePDFManualIn,
  CreatePDFManualOut,
  GetPDFManualDetailOut,
  ValidationError,
  VideoManualCreateIn,
  VideoManualDetailOut,
  VideoManualListOut,
  VideoManualUpdateIn,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    AppSchemasManageManualsGetPdfManualListOutGetPDFManualListOutFromJSON,
    AppSchemasManageManualsGetPdfManualListOutGetPDFManualListOutToJSON,
    CreatePDFManualInFromJSON,
    CreatePDFManualInToJSON,
    CreatePDFManualOutFromJSON,
    CreatePDFManualOutToJSON,
    GetPDFManualDetailOutFromJSON,
    GetPDFManualDetailOutToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
    VideoManualCreateInFromJSON,
    VideoManualCreateInToJSON,
    VideoManualDetailOutFromJSON,
    VideoManualDetailOutToJSON,
    VideoManualListOutFromJSON,
    VideoManualListOutToJSON,
    VideoManualUpdateInFromJSON,
    VideoManualUpdateInToJSON,
} from '../models/index';

export interface CreatePdfManualRequest {
    createPDFManualIn: CreatePDFManualIn;
}

export interface CreateVideoManualRequest {
    videoManualCreateIn: VideoManualCreateIn;
}

export interface DeletePdfManualRequest {
    pdfManualId: number;
}

export interface DeleteVideoManualRequest {
    videoManualId: number;
}

export interface GetManagePdfManualDetailRequest {
    pdfManualId: number;
}

export interface GetManageVideoManualDetailRequest {
    videoManualId: number;
}

export interface UpdatePdfManualRequest {
    pdfManualId: number;
    createPDFManualIn: CreatePDFManualIn;
}

export interface UpdateVideoManualRequest {
    videoManualId: number;
    videoManualUpdateIn: VideoManualUpdateIn;
}

/**
 * 
 */
export class ManageManualsApi extends runtime.BaseAPI {

    /**
     * PDFマニュアル作成 - 必要権限: [ASSETS_EDIT] - 処理手順:     - ManualPDFを作成
     * PDFマニュアル作成
     */
    async createPdfManualRaw(requestParameters: CreatePdfManualRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatePDFManualOut>> {
        if (requestParameters.createPDFManualIn === null || requestParameters.createPDFManualIn === undefined) {
            throw new runtime.RequiredError('createPDFManualIn','Required parameter requestParameters.createPDFManualIn was null or undefined when calling createPdfManual.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/manuals/pdf-manuals`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePDFManualInToJSON(requestParameters.createPDFManualIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatePDFManualOutFromJSON(jsonValue));
    }

    /**
     * PDFマニュアル作成 - 必要権限: [ASSETS_EDIT] - 処理手順:     - ManualPDFを作成
     * PDFマニュアル作成
     */
    async createPdfManual(requestParameters: CreatePdfManualRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatePDFManualOut> {
        const response = await this.createPdfManualRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 動画マニュアル作成 - 必要権限: [ASSETS_EDIT]
     * 動画マニュアル作成
     */
    async createVideoManualRaw(requestParameters: CreateVideoManualRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.videoManualCreateIn === null || requestParameters.videoManualCreateIn === undefined) {
            throw new runtime.RequiredError('videoManualCreateIn','Required parameter requestParameters.videoManualCreateIn was null or undefined when calling createVideoManual.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/manuals/video-manuals`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VideoManualCreateInToJSON(requestParameters.videoManualCreateIn),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * 動画マニュアル作成 - 必要権限: [ASSETS_EDIT]
     * 動画マニュアル作成
     */
    async createVideoManual(requestParameters: CreateVideoManualRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.createVideoManualRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PDFマニュアル削除 - 必要権限: [ASSETS_EDIT] - データ取得可能条件: pdf_manual_idが存在すること
     * PDFマニュアル削除
     */
    async deletePdfManualRaw(requestParameters: DeletePdfManualRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.pdfManualId === null || requestParameters.pdfManualId === undefined) {
            throw new runtime.RequiredError('pdfManualId','Required parameter requestParameters.pdfManualId was null or undefined when calling deletePdfManual.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/manuals/pdf-manuals/{pdf_manual_id}`.replace(`{${"pdf_manual_id"}}`, encodeURIComponent(String(requestParameters.pdfManualId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * PDFマニュアル削除 - 必要権限: [ASSETS_EDIT] - データ取得可能条件: pdf_manual_idが存在すること
     * PDFマニュアル削除
     */
    async deletePdfManual(requestParameters: DeletePdfManualRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePdfManualRaw(requestParameters, initOverrides);
    }

    /**
     * 動画マニュアル削除 - 必要権限: [ASSETS_EDIT]
     * 動画マニュアル削除
     */
    async deleteVideoManualRaw(requestParameters: DeleteVideoManualRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.videoManualId === null || requestParameters.videoManualId === undefined) {
            throw new runtime.RequiredError('videoManualId','Required parameter requestParameters.videoManualId was null or undefined when calling deleteVideoManual.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/manuals/video-manuals/{video_manual_id}`.replace(`{${"video_manual_id"}}`, encodeURIComponent(String(requestParameters.videoManualId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 動画マニュアル削除 - 必要権限: [ASSETS_EDIT]
     * 動画マニュアル削除
     */
    async deleteVideoManual(requestParameters: DeleteVideoManualRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteVideoManualRaw(requestParameters, initOverrides);
    }

    /**
     * 動画マニュアル詳細取得 - 必要権限: [ASSETS_VIEW] -　データ取得可能条件:     - pdf_manual_idでManualPDFを特定できること
     * PDFマニュアル詳細取得
     */
    async getManagePdfManualDetailRaw(requestParameters: GetManagePdfManualDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPDFManualDetailOut>> {
        if (requestParameters.pdfManualId === null || requestParameters.pdfManualId === undefined) {
            throw new runtime.RequiredError('pdfManualId','Required parameter requestParameters.pdfManualId was null or undefined when calling getManagePdfManualDetail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/manuals/pdf-manuals/{pdf_manual_id}`.replace(`{${"pdf_manual_id"}}`, encodeURIComponent(String(requestParameters.pdfManualId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPDFManualDetailOutFromJSON(jsonValue));
    }

    /**
     * 動画マニュアル詳細取得 - 必要権限: [ASSETS_VIEW] -　データ取得可能条件:     - pdf_manual_idでManualPDFを特定できること
     * PDFマニュアル詳細取得
     */
    async getManagePdfManualDetail(requestParameters: GetManagePdfManualDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPDFManualDetailOut> {
        const response = await this.getManagePdfManualDetailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PDFマニュアル一覧取得 - 必要権限: [ASSETS_VIEW] - 並び順: 作成日時降順
     * PDFマニュアル一覧取得
     */
    async getManagePdfManualListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AppSchemasManageManualsGetPdfManualListOutGetPDFManualListOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/manuals/pdf-manuals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AppSchemasManageManualsGetPdfManualListOutGetPDFManualListOutFromJSON));
    }

    /**
     * PDFマニュアル一覧取得 - 必要権限: [ASSETS_VIEW] - 並び順: 作成日時降順
     * PDFマニュアル一覧取得
     */
    async getManagePdfManualList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AppSchemasManageManualsGetPdfManualListOutGetPDFManualListOut>> {
        const response = await this.getManagePdfManualListRaw(initOverrides);
        return await response.value();
    }

    /**
     * 動画マニュアル詳細取得 - 必要権限: [ASSETS_EDIT, ASSETS_VIEW]
     * 動画マニュアル詳細取得
     */
    async getManageVideoManualDetailRaw(requestParameters: GetManageVideoManualDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VideoManualDetailOut>> {
        if (requestParameters.videoManualId === null || requestParameters.videoManualId === undefined) {
            throw new runtime.RequiredError('videoManualId','Required parameter requestParameters.videoManualId was null or undefined when calling getManageVideoManualDetail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/manuals/video-manuals/{video_manual_id}`.replace(`{${"video_manual_id"}}`, encodeURIComponent(String(requestParameters.videoManualId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VideoManualDetailOutFromJSON(jsonValue));
    }

    /**
     * 動画マニュアル詳細取得 - 必要権限: [ASSETS_EDIT, ASSETS_VIEW]
     * 動画マニュアル詳細取得
     */
    async getManageVideoManualDetail(requestParameters: GetManageVideoManualDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VideoManualDetailOut> {
        const response = await this.getManageVideoManualDetailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 動画マニュアル一覧取得 - 必要権限: [ASSETS_EDIT, ASSETS_VIEW] - 並び順: id降順
     * 動画マニュアル一覧取得
     */
    async getVideoManualsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VideoManualListOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/manuals/video-manuals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VideoManualListOutFromJSON));
    }

    /**
     * 動画マニュアル一覧取得 - 必要権限: [ASSETS_EDIT, ASSETS_VIEW] - 並び順: id降順
     * 動画マニュアル一覧取得
     */
    async getVideoManualsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VideoManualListOut>> {
        const response = await this.getVideoManualsListRaw(initOverrides);
        return await response.value();
    }

    /**
     * PDFマニュアル更新 - 必要権限: [ASSETS_EDIT] - 処理手順:     - pdf_manual_idで該当レコード特定     - データを更新する (formとresponseは作成と同じものですので、共通化になる)
     * PDFマニュアル更新
     */
    async updatePdfManualRaw(requestParameters: UpdatePdfManualRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatePDFManualOut>> {
        if (requestParameters.pdfManualId === null || requestParameters.pdfManualId === undefined) {
            throw new runtime.RequiredError('pdfManualId','Required parameter requestParameters.pdfManualId was null or undefined when calling updatePdfManual.');
        }

        if (requestParameters.createPDFManualIn === null || requestParameters.createPDFManualIn === undefined) {
            throw new runtime.RequiredError('createPDFManualIn','Required parameter requestParameters.createPDFManualIn was null or undefined when calling updatePdfManual.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/manuals/pdf-manuals/{pdf_manual_id}`.replace(`{${"pdf_manual_id"}}`, encodeURIComponent(String(requestParameters.pdfManualId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePDFManualInToJSON(requestParameters.createPDFManualIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatePDFManualOutFromJSON(jsonValue));
    }

    /**
     * PDFマニュアル更新 - 必要権限: [ASSETS_EDIT] - 処理手順:     - pdf_manual_idで該当レコード特定     - データを更新する (formとresponseは作成と同じものですので、共通化になる)
     * PDFマニュアル更新
     */
    async updatePdfManual(requestParameters: UpdatePdfManualRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatePDFManualOut> {
        const response = await this.updatePdfManualRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 動画マニュアル更新 - 必要権限: [ASSETS_EDIT]
     * 動画マニュアル更新
     */
    async updateVideoManualRaw(requestParameters: UpdateVideoManualRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.videoManualId === null || requestParameters.videoManualId === undefined) {
            throw new runtime.RequiredError('videoManualId','Required parameter requestParameters.videoManualId was null or undefined when calling updateVideoManual.');
        }

        if (requestParameters.videoManualUpdateIn === null || requestParameters.videoManualUpdateIn === undefined) {
            throw new runtime.RequiredError('videoManualUpdateIn','Required parameter requestParameters.videoManualUpdateIn was null or undefined when calling updateVideoManual.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/manuals/video-manuals/{video_manual_id}`.replace(`{${"video_manual_id"}}`, encodeURIComponent(String(requestParameters.videoManualId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VideoManualUpdateInToJSON(requestParameters.videoManualUpdateIn),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * 動画マニュアル更新 - 必要権限: [ASSETS_EDIT]
     * 動画マニュアル更新
     */
    async updateVideoManual(requestParameters: UpdateVideoManualRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updateVideoManualRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
