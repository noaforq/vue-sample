/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  AppSchemasManageInformationInformationDetailOutInformationDetailOut,
  InformationCreateIn,
  InformationListOut,
  InformationUpdateIn,
  ValidationError,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    AppSchemasManageInformationInformationDetailOutInformationDetailOutFromJSON,
    AppSchemasManageInformationInformationDetailOutInformationDetailOutToJSON,
    InformationCreateInFromJSON,
    InformationCreateInToJSON,
    InformationListOutFromJSON,
    InformationListOutToJSON,
    InformationUpdateInFromJSON,
    InformationUpdateInToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface CreateInformationRequest {
    informationCreateIn: InformationCreateIn;
}

export interface DeleteInformationRequest {
    informationId: number;
}

export interface GetInformationRequest {
    informationId: number;
}

export interface UpdateInformationRequest {
    informationId: number;
    informationUpdateIn: InformationUpdateIn;
}

/**
 * 
 */
export class ManageInformationApi extends runtime.BaseAPI {

    /**
     * インフォを作成 - 必要権限: [INFORMATION_EDIT] - 登録データ補足情報     - created_by: last_name + first_name
     * インフォ作成
     */
    async createInformationRaw(requestParameters: CreateInformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSchemasManageInformationInformationDetailOutInformationDetailOut>> {
        if (requestParameters.informationCreateIn === null || requestParameters.informationCreateIn === undefined) {
            throw new runtime.RequiredError('informationCreateIn','Required parameter requestParameters.informationCreateIn was null or undefined when calling createInformation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/information`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InformationCreateInToJSON(requestParameters.informationCreateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppSchemasManageInformationInformationDetailOutInformationDetailOutFromJSON(jsonValue));
    }

    /**
     * インフォを作成 - 必要権限: [INFORMATION_EDIT] - 登録データ補足情報     - created_by: last_name + first_name
     * インフォ作成
     */
    async createInformation(requestParameters: CreateInformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSchemasManageInformationInformationDetailOutInformationDetailOut> {
        const response = await this.createInformationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * インフォを削除 - 必要権限: [INFORMATION_EDIT]
     * インフォ削除
     */
    async deleteInformationRaw(requestParameters: DeleteInformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.informationId === null || requestParameters.informationId === undefined) {
            throw new runtime.RequiredError('informationId','Required parameter requestParameters.informationId was null or undefined when calling deleteInformation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/information/{information_id}`.replace(`{${"information_id"}}`, encodeURIComponent(String(requestParameters.informationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * インフォを削除 - 必要権限: [INFORMATION_EDIT]
     * インフォ削除
     */
    async deleteInformation(requestParameters: DeleteInformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteInformationRaw(requestParameters, initOverrides);
    }

    /**
     * インフォ詳細を取得 - 必要権限: [INFORMATION_VIEW]
     * インフォ詳細取得
     */
    async getInformationRaw(requestParameters: GetInformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSchemasManageInformationInformationDetailOutInformationDetailOut>> {
        if (requestParameters.informationId === null || requestParameters.informationId === undefined) {
            throw new runtime.RequiredError('informationId','Required parameter requestParameters.informationId was null or undefined when calling getInformation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/information/{information_id}`.replace(`{${"information_id"}}`, encodeURIComponent(String(requestParameters.informationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppSchemasManageInformationInformationDetailOutInformationDetailOutFromJSON(jsonValue));
    }

    /**
     * インフォ詳細を取得 - 必要権限: [INFORMATION_VIEW]
     * インフォ詳細取得
     */
    async getInformation(requestParameters: GetInformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSchemasManageInformationInformationDetailOutInformationDetailOut> {
        const response = await this.getInformationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * インフォ一覧を取得 - 必要権限: [INFORMATION_VIEW] - 並び順: id降順
     * インフォ一覧取得
     */
    async getInformationListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InformationListOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/information`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InformationListOutFromJSON));
    }

    /**
     * インフォ一覧を取得 - 必要権限: [INFORMATION_VIEW] - 並び順: id降順
     * インフォ一覧取得
     */
    async getInformationList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InformationListOut>> {
        const response = await this.getInformationListRaw(initOverrides);
        return await response.value();
    }

    /**
     * インフォを更新 - 必要権限: [INFORMATION_EDIT] - 登録データ補足情報     - updated_by: last_name + first_name
     * インフォ更新
     */
    async updateInformationRaw(requestParameters: UpdateInformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSchemasManageInformationInformationDetailOutInformationDetailOut>> {
        if (requestParameters.informationId === null || requestParameters.informationId === undefined) {
            throw new runtime.RequiredError('informationId','Required parameter requestParameters.informationId was null or undefined when calling updateInformation.');
        }

        if (requestParameters.informationUpdateIn === null || requestParameters.informationUpdateIn === undefined) {
            throw new runtime.RequiredError('informationUpdateIn','Required parameter requestParameters.informationUpdateIn was null or undefined when calling updateInformation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/information/{information_id}`.replace(`{${"information_id"}}`, encodeURIComponent(String(requestParameters.informationId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: InformationUpdateInToJSON(requestParameters.informationUpdateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppSchemasManageInformationInformationDetailOutInformationDetailOutFromJSON(jsonValue));
    }

    /**
     * インフォを更新 - 必要権限: [INFORMATION_EDIT] - 登録データ補足情報     - updated_by: last_name + first_name
     * インフォ更新
     */
    async updateInformation(requestParameters: UpdateInformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSchemasManageInformationInformationDetailOutInformationDetailOut> {
        const response = await this.updateInformationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
