/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  AppRoutersCommonManualsGetPdfManualListManualTargetType,
  AppRoutersCommonManualsGetVideoManualListManualTargetType,
  FaqTargetType,
  GetFaqOut,
  GetPDFManualOut,
  GetVideoManualListOut,
  ValidationError,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    AppRoutersCommonManualsGetPdfManualListManualTargetTypeFromJSON,
    AppRoutersCommonManualsGetPdfManualListManualTargetTypeToJSON,
    AppRoutersCommonManualsGetVideoManualListManualTargetTypeFromJSON,
    AppRoutersCommonManualsGetVideoManualListManualTargetTypeToJSON,
    FaqTargetTypeFromJSON,
    FaqTargetTypeToJSON,
    GetFaqOutFromJSON,
    GetFaqOutToJSON,
    GetPDFManualOutFromJSON,
    GetPDFManualOutToJSON,
    GetVideoManualListOutFromJSON,
    GetVideoManualListOutToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface GetPdfManualListRequest {
    target: AppRoutersCommonManualsGetPdfManualListManualTargetType;
}

export interface GetUserFaqListRequest {
    target: FaqTargetType;
}

export interface GetVideoManualListRequest {
    target: AppRoutersCommonManualsGetVideoManualListManualTargetType;
}

/**
 * 
 */
export class CommonManualsApi extends runtime.BaseAPI {

    /**
     * PDFマニュアル一覧を取得 - 並び順: ManualPDF.order昇順 - 処理手順     - user.user_typeで一般ユーザー、学校ユーザー、企業ユーザーを判定し、target_audience_typeを確定（その他は取得不可、ParameterError）     - ManualPDF.target_audience_typeでマニュアル特定(is_integrated=Falseのを取得)
     * PDFマニュアル取得
     */
    async getPdfManualListRaw(requestParameters: GetPdfManualListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPDFManualOut>> {
        if (requestParameters.target === null || requestParameters.target === undefined) {
            throw new runtime.RequiredError('target','Required parameter requestParameters.target was null or undefined when calling getPdfManualList.');
        }

        const queryParameters: any = {};

        if (requestParameters.target !== undefined) {
            queryParameters['target'] = requestParameters.target;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/manuals/pdf-manuals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPDFManualOutFromJSON(jsonValue));
    }

    /**
     * PDFマニュアル一覧を取得 - 並び順: ManualPDF.order昇順 - 処理手順     - user.user_typeで一般ユーザー、学校ユーザー、企業ユーザーを判定し、target_audience_typeを確定（その他は取得不可、ParameterError）     - ManualPDF.target_audience_typeでマニュアル特定(is_integrated=Falseのを取得)
     * PDFマニュアル取得
     */
    async getPdfManualList(requestParameters: GetPdfManualListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPDFManualOut> {
        const response = await this.getPdfManualListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * よくある質問を取得 - 並び順:     - カテゴリ: FaqCategory.value 昇順     - FAQ: ID昇順 - 処理手順     - query parameterでtarget_typeを受け取る     - 該当category, faqを取得
     * よくある質問取得
     */
    async getUserFaqListRaw(requestParameters: GetUserFaqListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetFaqOut>>> {
        if (requestParameters.target === null || requestParameters.target === undefined) {
            throw new runtime.RequiredError('target','Required parameter requestParameters.target was null or undefined when calling getUserFaqList.');
        }

        const queryParameters: any = {};

        if (requestParameters.target !== undefined) {
            queryParameters['target'] = requestParameters.target;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/manuals/faqs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetFaqOutFromJSON));
    }

    /**
     * よくある質問を取得 - 並び順:     - カテゴリ: FaqCategory.value 昇順     - FAQ: ID昇順 - 処理手順     - query parameterでtarget_typeを受け取る     - 該当category, faqを取得
     * よくある質問取得
     */
    async getUserFaqList(requestParameters: GetUserFaqListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetFaqOut>> {
        const response = await this.getUserFaqListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ビデオマニュアル一覧を取得 - 並び順: ManualVideo.orderの昇順 - 処理内容     - targetよりManualVideo.target_audience_typeと一致するビデオマニュアルを取得         - 一般ユーザー or 学校ユーザー or 企業ユーザー - 例外処理     - ParameterError
     * ビデオマニュアル取得
     */
    async getVideoManualListRaw(requestParameters: GetVideoManualListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetVideoManualListOut>>> {
        if (requestParameters.target === null || requestParameters.target === undefined) {
            throw new runtime.RequiredError('target','Required parameter requestParameters.target was null or undefined when calling getVideoManualList.');
        }

        const queryParameters: any = {};

        if (requestParameters.target !== undefined) {
            queryParameters['target'] = requestParameters.target;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/manuals/video-manuals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetVideoManualListOutFromJSON));
    }

    /**
     * ビデオマニュアル一覧を取得 - 並び順: ManualVideo.orderの昇順 - 処理内容     - targetよりManualVideo.target_audience_typeと一致するビデオマニュアルを取得         - 一般ユーザー or 学校ユーザー or 企業ユーザー - 例外処理     - ParameterError
     * ビデオマニュアル取得
     */
    async getVideoManualList(requestParameters: GetVideoManualListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetVideoManualListOut>> {
        const response = await this.getVideoManualListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
