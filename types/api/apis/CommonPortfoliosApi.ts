/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  PortfolioDetailOut,
  ProgrammingProblemCategoryStat,
  TechthonTopicStat,
  UserAnswerPreferenceOut,
  ValidationError,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    PortfolioDetailOutFromJSON,
    PortfolioDetailOutToJSON,
    ProgrammingProblemCategoryStatFromJSON,
    ProgrammingProblemCategoryStatToJSON,
    TechthonTopicStatFromJSON,
    TechthonTopicStatToJSON,
    UserAnswerPreferenceOutFromJSON,
    UserAnswerPreferenceOutToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface GetPortfolioHeatmapRequest {
    userId: number;
    expiresAt?: number;
    httpMethod?: string;
    token?: string;
}

export interface GetPortfolioPreferenceRequest {
    userId: number;
    expiresAt?: number;
    httpMethod?: string;
    token?: string;
}

export interface GetPortfolioTechthonHeatmapRequest {
    userId: number;
    expiresAt?: number;
    httpMethod?: string;
    token?: string;
}

export interface GetPortfoliosRequest {
    userId: number;
    expiresAt?: number;
    httpMethod?: string;
    token?: string;
}

/**
 * 
 */
export class CommonPortfoliosApi extends runtime.BaseAPI {

    /**
     * ヒートマップを取得する - 必要権限:     - PORTFOLIO_VIEW     - GENERAL_USER     - TOKEN_GUEST
     * ヒートマップを取得する
     */
    async getPortfolioHeatmapRaw(requestParameters: GetPortfolioHeatmapRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProgrammingProblemCategoryStat>>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getPortfolioHeatmap.');
        }

        const queryParameters: any = {};

        if (requestParameters.expiresAt !== undefined) {
            queryParameters['expires_at'] = requestParameters.expiresAt;
        }

        if (requestParameters.httpMethod !== undefined) {
            queryParameters['http_method'] = requestParameters.httpMethod;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/portfolios/users/{user_id}/question-result-heatmap`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProgrammingProblemCategoryStatFromJSON));
    }

    /**
     * ヒートマップを取得する - 必要権限:     - PORTFOLIO_VIEW     - GENERAL_USER     - TOKEN_GUEST
     * ヒートマップを取得する
     */
    async getPortfolioHeatmap(requestParameters: GetPortfolioHeatmapRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProgrammingProblemCategoryStat>> {
        const response = await this.getPortfolioHeatmapRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 回答傾向を取得 - 必要権限:     - PORTFOLIO_VIEW     - GENERAL_USER     - TOKEN_GUEST
     * 回答傾向を取得する
     */
    async getPortfolioPreferenceRaw(requestParameters: GetPortfolioPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserAnswerPreferenceOut>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getPortfolioPreference.');
        }

        const queryParameters: any = {};

        if (requestParameters.expiresAt !== undefined) {
            queryParameters['expires_at'] = requestParameters.expiresAt;
        }

        if (requestParameters.httpMethod !== undefined) {
            queryParameters['http_method'] = requestParameters.httpMethod;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/portfolios/users/{user_id}/answer-preference`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserAnswerPreferenceOutFromJSON(jsonValue));
    }

    /**
     * 回答傾向を取得 - 必要権限:     - PORTFOLIO_VIEW     - GENERAL_USER     - TOKEN_GUEST
     * 回答傾向を取得する
     */
    async getPortfolioPreference(requestParameters: GetPortfolioPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserAnswerPreferenceOut> {
        const response = await this.getPortfolioPreferenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Techthon成績を取得する
     */
    async getPortfolioTechthonHeatmapRaw(requestParameters: GetPortfolioTechthonHeatmapRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TechthonTopicStat>>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getPortfolioTechthonHeatmap.');
        }

        const queryParameters: any = {};

        if (requestParameters.expiresAt !== undefined) {
            queryParameters['expires_at'] = requestParameters.expiresAt;
        }

        if (requestParameters.httpMethod !== undefined) {
            queryParameters['http_method'] = requestParameters.httpMethod;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/portfolios/users/{user_id}/techthon-heatmap`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TechthonTopicStatFromJSON));
    }

    /**
     * Techthon成績を取得する
     */
    async getPortfolioTechthonHeatmap(requestParameters: GetPortfolioTechthonHeatmapRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TechthonTopicStat>> {
        const response = await this.getPortfolioTechthonHeatmapRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ポートフォリオのユーザー情報表示、希望条件、ユーザーPRを取得 - 必要権限: [PORTFOLIO_VIEW, GENERAL_USER] - 取得可能条件   - User.is_deleted == False - 実行処理   - スカウト承諾済フラグにスカウト承諾済かどうかをDB取得して設定(フロントエンドで表示を出し分ける項目あり)   - 学校名／会社名: 現在の職業が学生の場合は学校名を、学生以外の場合は会社名を設定   - 学部名／部門・所属・役職: 現在の職業が学生の場合は学部名を、学生以外の場合は部門・所属・役職を設定
     * ポートフォリオを取得
     */
    async getPortfoliosRaw(requestParameters: GetPortfoliosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PortfolioDetailOut>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getPortfolios.');
        }

        const queryParameters: any = {};

        if (requestParameters.expiresAt !== undefined) {
            queryParameters['expires_at'] = requestParameters.expiresAt;
        }

        if (requestParameters.httpMethod !== undefined) {
            queryParameters['http_method'] = requestParameters.httpMethod;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/portfolios/users/{user_id}/portfolio`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PortfolioDetailOutFromJSON(jsonValue));
    }

    /**
     * ポートフォリオのユーザー情報表示、希望条件、ユーザーPRを取得 - 必要権限: [PORTFOLIO_VIEW, GENERAL_USER] - 取得可能条件   - User.is_deleted == False - 実行処理   - スカウト承諾済フラグにスカウト承諾済かどうかをDB取得して設定(フロントエンドで表示を出し分ける項目あり)   - 学校名／会社名: 現在の職業が学生の場合は学校名を、学生以外の場合は会社名を設定   - 学部名／部門・所属・役職: 現在の職業が学生の場合は学部名を、学生以外の場合は部門・所属・役職を設定
     * ポートフォリオを取得
     */
    async getPortfolios(requestParameters: GetPortfoliosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PortfolioDetailOut> {
        const response = await this.getPortfoliosRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
