/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ALLEventUserListOut,
  ApiError,
  AppRoutersManageEventsGetEventListOrdering,
  EventCreateIn,
  EventDetailOut,
  EventFilter,
  EventListOut,
  EventPortfolioOut,
  EventSponsorListOut,
  EventThreadCreateIn,
  EventThreadDetailOut,
  EventThreadListOut,
  EventUpdateIn,
  GetEventUserRankingOut,
  GetEventUsersListOut,
  OwnEventCreateIn,
  OwnEventListOut,
  ValidationError,
} from '../models/index';
import {
    ALLEventUserListOutFromJSON,
    ALLEventUserListOutToJSON,
    ApiErrorFromJSON,
    ApiErrorToJSON,
    AppRoutersManageEventsGetEventListOrderingFromJSON,
    AppRoutersManageEventsGetEventListOrderingToJSON,
    EventCreateInFromJSON,
    EventCreateInToJSON,
    EventDetailOutFromJSON,
    EventDetailOutToJSON,
    EventFilterFromJSON,
    EventFilterToJSON,
    EventListOutFromJSON,
    EventListOutToJSON,
    EventPortfolioOutFromJSON,
    EventPortfolioOutToJSON,
    EventSponsorListOutFromJSON,
    EventSponsorListOutToJSON,
    EventThreadCreateInFromJSON,
    EventThreadCreateInToJSON,
    EventThreadDetailOutFromJSON,
    EventThreadDetailOutToJSON,
    EventThreadListOutFromJSON,
    EventThreadListOutToJSON,
    EventUpdateInFromJSON,
    EventUpdateInToJSON,
    GetEventUserRankingOutFromJSON,
    GetEventUserRankingOutToJSON,
    GetEventUsersListOutFromJSON,
    GetEventUsersListOutToJSON,
    OwnEventCreateInFromJSON,
    OwnEventCreateInToJSON,
    OwnEventListOutFromJSON,
    OwnEventListOutToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface CreateEventRequest {
    eventCreateIn: EventCreateIn;
}

export interface CreateEventThreadRequest {
    eventId: number;
    eventThreadCreateIn: EventThreadCreateIn;
}

export interface CreateOwnEventRequest {
    ownEventCreateIn: OwnEventCreateIn;
}

export interface DeleteEventRequest {
    eventId: number;
}

export interface DeleteEventThreadRequest {
    eventId: number;
    threadId: number;
}

export interface GetAllEventPortfolioRequest {
    userId: number;
}

export interface GetCompanyEventListRequest {
    limit?: number;
    offset?: number;
    eventFilter?: EventFilter;
    search?: string;
}

export interface GetEventRequest {
    eventId: number;
}

export interface GetEventListRequest {
    limit?: number;
    offset?: number;
    search?: string;
    organizationId?: number;
    orderBy?: AppRoutersManageEventsGetEventListOrdering;
}

export interface GetEventPortfolioRequest {
    userId: number;
    eventId?: number;
}

export interface GetEventSponsorListRequest {
    eventId: number;
}

export interface GetEventThreadListRequest {
    eventId: number;
}

export interface GetEventUserRankingRequest {
    eventId: number;
}

export interface GetEventUserScoreStatsCsvRequest {
    eventId: number;
}

export interface GetEventUsersListRequest {
    eventId: number;
}

export interface RegisterEventSponsorRequest {
    eventId: number;
    organizationId: number;
}

export interface UnregisterEventSponsorRequest {
    eventId: number;
    organizationId: number;
}

export interface UpdateEventRequest {
    eventId: number;
    eventUpdateIn: EventUpdateIn;
}

/**
 * 
 */
export class ManageEventsApi extends runtime.BaseAPI {

    /**
     * 全組織イベントを作成 - 必要権限: [ALL_EVENT_AND_SESSION_EDIT] [OWN_EVENT_EDIT] - 登録データ補足情報     - `host.is_444=True`の場合         - event_purpose: プログラミングコンテスト, 試験、テスト, 講義、教育用, スキルチェック, 検定試験, 検証用, TCB から選択可能         - is_public: True, Falseどちらも設定可能     - `host.organization_type=OrganizationType.COMPANY`の場合         - event_purpose: スキルチェック のみ選択可能         - is_public: False     - `host.organization_type=OrganizationType.SCHOOL`の場合         - event_purpose: プログラミングコンテスト, 試験、テスト, 講義、教育用, 検定試験, その他 から選択可能         - is_public: False
     * 全組織イベント作成
     */
    async createEventRaw(requestParameters: CreateEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventDetailOut>> {
        if (requestParameters.eventCreateIn === null || requestParameters.eventCreateIn === undefined) {
            throw new runtime.RequiredError('eventCreateIn','Required parameter requestParameters.eventCreateIn was null or undefined when calling createEvent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/events`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EventCreateInToJSON(requestParameters.eventCreateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventDetailOutFromJSON(jsonValue));
    }

    /**
     * 全組織イベントを作成 - 必要権限: [ALL_EVENT_AND_SESSION_EDIT] [OWN_EVENT_EDIT] - 登録データ補足情報     - `host.is_444=True`の場合         - event_purpose: プログラミングコンテスト, 試験、テスト, 講義、教育用, スキルチェック, 検定試験, 検証用, TCB から選択可能         - is_public: True, Falseどちらも設定可能     - `host.organization_type=OrganizationType.COMPANY`の場合         - event_purpose: スキルチェック のみ選択可能         - is_public: False     - `host.organization_type=OrganizationType.SCHOOL`の場合         - event_purpose: プログラミングコンテスト, 試験、テスト, 講義、教育用, 検定試験, その他 から選択可能         - is_public: False
     * 全組織イベント作成
     */
    async createEvent(requestParameters: CreateEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventDetailOut> {
        const response = await this.createEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * イベントスレッド作成 - 必要権限: [OWN_EVENT_EDIT] - 並び順:ID降順 - 実行条件     - EventThread.is_deleted=Falseのみ取得     - event_idのイベントが削除済み、存在しない場合NotFound
     * イベントスレッド作成
     */
    async createEventThreadRaw(requestParameters: CreateEventThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventThreadDetailOut>> {
        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling createEventThread.');
        }

        if (requestParameters.eventThreadCreateIn === null || requestParameters.eventThreadCreateIn === undefined) {
            throw new runtime.RequiredError('eventThreadCreateIn','Required parameter requestParameters.eventThreadCreateIn was null or undefined when calling createEventThread.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/events/{event_id}/threads`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters.eventId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EventThreadCreateInToJSON(requestParameters.eventThreadCreateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventThreadDetailOutFromJSON(jsonValue));
    }

    /**
     * イベントスレッド作成 - 必要権限: [OWN_EVENT_EDIT] - 並び順:ID降順 - 実行条件     - EventThread.is_deleted=Falseのみ取得     - event_idのイベントが削除済み、存在しない場合NotFound
     * イベントスレッド作成
     */
    async createEventThread(requestParameters: CreateEventThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventThreadDetailOut> {
        const response = await this.createEventThreadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 自組織イベントを作成 - 必要権限: [OWN_EVENT_EDIT] - 登録データ補足情報     - host: ログインユーザーの組織     - `host.is_444=True`の場合         - event_purpose: プログラミングコンテスト, 試験、テスト, 講義、教育用, スキルチェック, 検定試験, 検証用, TCB から選択可能         - is_public: True, Falseどちらも設定可能     - `host.organization_type=OrganizationType.COMPANY`の場合         - event_purpose: スキルチェック のみ選択可能         - is_public: False     - `host.organization_type=OrganizationType.SCHOOL`の場合         - event_purpose: プログラミングコンテスト, 試験、テスト, 講義、教育用, その他 から選択可能         - is_public: False
     * 自組織イベント作成
     */
    async createOwnEventRaw(requestParameters: CreateOwnEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventDetailOut>> {
        if (requestParameters.ownEventCreateIn === null || requestParameters.ownEventCreateIn === undefined) {
            throw new runtime.RequiredError('ownEventCreateIn','Required parameter requestParameters.ownEventCreateIn was null or undefined when calling createOwnEvent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/events/own`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OwnEventCreateInToJSON(requestParameters.ownEventCreateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventDetailOutFromJSON(jsonValue));
    }

    /**
     * 自組織イベントを作成 - 必要権限: [OWN_EVENT_EDIT] - 登録データ補足情報     - host: ログインユーザーの組織     - `host.is_444=True`の場合         - event_purpose: プログラミングコンテスト, 試験、テスト, 講義、教育用, スキルチェック, 検定試験, 検証用, TCB から選択可能         - is_public: True, Falseどちらも設定可能     - `host.organization_type=OrganizationType.COMPANY`の場合         - event_purpose: スキルチェック のみ選択可能         - is_public: False     - `host.organization_type=OrganizationType.SCHOOL`の場合         - event_purpose: プログラミングコンテスト, 試験、テスト, 講義、教育用, その他 から選択可能         - is_public: False
     * 自組織イベント作成
     */
    async createOwnEvent(requestParameters: CreateOwnEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventDetailOut> {
        const response = await this.createOwnEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * イベントを削除 - 必要権限: [ALL_EVENT_AND_SESSION_EDIT, OWN_EVENT_EDIT]     - ALL_EVENT_AND_SESSION_EDIT: 他組織イベントも削除可能     - OWN_EVENT_EDIT: 自組織イベントのみ削除可能 - 論理削除
     * イベント削除
     */
    async deleteEventRaw(requestParameters: DeleteEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling deleteEvent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/events/{event_id}`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters.eventId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * イベントを削除 - 必要権限: [ALL_EVENT_AND_SESSION_EDIT, OWN_EVENT_EDIT]     - ALL_EVENT_AND_SESSION_EDIT: 他組織イベントも削除可能     - OWN_EVENT_EDIT: 自組織イベントのみ削除可能 - 論理削除
     * イベント削除
     */
    async deleteEvent(requestParameters: DeleteEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteEventRaw(requestParameters, initOverrides);
    }

    /**
     * イベントスレッドを論理削除 - 必要権限: [OWN_EVENT_EDIT] - event_idのセッションが削除済み、存在しない場合NotFound - thread_idのスレッド投稿が削除済み、存在しない場合NotFound
     * イベントスレッド削除
     */
    async deleteEventThreadRaw(requestParameters: DeleteEventThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling deleteEventThread.');
        }

        if (requestParameters.threadId === null || requestParameters.threadId === undefined) {
            throw new runtime.RequiredError('threadId','Required parameter requestParameters.threadId was null or undefined when calling deleteEventThread.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/events/{event_id}/threads/{thread_id}`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters.eventId))).replace(`{${"thread_id"}}`, encodeURIComponent(String(requestParameters.threadId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * イベントスレッドを論理削除 - 必要権限: [OWN_EVENT_EDIT] - event_idのセッションが削除済み、存在しない場合NotFound - thread_idのスレッド投稿が削除済み、存在しない場合NotFound
     * イベントスレッド削除
     */
    async deleteEventThread(requestParameters: DeleteEventThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteEventThreadRaw(requestParameters, initOverrides);
    }

    /**
     * - 全イベント用ポートフォリオ取得 - 必要権限: [Pm.OWN_EVENT_VIEW] - 仕様     - 指定したユーザーの、自組織開催全イベントのポートフォリオを取得する     - ユーザーが存在しない・削除された場合は404     - 自組織主催のセッションに1度も参加していないユーザーを指定した場合は403 - レスポンス内容補足     - 合格問題数・総問題数は自組織開催全イベントの参加した全セッションの情報をもとに計算         - 挑戦問題数: QuestionResultの該当ユーザー・セッションのレコード数         - 合格問題数: 上記のうちステータスが正解(QuestionResultStatusがPASS)のレコード数     - セッション一覧(session_list)も自組織開催全イベントの参加した全セッションの情報を表示         - ソート条件は「セッション開始日時昇順」     - 問題解答成績一覧(question_result_list)も自組織開催全イベントの参加した全セッションの情報を元に表示         - フィルタリング条件は「QuestionResultStatusがPASS(正解)」         - ソート条件は「スコア降順 → QuestionResultレコード作成日時昇順」         - 6件以上ある場合は上位6件のみ取得     - 但し、削除されたセッションや、セッションから外された問題は対象外
     * 全イベント用ポートフォリオ取得(未実装)
     */
    async getAllEventPortfolioRaw(requestParameters: GetAllEventPortfolioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventPortfolioOut>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getAllEventPortfolio.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/events/all-event/portfolio/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventPortfolioOutFromJSON(jsonValue));
    }

    /**
     * - 全イベント用ポートフォリオ取得 - 必要権限: [Pm.OWN_EVENT_VIEW] - 仕様     - 指定したユーザーの、自組織開催全イベントのポートフォリオを取得する     - ユーザーが存在しない・削除された場合は404     - 自組織主催のセッションに1度も参加していないユーザーを指定した場合は403 - レスポンス内容補足     - 合格問題数・総問題数は自組織開催全イベントの参加した全セッションの情報をもとに計算         - 挑戦問題数: QuestionResultの該当ユーザー・セッションのレコード数         - 合格問題数: 上記のうちステータスが正解(QuestionResultStatusがPASS)のレコード数     - セッション一覧(session_list)も自組織開催全イベントの参加した全セッションの情報を表示         - ソート条件は「セッション開始日時昇順」     - 問題解答成績一覧(question_result_list)も自組織開催全イベントの参加した全セッションの情報を元に表示         - フィルタリング条件は「QuestionResultStatusがPASS(正解)」         - ソート条件は「スコア降順 → QuestionResultレコード作成日時昇順」         - 6件以上ある場合は上位6件のみ取得     - 但し、削除されたセッションや、セッションから外された問題は対象外
     * 全イベント用ポートフォリオ取得(未実装)
     */
    async getAllEventPortfolio(requestParameters: GetAllEventPortfolioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventPortfolioOut> {
        const response = await this.getAllEventPortfolioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 過去イベント参加者一覧取得 - 必要権限: [Pm.OWN_SESSION_PERSONAL_INFORMATION_VIEW] - 仕様     - 自組織主催イベントに紐づく全セッションに参加したユーザー一覧を返す     - 同じユーザーが複数のセッションに参加した場合はその数だけリストに含める         - 同じイベント内の複数セッション参加した場合もその数だけ返す(現行踏襲)     - 並び順：セッション参加日時の降順
     * 過去イベント参加者一覧取得
     */
    async getAllEventUsersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ALLEventUserListOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/events/all-event-users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ALLEventUserListOutFromJSON));
    }

    /**
     * 過去イベント参加者一覧取得 - 必要権限: [Pm.OWN_SESSION_PERSONAL_INFORMATION_VIEW] - 仕様     - 自組織主催イベントに紐づく全セッションに参加したユーザー一覧を返す     - 同じユーザーが複数のセッションに参加した場合はその数だけリストに含める         - 同じイベント内の複数セッション参加した場合もその数だけ返す(現行踏襲)     - 並び順：セッション参加日時の降順
     * 過去イベント参加者一覧取得
     */
    async getAllEventUsers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ALLEventUserListOut>> {
        const response = await this.getAllEventUsersRaw(initOverrides);
        return await response.value();
    }

    /**
     * 自組織イベント一覧を取得 - 必要権限: [OWN_EVENT_VIEW] - 並び順: id降順 - クエリパラメータ補足情報     - event_filter         - is_published: Eventが公開済みのもののみ取得         - is_sponsor: EventSponsorに自組織が含まれているもののみ取得 - レスポンスデータ補足情報     - is_finished: 「セッションが1つ以上」AND「現在時刻が全セッションの開催終了日の後」     - host_name: 企業名 または 学校名 + 学部名     - sessions         - user_count: セッション参加ユーザーの合計         - session_status         　- 開催予定: セッション開始日時 > 現在日時         　- 開催中: セッション開始日時 <= 現在日時 <= セッション終了日時         　- 終了: 現在日時 > セッション終了日時     # TODO: PRO,TECHTHONセッションが紐づくイベントは取得しない（９月実装後はフィルタ削除）
     * 自組織イベント一覧取得
     */
    async getCompanyEventListRaw(requestParameters: GetCompanyEventListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OwnEventListOut>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.eventFilter !== undefined) {
            queryParameters['event_filter'] = requestParameters.eventFilter;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/events/own`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OwnEventListOutFromJSON(jsonValue));
    }

    /**
     * 自組織イベント一覧を取得 - 必要権限: [OWN_EVENT_VIEW] - 並び順: id降順 - クエリパラメータ補足情報     - event_filter         - is_published: Eventが公開済みのもののみ取得         - is_sponsor: EventSponsorに自組織が含まれているもののみ取得 - レスポンスデータ補足情報     - is_finished: 「セッションが1つ以上」AND「現在時刻が全セッションの開催終了日の後」     - host_name: 企業名 または 学校名 + 学部名     - sessions         - user_count: セッション参加ユーザーの合計         - session_status         　- 開催予定: セッション開始日時 > 現在日時         　- 開催中: セッション開始日時 <= 現在日時 <= セッション終了日時         　- 終了: 現在日時 > セッション終了日時     # TODO: PRO,TECHTHONセッションが紐づくイベントは取得しない（９月実装後はフィルタ削除）
     * 自組織イベント一覧取得
     */
    async getCompanyEventList(requestParameters: GetCompanyEventListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OwnEventListOut> {
        const response = await this.getCompanyEventListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * イベント詳細を取得 - 必要権限: [OWN_EVENT_VIEW, ALL_EVENT_AND_SESSION_VIEW]     - OWN_EVENT_VIEW: 所属組織が主催、または協賛のイベントのみ取得可能     - ALL_EVENT_AND_SESSION_VIEW: 全イベント取得可能 - レスポンスデータ補足情報     - host_name: 企業名 または 学校名 + 学部名
     * イベント詳細取得
     */
    async getEventRaw(requestParameters: GetEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventDetailOut>> {
        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling getEvent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/events/{event_id}`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters.eventId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventDetailOutFromJSON(jsonValue));
    }

    /**
     * イベント詳細を取得 - 必要権限: [OWN_EVENT_VIEW, ALL_EVENT_AND_SESSION_VIEW]     - OWN_EVENT_VIEW: 所属組織が主催、または協賛のイベントのみ取得可能     - ALL_EVENT_AND_SESSION_VIEW: 全イベント取得可能 - レスポンスデータ補足情報     - host_name: 企業名 または 学校名 + 学部名
     * イベント詳細取得
     */
    async getEvent(requestParameters: GetEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventDetailOut> {
        const response = await this.getEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 全組織イベント一覧を取得 - 必要権限: [ALL_EVENT_AND_SESSION_VIEW] - レスポンスデータ補足情報     - host_name: 企業名 または 学校名 + 学部名     - is_host: 自組織開催のイベントの場合True、そうでない場合False     - session_count: イベントに紐づくセッションの数     - event_user_count: イベントの全セッションの参加者合計
     * 全組織イベント一覧取得
     */
    async getEventListRaw(requestParameters: GetEventListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventListOut>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.organizationId !== undefined) {
            queryParameters['organization_id'] = requestParameters.organizationId;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['order_by'] = requestParameters.orderBy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/events`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventListOutFromJSON(jsonValue));
    }

    /**
     * 全組織イベント一覧を取得 - 必要権限: [ALL_EVENT_AND_SESSION_VIEW] - レスポンスデータ補足情報     - host_name: 企業名 または 学校名 + 学部名     - is_host: 自組織開催のイベントの場合True、そうでない場合False     - session_count: イベントに紐づくセッションの数     - event_user_count: イベントの全セッションの参加者合計
     * 全組織イベント一覧取得
     */
    async getEventList(requestParameters: GetEventListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventListOut> {
        const response = await this.getEventListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * - イベント単体用ポートフォリオ取得 - 必要権限: [Pm.OWN_EVENT_VIEW] - 仕様     - 指定したユーザーの指定したイベントにおけるポートフォリオを取得する     - ユーザーやイベントが存在しない場合・削除された場合や該当イベントに参加していないユーザーを指定した場合は404     - 他組織のイベントを指定した場合は403 - レスポンス内容補足     - 合格問題数・総問題数はイベント内の参加した全セッションの情報をもとに計算         - 挑戦問題数: QuestionResultの該当ユーザー・セッションのレコード数         - 合格問題数: 上記のうちステータスが正解(QuestionREsultStasusがPASS)のレコード数     - セッション一覧(session_list)も参加した全セッションの情報を表示         - ソート条件は「セッション開始日時昇順」     - 問題解答成績一覧(question_result_list)も参加した全セッションの情報を元に表示         - フィルタリング条件は「QuestionResultStatusがPASS(正解)」         - ソート条件は「スコア降順 → QuestionResultレコード作成日時昇順」         - 6件以上ある場合は上位6件のみ取得     - 但し、削除されたセッションや、セッションから外された問題は対象外
     * イベント単体用ポートフォリオ取得
     */
    async getEventPortfolioRaw(requestParameters: GetEventPortfolioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventPortfolioOut>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getEventPortfolio.');
        }

        const queryParameters: any = {};

        if (requestParameters.eventId !== undefined) {
            queryParameters['event_id'] = requestParameters.eventId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/events/portfolio/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventPortfolioOutFromJSON(jsonValue));
    }

    /**
     * - イベント単体用ポートフォリオ取得 - 必要権限: [Pm.OWN_EVENT_VIEW] - 仕様     - 指定したユーザーの指定したイベントにおけるポートフォリオを取得する     - ユーザーやイベントが存在しない場合・削除された場合や該当イベントに参加していないユーザーを指定した場合は404     - 他組織のイベントを指定した場合は403 - レスポンス内容補足     - 合格問題数・総問題数はイベント内の参加した全セッションの情報をもとに計算         - 挑戦問題数: QuestionResultの該当ユーザー・セッションのレコード数         - 合格問題数: 上記のうちステータスが正解(QuestionREsultStasusがPASS)のレコード数     - セッション一覧(session_list)も参加した全セッションの情報を表示         - ソート条件は「セッション開始日時昇順」     - 問題解答成績一覧(question_result_list)も参加した全セッションの情報を元に表示         - フィルタリング条件は「QuestionResultStatusがPASS(正解)」         - ソート条件は「スコア降順 → QuestionResultレコード作成日時昇順」         - 6件以上ある場合は上位6件のみ取得     - 但し、削除されたセッションや、セッションから外された問題は対象外
     * イベント単体用ポートフォリオ取得
     */
    async getEventPortfolio(requestParameters: GetEventPortfolioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventPortfolioOut> {
        const response = await this.getEventPortfolioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * イベント共催企業の一覧を取得 - 必要権限: [EVENT_SPONSOR_ASSIGN] - 企業主催イベントの場合はイベントプランに加入している企業一覧、学校主催イベントの場合は学校一覧を返す - レスポンスデータ補足情報     - sponsored_limit: 企業主催イベントの場合は`company_event_limit`, 学校主催イベントの場合は`school_event_limit`を返す     - is_sponsored: スポンサー登録されている場合はTrue, そうでない場合はFalse - 並び順：組織ID昇順
     * イベント共催企業一覧取得
     */
    async getEventSponsorListRaw(requestParameters: GetEventSponsorListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EventSponsorListOut>>> {
        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling getEventSponsorList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/events/{event_id}/sponsors`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters.eventId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EventSponsorListOutFromJSON));
    }

    /**
     * イベント共催企業の一覧を取得 - 必要権限: [EVENT_SPONSOR_ASSIGN] - 企業主催イベントの場合はイベントプランに加入している企業一覧、学校主催イベントの場合は学校一覧を返す - レスポンスデータ補足情報     - sponsored_limit: 企業主催イベントの場合は`company_event_limit`, 学校主催イベントの場合は`school_event_limit`を返す     - is_sponsored: スポンサー登録されている場合はTrue, そうでない場合はFalse - 並び順：組織ID昇順
     * イベント共催企業一覧取得
     */
    async getEventSponsorList(requestParameters: GetEventSponsorListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EventSponsorListOut>> {
        const response = await this.getEventSponsorListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * イベントスレッド一覧取得 - 必要権限: [OWN_EVENT_VIEW] - 並び順:ID降順 - 取得条件     - Event.s_deleted=Falseのみ取得     - EventThread.is_deleted=Falseのみ取得
     * イベントスレッド一覧取得
     */
    async getEventThreadListRaw(requestParameters: GetEventThreadListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EventThreadListOut>>> {
        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling getEventThreadList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/events/{event_id}/threads`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters.eventId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EventThreadListOutFromJSON));
    }

    /**
     * イベントスレッド一覧取得 - 必要権限: [OWN_EVENT_VIEW] - 並び順:ID降順 - 取得条件     - Event.s_deleted=Falseのみ取得     - EventThread.is_deleted=Falseのみ取得
     * イベントスレッド一覧取得
     */
    async getEventThreadList(requestParameters: GetEventThreadListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EventThreadListOut>> {
        const response = await this.getEventThreadListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * イベントユーザーランキング取得 - 必要権限: [OWN_EVENT_VIEW] - アクセス権限詳細:     - Event.host.organizationで学校イベントか企業イベントかを判定     - Event.sponsorsで共催企業を取得     - 学校イベントの場合閲覧可能なユーザー         - 主催学校         - 共催企業         - ST, SU     - 企業イベントの場合閲覧可能なユーザー         - 主催企業         - ST, SU -　並び順: rank昇順 - rank算出方法     - 基本はscore降順     - 同点の場合、合計解答時間が短い方を上位とする - 処理手順     - event.sessionsを取得     - SessionUserでuserを特定     - session_id, user_idでQuestionResultを集計     - rank算出
     * イベントユーザーランキング取得
     */
    async getEventUserRankingRaw(requestParameters: GetEventUserRankingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetEventUserRankingOut>>> {
        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling getEventUserRanking.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/events/{event_id}/ranking`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters.eventId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetEventUserRankingOutFromJSON));
    }

    /**
     * イベントユーザーランキング取得 - 必要権限: [OWN_EVENT_VIEW] - アクセス権限詳細:     - Event.host.organizationで学校イベントか企業イベントかを判定     - Event.sponsorsで共催企業を取得     - 学校イベントの場合閲覧可能なユーザー         - 主催学校         - 共催企業         - ST, SU     - 企業イベントの場合閲覧可能なユーザー         - 主催企業         - ST, SU -　並び順: rank昇順 - rank算出方法     - 基本はscore降順     - 同点の場合、合計解答時間が短い方を上位とする - 処理手順     - event.sessionsを取得     - SessionUserでuserを特定     - session_id, user_idでQuestionResultを集計     - rank算出
     * イベントユーザーランキング取得
     */
    async getEventUserRanking(requestParameters: GetEventUserRankingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetEventUserRankingOut>> {
        const response = await this.getEventUserRankingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * イベントユーザー成績CSV生成 - 必要権限: [OWN_SESSION_PERSONAL_INFORMATION_VIEW] - データ取得可能条件     -　自組織イベント - CSV format     - |#|ユーザー名|名前|補足情報|Event: 合格|Event: 総数|Session1: 名前|Session1: 合格|Session1: 総数| Q1: 合格| Q1: 総数|...|     - Event: 合格: Eventの問題合格数     - Event: 総数: Eventの問題総数     - Session1: 合格: Session1の問題合格数     - Session1: 総数: Session1の問題総数     - Q1: 合格: Q1のテストケース合格数     - Q1: 総数: Q1のテストケース総数
     * イベントユーザー成績CSV生成
     */
    async getEventUserScoreStatsCsvRaw(requestParameters: GetEventUserScoreStatsCsvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling getEventUserScoreStatsCsv.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/events/{event_id}/results/csv`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters.eventId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * イベントユーザー成績CSV生成 - 必要権限: [OWN_SESSION_PERSONAL_INFORMATION_VIEW] - データ取得可能条件     -　自組織イベント - CSV format     - |#|ユーザー名|名前|補足情報|Event: 合格|Event: 総数|Session1: 名前|Session1: 合格|Session1: 総数| Q1: 合格| Q1: 総数|...|     - Event: 合格: Eventの問題合格数     - Event: 総数: Eventの問題総数     - Session1: 合格: Session1の問題合格数     - Session1: 総数: Session1の問題総数     - Q1: 合格: Q1のテストケース合格数     - Q1: 総数: Q1のテストケース総数
     * イベントユーザー成績CSV生成
     */
    async getEventUserScoreStatsCsv(requestParameters: GetEventUserScoreStatsCsvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getEventUserScoreStatsCsvRaw(requestParameters, initOverrides);
    }

    /**
     * イベントの参加者一覧を取得 - 必要権限：[OWN_EVENT_VIEW, ALL_EVENT_AND_SESSION_VIEW] - アクセス権限詳細: - Event.host.organizationで学校イベントか企業イベントかを判定 - Event.sponsorsで共催企業を取得 - 学校イベントの場合閲覧可能なユーザータイプ     - 主催学校     - 共催企業     - ST, SU - 企業イベントの場合閲覧可能なユーザータイプ     - 主催企業     - ST, SU - 並び順:     - 参加者の参加日時の昇順 (SessionUser.created_at) - 実行処理     - 紐づくsessionを取得     - SessionUserで、該当user_idを取得         - 複数セッションに参加するユーザーがいる可能性があるため、重複の場合、参加日時を最初のもののみ取得
     * イベントの参加者一覧取得
     */
    async getEventUsersListRaw(requestParameters: GetEventUsersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetEventUsersListOut>>> {
        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling getEventUsersList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/events/{event_id}/users`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters.eventId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetEventUsersListOutFromJSON));
    }

    /**
     * イベントの参加者一覧を取得 - 必要権限：[OWN_EVENT_VIEW, ALL_EVENT_AND_SESSION_VIEW] - アクセス権限詳細: - Event.host.organizationで学校イベントか企業イベントかを判定 - Event.sponsorsで共催企業を取得 - 学校イベントの場合閲覧可能なユーザータイプ     - 主催学校     - 共催企業     - ST, SU - 企業イベントの場合閲覧可能なユーザータイプ     - 主催企業     - ST, SU - 並び順:     - 参加者の参加日時の昇順 (SessionUser.created_at) - 実行処理     - 紐づくsessionを取得     - SessionUserで、該当user_idを取得         - 複数セッションに参加するユーザーがいる可能性があるため、重複の場合、参加日時を最初のもののみ取得
     * イベントの参加者一覧取得
     */
    async getEventUsersList(requestParameters: GetEventUsersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetEventUsersListOut>> {
        const response = await this.getEventUsersListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * イベント共催登録 - 必要権限: [EVENT_SPONSOR_ASSIGN] - 登録後に共催可能数を1減少(企業主催の場合`company_event_limit`、学校主催の場合`school_event_limit`) - 登録データ補足情報     - created_by: user.full_name
     * イベント共催登録
     */
    async registerEventSponsorRaw(requestParameters: RegisterEventSponsorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling registerEventSponsor.');
        }

        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling registerEventSponsor.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/events/{event_id}/sponsors/{organization_id}`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters.eventId))).replace(`{${"organization_id"}}`, encodeURIComponent(String(requestParameters.organizationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * イベント共催登録 - 必要権限: [EVENT_SPONSOR_ASSIGN] - 登録後に共催可能数を1減少(企業主催の場合`company_event_limit`、学校主催の場合`school_event_limit`) - 登録データ補足情報     - created_by: user.full_name
     * イベント共催登録
     */
    async registerEventSponsor(requestParameters: RegisterEventSponsorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.registerEventSponsorRaw(requestParameters, initOverrides);
    }

    /**
     * イベント共催登録解除 - 必要権限: [EVENT_SPONSOR_ASSIGN] - 物理削除
     * イベント共催登録解除
     */
    async unregisterEventSponsorRaw(requestParameters: UnregisterEventSponsorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling unregisterEventSponsor.');
        }

        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling unregisterEventSponsor.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/events/{event_id}/sponsors/{organization_id}`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters.eventId))).replace(`{${"organization_id"}}`, encodeURIComponent(String(requestParameters.organizationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * イベント共催登録解除 - 必要権限: [EVENT_SPONSOR_ASSIGN] - 物理削除
     * イベント共催登録解除
     */
    async unregisterEventSponsor(requestParameters: UnregisterEventSponsorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unregisterEventSponsorRaw(requestParameters, initOverrides);
    }

    /**
     * イベントを更新 - 必要権限: [ALL_EVENT_AND_SESSION_EDIT, OWN_EVENT_EDIT]     - ALL_EVENT_AND_SESSION_EDIT: 他組織イベントも更新可能     - OWN_EVENT_EDIT: 自組織イベントのみ更新可能 - 登録データ補足情報     - `host.is_444=True`の場合         - event_purpose: プログラミングコンテスト, 試験、テスト, 講義、教育用, スキルチェック, 検定試験, 検証用, TCB から選択可能         - is_public: True, Falseどちらも設定可能     - `host.organization_type=OrganizationType.COMPANY`の場合         - event_purpose: スキルチェック のみ選択可能         - is_public: False     - `host.organization_type=OrganizationType.SCHOOL`の場合         - event_purpose: プログラミングコンテスト, 試験、テスト, 講義、教育用, 検定試験, その他 から選択可能         - is_public: False
     * イベント更新
     */
    async updateEventRaw(requestParameters: UpdateEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventDetailOut>> {
        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling updateEvent.');
        }

        if (requestParameters.eventUpdateIn === null || requestParameters.eventUpdateIn === undefined) {
            throw new runtime.RequiredError('eventUpdateIn','Required parameter requestParameters.eventUpdateIn was null or undefined when calling updateEvent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/events/{event_id}`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters.eventId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EventUpdateInToJSON(requestParameters.eventUpdateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventDetailOutFromJSON(jsonValue));
    }

    /**
     * イベントを更新 - 必要権限: [ALL_EVENT_AND_SESSION_EDIT, OWN_EVENT_EDIT]     - ALL_EVENT_AND_SESSION_EDIT: 他組織イベントも更新可能     - OWN_EVENT_EDIT: 自組織イベントのみ更新可能 - 登録データ補足情報     - `host.is_444=True`の場合         - event_purpose: プログラミングコンテスト, 試験、テスト, 講義、教育用, スキルチェック, 検定試験, 検証用, TCB から選択可能         - is_public: True, Falseどちらも設定可能     - `host.organization_type=OrganizationType.COMPANY`の場合         - event_purpose: スキルチェック のみ選択可能         - is_public: False     - `host.organization_type=OrganizationType.SCHOOL`の場合         - event_purpose: プログラミングコンテスト, 試験、テスト, 講義、教育用, 検定試験, その他 から選択可能         - is_public: False
     * イベント更新
     */
    async updateEvent(requestParameters: UpdateEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventDetailOut> {
        const response = await this.updateEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
