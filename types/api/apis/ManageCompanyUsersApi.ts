/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  CompanyUserCreateIn,
  CompanyUserDetailOut,
  CompanyUserListOut,
  CompanyUserUpdateIn,
  CreateCompanyUserCsvIn,
  CreateCompanyUserCsvOut,
  ValidationError,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    CompanyUserCreateInFromJSON,
    CompanyUserCreateInToJSON,
    CompanyUserDetailOutFromJSON,
    CompanyUserDetailOutToJSON,
    CompanyUserListOutFromJSON,
    CompanyUserListOutToJSON,
    CompanyUserUpdateInFromJSON,
    CompanyUserUpdateInToJSON,
    CreateCompanyUserCsvInFromJSON,
    CreateCompanyUserCsvInToJSON,
    CreateCompanyUserCsvOutFromJSON,
    CreateCompanyUserCsvOutToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface CreateCompanyUserRequest {
    companyUserCreateIn: CompanyUserCreateIn;
}

export interface CreateCompanyUserCsvRequest {
    createCompanyUserCsvIn: CreateCompanyUserCsvIn;
}

export interface DeleteCompanyUserRequest {
    userId: number;
}

export interface GetCompanyUserRequest {
    userId: number;
}

export interface GetCompanyUserListRequest {
    organizationId: number;
}

export interface UpdateCompanyUserRequest {
    userId: number;
    companyUserUpdateIn: CompanyUserUpdateIn;
}

/**
 * 
 */
export class ManageCompanyUsersApi extends runtime.BaseAPI {

    /**
     * 企業ユーザーを作成 - 必要権限: [ALL_ADMIN_EDIT, OWN_ADMIN_EDIT] - 登録データ補足情報     - organization_id: OrganizationType.COMPANYの組織のみ設定可能     - user_type: UserType.COMPANY     - password: ハッシュ化して登録     - created_by: last_name + first_name - リクエストに対応した権限をユーザーに登録する
     * 企業ユーザー作成
     */
    async createCompanyUserRaw(requestParameters: CreateCompanyUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompanyUserDetailOut>> {
        if (requestParameters.companyUserCreateIn === null || requestParameters.companyUserCreateIn === undefined) {
            throw new runtime.RequiredError('companyUserCreateIn','Required parameter requestParameters.companyUserCreateIn was null or undefined when calling createCompanyUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/company-users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CompanyUserCreateInToJSON(requestParameters.companyUserCreateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyUserDetailOutFromJSON(jsonValue));
    }

    /**
     * 企業ユーザーを作成 - 必要権限: [ALL_ADMIN_EDIT, OWN_ADMIN_EDIT] - 登録データ補足情報     - organization_id: OrganizationType.COMPANYの組織のみ設定可能     - user_type: UserType.COMPANY     - password: ハッシュ化して登録     - created_by: last_name + first_name - リクエストに対応した権限をユーザーに登録する
     * 企業ユーザー作成
     */
    async createCompanyUser(requestParameters: CreateCompanyUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompanyUserDetailOut> {
        const response = await this.createCompanyUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 企業管理者CSV作成 - 必要権限: [ALL_ADMIN_EDIT, OWN_ADMIN_EDIT] - リクエスト     - organization_id     - csv_data         - strで受け取る     - mail_text     - 各プランの加入状況 - 例外処理     - organizationが存在しない場合、DataDoesNotExist     - 他組織のユーザーを作成しようとした場合、PermissionDenied - 登録データ補足情報     - 一度に登録できるのは10件まで     - organization_id: OrganizationType.COMPANYの組織のみ設定可能     - user_type: UserType.COMPANY     - password: 生成したパスワードをハッシュ化     - created_by: user.full_name     - company_user_info: リクエストに応じた権限を付与 - レスポンス     - submit_count: 登録した人数(CSV内のデータ数)     - create_count: 登録に成功した人数 - 登録されたユーザーにメール送信
     * 企業管理者CSV作成
     */
    async createCompanyUserCsvRaw(requestParameters: CreateCompanyUserCsvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCompanyUserCsvOut>> {
        if (requestParameters.createCompanyUserCsvIn === null || requestParameters.createCompanyUserCsvIn === undefined) {
            throw new runtime.RequiredError('createCompanyUserCsvIn','Required parameter requestParameters.createCompanyUserCsvIn was null or undefined when calling createCompanyUserCsv.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/company-users/csv`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCompanyUserCsvInToJSON(requestParameters.createCompanyUserCsvIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateCompanyUserCsvOutFromJSON(jsonValue));
    }

    /**
     * 企業管理者CSV作成 - 必要権限: [ALL_ADMIN_EDIT, OWN_ADMIN_EDIT] - リクエスト     - organization_id     - csv_data         - strで受け取る     - mail_text     - 各プランの加入状況 - 例外処理     - organizationが存在しない場合、DataDoesNotExist     - 他組織のユーザーを作成しようとした場合、PermissionDenied - 登録データ補足情報     - 一度に登録できるのは10件まで     - organization_id: OrganizationType.COMPANYの組織のみ設定可能     - user_type: UserType.COMPANY     - password: 生成したパスワードをハッシュ化     - created_by: user.full_name     - company_user_info: リクエストに応じた権限を付与 - レスポンス     - submit_count: 登録した人数(CSV内のデータ数)     - create_count: 登録に成功した人数 - 登録されたユーザーにメール送信
     * 企業管理者CSV作成
     */
    async createCompanyUserCsv(requestParameters: CreateCompanyUserCsvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCompanyUserCsvOut> {
        const response = await this.createCompanyUserCsvRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 企業ユーザー削除 - 必要権限: [ALL_ADMIN_VIEW, OWN_ADMIN_EDIT]     - [OWN_ADMIN_EDIT]: 自組織のみ削除可能 - 論理削除
     * 企業ユーザー削除
     */
    async deleteCompanyUserRaw(requestParameters: DeleteCompanyUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteCompanyUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/company-users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 企業ユーザー削除 - 必要権限: [ALL_ADMIN_VIEW, OWN_ADMIN_EDIT]     - [OWN_ADMIN_EDIT]: 自組織のみ削除可能 - 論理削除
     * 企業ユーザー削除
     */
    async deleteCompanyUser(requestParameters: DeleteCompanyUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCompanyUserRaw(requestParameters, initOverrides);
    }

    /**
     * 企業ユーザー詳細取得 - 必要権限: [ALL_ADMIN_VIEW, OWN_ADMIN_VIEW]
     * 企業ユーザー詳細取得
     */
    async getCompanyUserRaw(requestParameters: GetCompanyUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompanyUserDetailOut>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getCompanyUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/company-users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyUserDetailOutFromJSON(jsonValue));
    }

    /**
     * 企業ユーザー詳細取得 - 必要権限: [ALL_ADMIN_VIEW, OWN_ADMIN_VIEW]
     * 企業ユーザー詳細取得
     */
    async getCompanyUser(requestParameters: GetCompanyUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompanyUserDetailOut> {
        const response = await this.getCompanyUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 企業ユーザ一覧取得 - 必要権限: [ALL_ADMIN_VIEW, OWN_ADMIN_VIEW] - 並び順: id昇順 - 以下のデータのみ取得     - organization_type: COMPANYの組織のみ     - user_type: COMPANY or STAFF or PART_TIMER     - is_deleted: False
     * 企業ユーザ一覧取得
     */
    async getCompanyUserListRaw(requestParameters: GetCompanyUserListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CompanyUserListOut>>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling getCompanyUserList.');
        }

        const queryParameters: any = {};

        if (requestParameters.organizationId !== undefined) {
            queryParameters['organization_id'] = requestParameters.organizationId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/company-users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CompanyUserListOutFromJSON));
    }

    /**
     * 企業ユーザ一覧取得 - 必要権限: [ALL_ADMIN_VIEW, OWN_ADMIN_VIEW] - 並び順: id昇順 - 以下のデータのみ取得     - organization_type: COMPANYの組織のみ     - user_type: COMPANY or STAFF or PART_TIMER     - is_deleted: False
     * 企業ユーザ一覧取得
     */
    async getCompanyUserList(requestParameters: GetCompanyUserListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CompanyUserListOut>> {
        const response = await this.getCompanyUserListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 企業ユーザーを更新 - 必要権限: [ALL_ADMIN_EDIT, OWN_ADMIN_EDIT] - 登録データ補足情報     - organization_id: OrganizationType.COMPANYの組織のみ設定可能     - user_type: COMPANY or STAFF or PART_TIMER     - password: ハッシュ化して登録     - updated_by: last_name + first_name - リクエストに対応した権限をユーザーに登録する
     * 企業ユーザー更新
     */
    async updateCompanyUserRaw(requestParameters: UpdateCompanyUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompanyUserDetailOut>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling updateCompanyUser.');
        }

        if (requestParameters.companyUserUpdateIn === null || requestParameters.companyUserUpdateIn === undefined) {
            throw new runtime.RequiredError('companyUserUpdateIn','Required parameter requestParameters.companyUserUpdateIn was null or undefined when calling updateCompanyUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/company-users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CompanyUserUpdateInToJSON(requestParameters.companyUserUpdateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyUserDetailOutFromJSON(jsonValue));
    }

    /**
     * 企業ユーザーを更新 - 必要権限: [ALL_ADMIN_EDIT, OWN_ADMIN_EDIT] - 登録データ補足情報     - organization_id: OrganizationType.COMPANYの組織のみ設定可能     - user_type: COMPANY or STAFF or PART_TIMER     - password: ハッシュ化して登録     - updated_by: last_name + first_name - リクエストに対応した権限をユーザーに登録する
     * 企業ユーザー更新
     */
    async updateCompanyUser(requestParameters: UpdateCompanyUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompanyUserDetailOut> {
        const response = await this.updateCompanyUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
