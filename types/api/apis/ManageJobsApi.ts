/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AllJobsListOut,
  ApiError,
  AppRoutersManageJobsGetAllJobsListAccessType,
  AppRoutersManageJobsGetJobFavoriteUserListAccessType,
  AppRoutersManageJobsGetJobScoutUserListAccessType,
  AppSchemasManageJobsJobDetailOutJobDetailOut,
  IntroduceJobUserIn,
  JobAccessLogOut,
  JobDraftApplyingListOut,
  JobDraftCreateIn,
  JobDraftDetailOut,
  JobDraftListOut,
  JobDraftRejectIn,
  JobDraftUpdateIn,
  JobFavoriteUserListOut,
  JobListOut,
  JobScoutUserListOut,
  ValidationError,
} from '../models/index';
import {
    AllJobsListOutFromJSON,
    AllJobsListOutToJSON,
    ApiErrorFromJSON,
    ApiErrorToJSON,
    AppRoutersManageJobsGetAllJobsListAccessTypeFromJSON,
    AppRoutersManageJobsGetAllJobsListAccessTypeToJSON,
    AppRoutersManageJobsGetJobFavoriteUserListAccessTypeFromJSON,
    AppRoutersManageJobsGetJobFavoriteUserListAccessTypeToJSON,
    AppRoutersManageJobsGetJobScoutUserListAccessTypeFromJSON,
    AppRoutersManageJobsGetJobScoutUserListAccessTypeToJSON,
    AppSchemasManageJobsJobDetailOutJobDetailOutFromJSON,
    AppSchemasManageJobsJobDetailOutJobDetailOutToJSON,
    IntroduceJobUserInFromJSON,
    IntroduceJobUserInToJSON,
    JobAccessLogOutFromJSON,
    JobAccessLogOutToJSON,
    JobDraftApplyingListOutFromJSON,
    JobDraftApplyingListOutToJSON,
    JobDraftCreateInFromJSON,
    JobDraftCreateInToJSON,
    JobDraftDetailOutFromJSON,
    JobDraftDetailOutToJSON,
    JobDraftListOutFromJSON,
    JobDraftListOutToJSON,
    JobDraftRejectInFromJSON,
    JobDraftRejectInToJSON,
    JobDraftUpdateInFromJSON,
    JobDraftUpdateInToJSON,
    JobFavoriteUserListOutFromJSON,
    JobFavoriteUserListOutToJSON,
    JobListOutFromJSON,
    JobListOutToJSON,
    JobScoutUserListOutFromJSON,
    JobScoutUserListOutToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface ApplyJobDraftRequest {
    jobDraftId: number;
}

export interface ApproveJobDraftRequest {
    jobDraftId: number;
}

export interface CancelJobDraftRequest {
    jobDraftId: number;
}

export interface CreateJobDraftRequest {
    jobDraftCreateIn: JobDraftCreateIn;
}

export interface DeleteJobRequest {
    jobId: number;
}

export interface DeleteJobDraftRequest {
    jobDraftId: number;
}

export interface GetAllJobsListRequest {
    accessType: AppRoutersManageJobsGetAllJobsListAccessType;
    freeWord?: string;
    limit?: number;
    offset?: number;
}

export interface GetJobRequest {
    jobId: number;
}

export interface GetJobAccessLogRequest {
    jobId: number;
}

export interface GetJobDraftRequest {
    jobDraftId: number;
}

export interface GetJobDraftListRequest {
    organizationId?: number;
}

export interface GetJobFavoriteUserListRequest {
    jobId: number;
    accessType: AppRoutersManageJobsGetJobFavoriteUserListAccessType;
}

export interface GetJobListRequest {
    organizationId?: number;
    isWholeOrganization?: boolean;
}

export interface GetJobScoutUserListRequest {
    jobId: number;
    accessType: AppRoutersManageJobsGetJobScoutUserListAccessType;
}

export interface IntroduceJobToUserRequest {
    jobId: number;
    jobUserId: number;
    introduceJobUserIn: IntroduceJobUserIn;
}

export interface PublishJobRequest {
    jobId: number;
}

export interface RejectJobDraftRequest {
    jobDraftId: number;
    jobDraftRejectIn: JobDraftRejectIn;
}

export interface UnpublishJobRequest {
    jobId: number;
}

export interface UpdateJobDraftRequest {
    jobDraftId: number;
    jobDraftUpdateIn: JobDraftUpdateIn;
}

/**
 * 
 */
export class ManageJobsApi extends runtime.BaseAPI {

    /**
     * 求人下書公開申請 - 必要権限: [ALL_JOB_PUBLISH_APPLICATION, OWN_JOB_PUBLISH_APPLICATION]     - ALL_JOB_PUBLISH_APPLICATION: 他組織の求人も含め申請可能     - OWN_JOB_PUBLISH_APPLICATION: 自組織の求人のみ申請可能 - 444に対してSlack通知を行う - 実行可能条件     - is_deleted: False         - 条件を満たしていない場合はNotFoundエラー     - 下書き状況: 編集中         - 条件を満たしていない場合はCannotBeExecutedConditionsNotSatisfiedエラー - 更新データ情報     - 下書き状況: 申請中
     * 求人下書公開申請
     */
    async applyJobDraftRaw(requestParameters: ApplyJobDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.jobDraftId === null || requestParameters.jobDraftId === undefined) {
            throw new runtime.RequiredError('jobDraftId','Required parameter requestParameters.jobDraftId was null or undefined when calling applyJobDraft.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/jobs/drafts/{job_draft_id}/apply`.replace(`{${"job_draft_id"}}`, encodeURIComponent(String(requestParameters.jobDraftId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 求人下書公開申請 - 必要権限: [ALL_JOB_PUBLISH_APPLICATION, OWN_JOB_PUBLISH_APPLICATION]     - ALL_JOB_PUBLISH_APPLICATION: 他組織の求人も含め申請可能     - OWN_JOB_PUBLISH_APPLICATION: 自組織の求人のみ申請可能 - 444に対してSlack通知を行う - 実行可能条件     - is_deleted: False         - 条件を満たしていない場合はNotFoundエラー     - 下書き状況: 編集中         - 条件を満たしていない場合はCannotBeExecutedConditionsNotSatisfiedエラー - 更新データ情報     - 下書き状況: 申請中
     * 求人下書公開申請
     */
    async applyJobDraft(requestParameters: ApplyJobDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.applyJobDraftRaw(requestParameters, initOverrides);
    }

    /**
     * 求人下書公開申請承認 - 必要権限: [JOB_PUBLISH_APPROVAL] - 444に対してSlack通知を行う - 実行可能条件     - is_deleted: False         - 条件を満たしていない場合はNotFoundエラー     - 下書き状況: 申請中         - 条件を満たしていない場合はCannotBeExecutedConditionsNotSatisfiedエラー - 更新データ情報     - 下書き状況: 承認済 - 求人下書をもとに求人を作成、更新する
     * 求人下書公開申請承認
     */
    async approveJobDraftRaw(requestParameters: ApproveJobDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.jobDraftId === null || requestParameters.jobDraftId === undefined) {
            throw new runtime.RequiredError('jobDraftId','Required parameter requestParameters.jobDraftId was null or undefined when calling approveJobDraft.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/jobs/drafts/{job_draft_id}/approve`.replace(`{${"job_draft_id"}}`, encodeURIComponent(String(requestParameters.jobDraftId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 求人下書公開申請承認 - 必要権限: [JOB_PUBLISH_APPROVAL] - 444に対してSlack通知を行う - 実行可能条件     - is_deleted: False         - 条件を満たしていない場合はNotFoundエラー     - 下書き状況: 申請中         - 条件を満たしていない場合はCannotBeExecutedConditionsNotSatisfiedエラー - 更新データ情報     - 下書き状況: 承認済 - 求人下書をもとに求人を作成、更新する
     * 求人下書公開申請承認
     */
    async approveJobDraft(requestParameters: ApproveJobDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.approveJobDraftRaw(requestParameters, initOverrides);
    }

    /**
     * 求人下書公開申請取り消し - 必要権限: [ALL_JOB_PUBLISH_APPLICATION, OWN_JOB_PUBLISH_APPLICATION]     - ALL_JOB_PUBLISH_APPLICATION: 他組織の求人も含め取り消し可能     - OWN_JOB_PUBLISH_APPLICATION: 自組織の求人のみ取り消し可能 - 実行可能条件     - is_deleted: False         - 条件を満たしていない場合はNotFoundエラー     - 下書き状況: 申請中         - 条件を満たしていない場合はCannotBeExecutedConditionsNotSatisfiedエラー - 更新データ情報     - 下書き状況: 編集中
     * 求人下書公開申請取り消し
     */
    async cancelJobDraftRaw(requestParameters: CancelJobDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.jobDraftId === null || requestParameters.jobDraftId === undefined) {
            throw new runtime.RequiredError('jobDraftId','Required parameter requestParameters.jobDraftId was null or undefined when calling cancelJobDraft.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/jobs/drafts/{job_draft_id}/cancel`.replace(`{${"job_draft_id"}}`, encodeURIComponent(String(requestParameters.jobDraftId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 求人下書公開申請取り消し - 必要権限: [ALL_JOB_PUBLISH_APPLICATION, OWN_JOB_PUBLISH_APPLICATION]     - ALL_JOB_PUBLISH_APPLICATION: 他組織の求人も含め取り消し可能     - OWN_JOB_PUBLISH_APPLICATION: 自組織の求人のみ取り消し可能 - 実行可能条件     - is_deleted: False         - 条件を満たしていない場合はNotFoundエラー     - 下書き状況: 申請中         - 条件を満たしていない場合はCannotBeExecutedConditionsNotSatisfiedエラー - 更新データ情報     - 下書き状況: 編集中
     * 求人下書公開申請取り消し
     */
    async cancelJobDraft(requestParameters: CancelJobDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.cancelJobDraftRaw(requestParameters, initOverrides);
    }

    /**
     * 求人下書作成 - 必要権限: [ALL_JOB_EDIT, OWN_JOB_EDIT]     - ALL_JOB_EDIT: 他組織の求人も含め作成可能     - OWN_JOB_EDIT: 自組織の求人のみ作成可能 - 求人下書として作成する - 選考種別     - エージェント経由: 企業が人材紹介プランに加入している場合選択可能     - 直接採用: 企業がスカウトプランに加入している場合選択可能 - 作成者: ログインユーザーのフルネームを設定
     * 求人下書作成
     */
    async createJobDraftRaw(requestParameters: CreateJobDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobDraftDetailOut>> {
        if (requestParameters.jobDraftCreateIn === null || requestParameters.jobDraftCreateIn === undefined) {
            throw new runtime.RequiredError('jobDraftCreateIn','Required parameter requestParameters.jobDraftCreateIn was null or undefined when calling createJobDraft.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/jobs/drafts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JobDraftCreateInToJSON(requestParameters.jobDraftCreateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobDraftDetailOutFromJSON(jsonValue));
    }

    /**
     * 求人下書作成 - 必要権限: [ALL_JOB_EDIT, OWN_JOB_EDIT]     - ALL_JOB_EDIT: 他組織の求人も含め作成可能     - OWN_JOB_EDIT: 自組織の求人のみ作成可能 - 求人下書として作成する - 選考種別     - エージェント経由: 企業が人材紹介プランに加入している場合選択可能     - 直接採用: 企業がスカウトプランに加入している場合選択可能 - 作成者: ログインユーザーのフルネームを設定
     * 求人下書作成
     */
    async createJobDraft(requestParameters: CreateJobDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobDraftDetailOut> {
        const response = await this.createJobDraftRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 求人削除 - 必要権限: [ALL_JOB_EDIT, OWN_JOB_EDIT]     - ALL_JOB_EDIT: 他組織の求人も含め削除可能     - OWN_JOB_EDIT: 自組織の求人のみ削除可能 - 論理削除 - 削除可能条件     - is_deleted: False - 紐付いている求人下書も一緒に削除する
     * 求人削除
     */
    async deleteJobRaw(requestParameters: DeleteJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling deleteJob.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/jobs/{job_id}`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 求人削除 - 必要権限: [ALL_JOB_EDIT, OWN_JOB_EDIT]     - ALL_JOB_EDIT: 他組織の求人も含め削除可能     - OWN_JOB_EDIT: 自組織の求人のみ削除可能 - 論理削除 - 削除可能条件     - is_deleted: False - 紐付いている求人下書も一緒に削除する
     * 求人削除
     */
    async deleteJob(requestParameters: DeleteJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteJobRaw(requestParameters, initOverrides);
    }

    /**
     * 求人下書削除 - 必要権限: [ALL_JOB_EDIT, OWN_JOB_EDIT]     - ALL_JOB_EDIT: 他組織の求人も含め削除可能     - OWN_JOB_EDIT: 自組織の求人のみ削除可能 - 論理削除 - 削除可能条件     - is_deleted: False
     * 求人下書削除
     */
    async deleteJobDraftRaw(requestParameters: DeleteJobDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.jobDraftId === null || requestParameters.jobDraftId === undefined) {
            throw new runtime.RequiredError('jobDraftId','Required parameter requestParameters.jobDraftId was null or undefined when calling deleteJobDraft.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/jobs/drafts/{job_draft_id}`.replace(`{${"job_draft_id"}}`, encodeURIComponent(String(requestParameters.jobDraftId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 求人下書削除 - 必要権限: [ALL_JOB_EDIT, OWN_JOB_EDIT]     - ALL_JOB_EDIT: 他組織の求人も含め削除可能     - OWN_JOB_EDIT: 自組織の求人のみ削除可能 - 論理削除 - 削除可能条件     - is_deleted: False
     * 求人下書削除
     */
    async deleteJobDraft(requestParameters: DeleteJobDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteJobDraftRaw(requestParameters, initOverrides);
    }

    /**
     * 全求人詳細取得 - 必要権限: [RECRUITMENT] - データ取得条件     - company.recruit_plan_status = CompanyPlanStatus.NoTrial.SUBSCRIBED　(HR)     - job.posting_starts_at <= now <= job.posting_ends_at (HR)     - job.is_deleted = False - クエリパラメータ補足:     - access_type: [\"staff\", \"agent\"]     - free_word: 企業名かタイトル検索 (\"access_type\"が\"agent\"の場合のみ有効)  - 集計に関して補足情報     - 紹介ユーザー数: 選考タイプがスカウトかつ組織IDが自組織のものを集計     - 選考ステップ数: 選考ステップが2Xものを集計     - 内定数: 選考ステップが30ものを集計(要確認)
     * HR用全求人一覧取得
     */
    async getAllJobsListRaw(requestParameters: GetAllJobsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AllJobsListOut>> {
        if (requestParameters.accessType === null || requestParameters.accessType === undefined) {
            throw new runtime.RequiredError('accessType','Required parameter requestParameters.accessType was null or undefined when calling getAllJobsList.');
        }

        const queryParameters: any = {};

        if (requestParameters.accessType !== undefined) {
            queryParameters['access_type'] = requestParameters.accessType;
        }

        if (requestParameters.freeWord !== undefined) {
            queryParameters['free_word'] = requestParameters.freeWord;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/jobs/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AllJobsListOutFromJSON(jsonValue));
    }

    /**
     * 全求人詳細取得 - 必要権限: [RECRUITMENT] - データ取得条件     - company.recruit_plan_status = CompanyPlanStatus.NoTrial.SUBSCRIBED　(HR)     - job.posting_starts_at <= now <= job.posting_ends_at (HR)     - job.is_deleted = False - クエリパラメータ補足:     - access_type: [\"staff\", \"agent\"]     - free_word: 企業名かタイトル検索 (\"access_type\"が\"agent\"の場合のみ有効)  - 集計に関して補足情報     - 紹介ユーザー数: 選考タイプがスカウトかつ組織IDが自組織のものを集計     - 選考ステップ数: 選考ステップが2Xものを集計     - 内定数: 選考ステップが30ものを集計(要確認)
     * HR用全求人一覧取得
     */
    async getAllJobsList(requestParameters: GetAllJobsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AllJobsListOut> {
        const response = await this.getAllJobsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 求人詳細取得 - 必要権限: [ALL_JOB_VIEW, OWN_JOB_VIEW]     - ALL_JOB_VIEW: 他組織の求人も含め取得可能     - OWN_JOB_VIEW: 自組織の求人のみ取得可能 - データ取得条件     - is_deleted: False
     * 求人詳細取得
     */
    async getJobRaw(requestParameters: GetJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSchemasManageJobsJobDetailOutJobDetailOut>> {
        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling getJob.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/jobs/{job_id}`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppSchemasManageJobsJobDetailOutJobDetailOutFromJSON(jsonValue));
    }

    /**
     * 求人詳細取得 - 必要権限: [ALL_JOB_VIEW, OWN_JOB_VIEW]     - ALL_JOB_VIEW: 他組織の求人も含め取得可能     - OWN_JOB_VIEW: 自組織の求人のみ取得可能 - データ取得条件     - is_deleted: False
     * 求人詳細取得
     */
    async getJob(requestParameters: GetJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSchemasManageJobsJobDetailOutJobDetailOut> {
        const response = await this.getJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 求人アクセスログ取得 - 必要権限: [ALL_JOB_VIEW, OWN_JOB_VIEW]     - ALL_JOB_VIEW: 他組織の求人も含め取得可能     - OWN_JOB_VIEW: 自組織の求人のみ取得可能 - レスポンス     - ユーザー一覧         - user_id, username, 最終アクセス         - 同じユーザーは最新のアクセスのみ         - 並び順：最終アクセス日時降順     - 掲載期間     - 週毎の閲覧数、応募数のリスト         - 週の開始は月曜日、         - 応募数: SelectionType.SELF - 例外処理     - 求人が存在するか         - ない場合はNotFound     - 他組織の求人を見る場合は権限があるか         - ない場合はPermissionDenied
     * 求人アクセスログ取得
     */
    async getJobAccessLogRaw(requestParameters: GetJobAccessLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobAccessLogOut>> {
        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling getJobAccessLog.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/jobs/{job_id}/access`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobAccessLogOutFromJSON(jsonValue));
    }

    /**
     * 求人アクセスログ取得 - 必要権限: [ALL_JOB_VIEW, OWN_JOB_VIEW]     - ALL_JOB_VIEW: 他組織の求人も含め取得可能     - OWN_JOB_VIEW: 自組織の求人のみ取得可能 - レスポンス     - ユーザー一覧         - user_id, username, 最終アクセス         - 同じユーザーは最新のアクセスのみ         - 並び順：最終アクセス日時降順     - 掲載期間     - 週毎の閲覧数、応募数のリスト         - 週の開始は月曜日、         - 応募数: SelectionType.SELF - 例外処理     - 求人が存在するか         - ない場合はNotFound     - 他組織の求人を見る場合は権限があるか         - ない場合はPermissionDenied
     * 求人アクセスログ取得
     */
    async getJobAccessLog(requestParameters: GetJobAccessLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobAccessLogOut> {
        const response = await this.getJobAccessLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 求人下書詳細取得 - 必要権限: [ALL_JOB_VIEW, OWN_JOB_VIEW]     - ALL_JOB_VIEW: 他組織の求人も含め取得可能     - OWN_JOB_VIEW: 自組織の求人のみ取得可能 - データ取得条件     - is_deleted: False
     * 求人下書詳細取得
     */
    async getJobDraftRaw(requestParameters: GetJobDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobDraftDetailOut>> {
        if (requestParameters.jobDraftId === null || requestParameters.jobDraftId === undefined) {
            throw new runtime.RequiredError('jobDraftId','Required parameter requestParameters.jobDraftId was null or undefined when calling getJobDraft.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/jobs/drafts/{job_draft_id}`.replace(`{${"job_draft_id"}}`, encodeURIComponent(String(requestParameters.jobDraftId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobDraftDetailOutFromJSON(jsonValue));
    }

    /**
     * 求人下書詳細取得 - 必要権限: [ALL_JOB_VIEW, OWN_JOB_VIEW]     - ALL_JOB_VIEW: 他組織の求人も含め取得可能     - OWN_JOB_VIEW: 自組織の求人のみ取得可能 - データ取得条件     - is_deleted: False
     * 求人下書詳細取得
     */
    async getJobDraft(requestParameters: GetJobDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobDraftDetailOut> {
        const response = await this.getJobDraftRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 求人下書承認待ち一覧取得 - 必要権限: [JOB_PUBLISH_APPROVAL] - データ取得条件     - is_deleted: False     - 下書き状況: 申請中 - 並び順: id降順
     * 求人下書承認待ち一覧取得
     */
    async getJobDraftApplyingListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<JobDraftApplyingListOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/jobs/drafts/applying`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(JobDraftApplyingListOutFromJSON));
    }

    /**
     * 求人下書承認待ち一覧取得 - 必要権限: [JOB_PUBLISH_APPROVAL] - データ取得条件     - is_deleted: False     - 下書き状況: 申請中 - 並び順: id降順
     * 求人下書承認待ち一覧取得
     */
    async getJobDraftApplyingList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<JobDraftApplyingListOut>> {
        const response = await this.getJobDraftApplyingListRaw(initOverrides);
        return await response.value();
    }

    /**
     * 求人下書一覧取得 - 必要権限: [ALL_JOB_VIEW, OWN_JOB_VIEW]     - ALL_JOB_VIEW: 他組織の求人も含め取得可能     - OWN_JOB_VIEW: 自組織の求人のみ取得可能 - データ取得条件     - is_deleted: False     - JobDraftStatus.APPROVED(承認済み)以外のステータスを取得 - 並び順: ID降順
     * 求人下書一覧取得
     */
    async getJobDraftListRaw(requestParameters: GetJobDraftListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<JobDraftListOut>>> {
        const queryParameters: any = {};

        if (requestParameters.organizationId !== undefined) {
            queryParameters['organization_id'] = requestParameters.organizationId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/jobs/drafts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(JobDraftListOutFromJSON));
    }

    /**
     * 求人下書一覧取得 - 必要権限: [ALL_JOB_VIEW, OWN_JOB_VIEW]     - ALL_JOB_VIEW: 他組織の求人も含め取得可能     - OWN_JOB_VIEW: 自組織の求人のみ取得可能 - データ取得条件     - is_deleted: False     - JobDraftStatus.APPROVED(承認済み)以外のステータスを取得 - 並び順: ID降順
     * 求人下書一覧取得
     */
    async getJobDraftList(requestParameters: GetJobDraftListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<JobDraftListOut>> {
        const response = await this.getJobDraftListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 求人お気に入りユーザー一覧取得 - 必要権限: [RECRUITMENT] - レスポンス補足情報     - favorite_at: JobUserFavoriteのcreated_at
     * Get Job Favorite User List
     */
    async getJobFavoriteUserListRaw(requestParameters: GetJobFavoriteUserListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<JobFavoriteUserListOut>>> {
        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling getJobFavoriteUserList.');
        }

        if (requestParameters.accessType === null || requestParameters.accessType === undefined) {
            throw new runtime.RequiredError('accessType','Required parameter requestParameters.accessType was null or undefined when calling getJobFavoriteUserList.');
        }

        const queryParameters: any = {};

        if (requestParameters.accessType !== undefined) {
            queryParameters['access_type'] = requestParameters.accessType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/jobs/{job_id}/favorite-users`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(JobFavoriteUserListOutFromJSON));
    }

    /**
     * 求人お気に入りユーザー一覧取得 - 必要権限: [RECRUITMENT] - レスポンス補足情報     - favorite_at: JobUserFavoriteのcreated_at
     * Get Job Favorite User List
     */
    async getJobFavoriteUserList(requestParameters: GetJobFavoriteUserListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<JobFavoriteUserListOut>> {
        const response = await this.getJobFavoriteUserListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 求人一覧取得 - 必要権限: [ALL_JOB_VIEW, OWN_JOB_VIEW]     - ALL_JOB_VIEW: 他組織の求人も含め取得可能     - OWN_JOB_VIEW: 自組織の求人のみ取得可能 - データ取得条件     - is_deleted: False     - is_whole_organization: Trueの時は全組織求人取得する - レスポンスデータ補足情報     - 応募数: 求人に紐づく選考情報をカウント(選考タイプが自己応募のもののみカウント）     - 閲覧数: 求人閲覧履歴からカウント - 並び順: ID降順
     * 求人一覧取得
     */
    async getJobListRaw(requestParameters: GetJobListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<JobListOut>>> {
        const queryParameters: any = {};

        if (requestParameters.organizationId !== undefined) {
            queryParameters['organization_id'] = requestParameters.organizationId;
        }

        if (requestParameters.isWholeOrganization !== undefined) {
            queryParameters['is_whole_organization'] = requestParameters.isWholeOrganization;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/jobs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(JobListOutFromJSON));
    }

    /**
     * 求人一覧取得 - 必要権限: [ALL_JOB_VIEW, OWN_JOB_VIEW]     - ALL_JOB_VIEW: 他組織の求人も含め取得可能     - OWN_JOB_VIEW: 自組織の求人のみ取得可能 - データ取得条件     - is_deleted: False     - is_whole_organization: Trueの時は全組織求人取得する - レスポンスデータ補足情報     - 応募数: 求人に紐づく選考情報をカウント(選考タイプが自己応募のもののみカウント）     - 閲覧数: 求人閲覧履歴からカウント - 並び順: ID降順
     * 求人一覧取得
     */
    async getJobList(requestParameters: GetJobListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<JobListOut>> {
        const response = await this.getJobListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 求人紹介ユーザー一覧 - 必要権限: [RECRUITMENT] - レスポンス     - 求人情報         - 企業名、職種名、求人名、勤務地、必要レベル、必要言語、ユーザーリスト             - ユーザーリスト                 - ユーザー名、住所、現職、スキルレベル、使用言語、選考ステータス、紹介日
     * Get Job Scout User List
     */
    async getJobScoutUserListRaw(requestParameters: GetJobScoutUserListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobScoutUserListOut>> {
        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling getJobScoutUserList.');
        }

        if (requestParameters.accessType === null || requestParameters.accessType === undefined) {
            throw new runtime.RequiredError('accessType','Required parameter requestParameters.accessType was null or undefined when calling getJobScoutUserList.');
        }

        const queryParameters: any = {};

        if (requestParameters.accessType !== undefined) {
            queryParameters['access_type'] = requestParameters.accessType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/jobs/{job_id}/scout-users`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobScoutUserListOutFromJSON(jsonValue));
    }

    /**
     * 求人紹介ユーザー一覧 - 必要権限: [RECRUITMENT] - レスポンス     - 求人情報         - 企業名、職種名、求人名、勤務地、必要レベル、必要言語、ユーザーリスト             - ユーザーリスト                 - ユーザー名、住所、現職、スキルレベル、使用言語、選考ステータス、紹介日
     * Get Job Scout User List
     */
    async getJobScoutUserList(requestParameters: GetJobScoutUserListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobScoutUserListOut> {
        const response = await this.getJobScoutUserListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 求人にユーザーを紹介する 必要権限: [RECRUITMENT]
     * 求人にユーザーを紹介するAPI
     */
    async introduceJobToUserRaw(requestParameters: IntroduceJobToUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling introduceJobToUser.');
        }

        if (requestParameters.jobUserId === null || requestParameters.jobUserId === undefined) {
            throw new runtime.RequiredError('jobUserId','Required parameter requestParameters.jobUserId was null or undefined when calling introduceJobToUser.');
        }

        if (requestParameters.introduceJobUserIn === null || requestParameters.introduceJobUserIn === undefined) {
            throw new runtime.RequiredError('introduceJobUserIn','Required parameter requestParameters.introduceJobUserIn was null or undefined when calling introduceJobToUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/jobs/{job_id}/introduce-user/{job_user_id}`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))).replace(`{${"job_user_id"}}`, encodeURIComponent(String(requestParameters.jobUserId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IntroduceJobUserInToJSON(requestParameters.introduceJobUserIn),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 求人にユーザーを紹介する 必要権限: [RECRUITMENT]
     * 求人にユーザーを紹介するAPI
     */
    async introduceJobToUser(requestParameters: IntroduceJobToUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.introduceJobToUserRaw(requestParameters, initOverrides);
    }

    /**
     * 求人公開 - 必要権限: [JOB_PUBLISH, JOB_PUBLISH_APPROVAL]     - JOB_PUBLISH: 自組織の求人のみ実行可能     - JOB_PUBLISH_APPROVAL: 他組織の求人も実行可能 - 444に対してSlack通知を行う - 実行可能条件     - is_deleted: False         - 条件を満たしていない場合はNotFoundエラー     - is_published: False         - 条件を満たしていない場合はCannotBeExecutedConditionsNotSatisfiedエラー - 更新データ情報     - is_published: True
     * 求人公開
     */
    async publishJobRaw(requestParameters: PublishJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling publishJob.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/jobs/{job_id}/publish`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 求人公開 - 必要権限: [JOB_PUBLISH, JOB_PUBLISH_APPROVAL]     - JOB_PUBLISH: 自組織の求人のみ実行可能     - JOB_PUBLISH_APPROVAL: 他組織の求人も実行可能 - 444に対してSlack通知を行う - 実行可能条件     - is_deleted: False         - 条件を満たしていない場合はNotFoundエラー     - is_published: False         - 条件を満たしていない場合はCannotBeExecutedConditionsNotSatisfiedエラー - 更新データ情報     - is_published: True
     * 求人公開
     */
    async publishJob(requestParameters: PublishJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.publishJobRaw(requestParameters, initOverrides);
    }

    /**
     * 求人下書公開申請却下 - 必要権限: [JOB_PUBLISH_APPROVAL] - 444に対してSlack通知を行う - 実行可能条件     - is_deleted: False         - 条件を満たしていない場合はNotFoundエラー     - 下書き状況: 申請中         - 条件を満たしていない場合はCannotBeExecutedConditionsNotSatisfiedエラー - 更新データ情報     - 下書き状況: 却下     - 却下理由: リクエストデータで更新     - 再申請かどうか: True
     * 求人下書公開申請却下
     */
    async rejectJobDraftRaw(requestParameters: RejectJobDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.jobDraftId === null || requestParameters.jobDraftId === undefined) {
            throw new runtime.RequiredError('jobDraftId','Required parameter requestParameters.jobDraftId was null or undefined when calling rejectJobDraft.');
        }

        if (requestParameters.jobDraftRejectIn === null || requestParameters.jobDraftRejectIn === undefined) {
            throw new runtime.RequiredError('jobDraftRejectIn','Required parameter requestParameters.jobDraftRejectIn was null or undefined when calling rejectJobDraft.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/jobs/drafts/{job_draft_id}/reject`.replace(`{${"job_draft_id"}}`, encodeURIComponent(String(requestParameters.jobDraftId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: JobDraftRejectInToJSON(requestParameters.jobDraftRejectIn),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 求人下書公開申請却下 - 必要権限: [JOB_PUBLISH_APPROVAL] - 444に対してSlack通知を行う - 実行可能条件     - is_deleted: False         - 条件を満たしていない場合はNotFoundエラー     - 下書き状況: 申請中         - 条件を満たしていない場合はCannotBeExecutedConditionsNotSatisfiedエラー - 更新データ情報     - 下書き状況: 却下     - 却下理由: リクエストデータで更新     - 再申請かどうか: True
     * 求人下書公開申請却下
     */
    async rejectJobDraft(requestParameters: RejectJobDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rejectJobDraftRaw(requestParameters, initOverrides);
    }

    /**
     * 求人非公開 - 必要権限: [JOB_PUBLISH, JOB_PUBLISH_APPROVAL]     - JOB_PUBLISH: 自組織の求人のみ実行可能     - JOB_PUBLISH_APPROVAL: 他組織の求人も実行可能 - 444に対してSlack通知を行う - 実行可能条件     - is_deleted: False         - 条件を満たしていない場合はNotFoundエラー     - is_published: True         - 条件を満たしていない場合はCannotBeExecutedConditionsNotSatisfiedエラー - 更新データ情報     - is_published: False
     * 求人非公開
     */
    async unpublishJobRaw(requestParameters: UnpublishJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling unpublishJob.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/jobs/{job_id}/unpublish`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 求人非公開 - 必要権限: [JOB_PUBLISH, JOB_PUBLISH_APPROVAL]     - JOB_PUBLISH: 自組織の求人のみ実行可能     - JOB_PUBLISH_APPROVAL: 他組織の求人も実行可能 - 444に対してSlack通知を行う - 実行可能条件     - is_deleted: False         - 条件を満たしていない場合はNotFoundエラー     - is_published: True         - 条件を満たしていない場合はCannotBeExecutedConditionsNotSatisfiedエラー - 更新データ情報     - is_published: False
     * 求人非公開
     */
    async unpublishJob(requestParameters: UnpublishJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unpublishJobRaw(requestParameters, initOverrides);
    }

    /**
     * 求人下書更新 - 必要権限: [ALL_JOB_EDIT, OWN_JOB_EDIT]     - ALL_JOB_EDIT: 他組織の求人も含め更新可能     - OWN_JOB_EDIT: 自組織の求人のみ更新可能 - 削除済みのものも更新可能で、更新後は削除されていない状態になる - 部分更新はできずすべて上書き - 組織と選考種別は変更不可 - 実行可能条件     - 下書き状況: 編集中 or 申請中 or 却下 or is_deleted=True         - 条件を満たしていない場合はCannotBeExecutedConditionsNotSatisfiedエラー - 更新データ補足情報     - 更新者: ログインユーザーのフルネーム     - 下書き状況: 編集中     - is_deleted: False
     * 求人下書更新
     */
    async updateJobDraftRaw(requestParameters: UpdateJobDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobDraftDetailOut>> {
        if (requestParameters.jobDraftId === null || requestParameters.jobDraftId === undefined) {
            throw new runtime.RequiredError('jobDraftId','Required parameter requestParameters.jobDraftId was null or undefined when calling updateJobDraft.');
        }

        if (requestParameters.jobDraftUpdateIn === null || requestParameters.jobDraftUpdateIn === undefined) {
            throw new runtime.RequiredError('jobDraftUpdateIn','Required parameter requestParameters.jobDraftUpdateIn was null or undefined when calling updateJobDraft.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/jobs/drafts/{job_draft_id}`.replace(`{${"job_draft_id"}}`, encodeURIComponent(String(requestParameters.jobDraftId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: JobDraftUpdateInToJSON(requestParameters.jobDraftUpdateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobDraftDetailOutFromJSON(jsonValue));
    }

    /**
     * 求人下書更新 - 必要権限: [ALL_JOB_EDIT, OWN_JOB_EDIT]     - ALL_JOB_EDIT: 他組織の求人も含め更新可能     - OWN_JOB_EDIT: 自組織の求人のみ更新可能 - 削除済みのものも更新可能で、更新後は削除されていない状態になる - 部分更新はできずすべて上書き - 組織と選考種別は変更不可 - 実行可能条件     - 下書き状況: 編集中 or 申請中 or 却下 or is_deleted=True         - 条件を満たしていない場合はCannotBeExecutedConditionsNotSatisfiedエラー - 更新データ補足情報     - 更新者: ログインユーザーのフルネーム     - 下書き状況: 編集中     - is_deleted: False
     * 求人下書更新
     */
    async updateJobDraft(requestParameters: UpdateJobDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobDraftDetailOut> {
        const response = await this.updateJobDraftRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
