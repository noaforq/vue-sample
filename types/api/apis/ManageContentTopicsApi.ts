/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  ContentTopicCreateIn,
  ContentTopicDetailOut,
  ContentTopicListOut,
  ContentTopicUpdateIn,
  ValidationError,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    ContentTopicCreateInFromJSON,
    ContentTopicCreateInToJSON,
    ContentTopicDetailOutFromJSON,
    ContentTopicDetailOutToJSON,
    ContentTopicListOutFromJSON,
    ContentTopicListOutToJSON,
    ContentTopicUpdateInFromJSON,
    ContentTopicUpdateInToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface CreateContentTopicRequest {
    contentTopicCreateIn: ContentTopicCreateIn;
}

export interface DeleteContentTopicRequest {
    contentTopicId: number;
}

export interface GetContentTopicRequest {
    contentTopicId: number;
}

export interface UpdateContentTopicRequest {
    contentTopicId: number;
    contentTopicUpdateIn: ContentTopicUpdateIn;
}

/**
 * 
 */
export class ManageContentTopicsApi extends runtime.BaseAPI {

    /**
     * コンテンツトピックを作成 - 必要権限: [ASSETS_EDIT]
     * コンテンツトピック作成
     */
    async createContentTopicRaw(requestParameters: CreateContentTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentTopicDetailOut>> {
        if (requestParameters.contentTopicCreateIn === null || requestParameters.contentTopicCreateIn === undefined) {
            throw new runtime.RequiredError('contentTopicCreateIn','Required parameter requestParameters.contentTopicCreateIn was null or undefined when calling createContentTopic.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/content-topics`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContentTopicCreateInToJSON(requestParameters.contentTopicCreateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentTopicDetailOutFromJSON(jsonValue));
    }

    /**
     * コンテンツトピックを作成 - 必要権限: [ASSETS_EDIT]
     * コンテンツトピック作成
     */
    async createContentTopic(requestParameters: CreateContentTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentTopicDetailOut> {
        const response = await this.createContentTopicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * コンテンツトピックを削除 - 必要権限: [ASSETS_EDIT]
     * コンテンツトピック削除
     */
    async deleteContentTopicRaw(requestParameters: DeleteContentTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.contentTopicId === null || requestParameters.contentTopicId === undefined) {
            throw new runtime.RequiredError('contentTopicId','Required parameter requestParameters.contentTopicId was null or undefined when calling deleteContentTopic.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/content-topics/{content_topic_id}`.replace(`{${"content_topic_id"}}`, encodeURIComponent(String(requestParameters.contentTopicId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * コンテンツトピックを削除 - 必要権限: [ASSETS_EDIT]
     * コンテンツトピック削除
     */
    async deleteContentTopic(requestParameters: DeleteContentTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteContentTopicRaw(requestParameters, initOverrides);
    }

    /**
     * コンテンツトピック詳細を取得 - 必要権限: [ASSETS_EDIT]
     * コンテンツトピック詳細取得
     */
    async getContentTopicRaw(requestParameters: GetContentTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentTopicDetailOut>> {
        if (requestParameters.contentTopicId === null || requestParameters.contentTopicId === undefined) {
            throw new runtime.RequiredError('contentTopicId','Required parameter requestParameters.contentTopicId was null or undefined when calling getContentTopic.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/content-topics/{content_topic_id}`.replace(`{${"content_topic_id"}}`, encodeURIComponent(String(requestParameters.contentTopicId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentTopicDetailOutFromJSON(jsonValue));
    }

    /**
     * コンテンツトピック詳細を取得 - 必要権限: [ASSETS_EDIT]
     * コンテンツトピック詳細取得
     */
    async getContentTopic(requestParameters: GetContentTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentTopicDetailOut> {
        const response = await this.getContentTopicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * コンテンツトピック一覧を取得 - 必要権限: [ASSETS_EDIT] - 並び順: id降順
     * コンテンツトピック一覧取得
     */
    async getContentTopicListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ContentTopicListOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/content-topics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ContentTopicListOutFromJSON));
    }

    /**
     * コンテンツトピック一覧を取得 - 必要権限: [ASSETS_EDIT] - 並び順: id降順
     * コンテンツトピック一覧取得
     */
    async getContentTopicList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ContentTopicListOut>> {
        const response = await this.getContentTopicListRaw(initOverrides);
        return await response.value();
    }

    /**
     * コンテンツトピックを更新 - 必要権限: [ASSETS_EDIT]
     * コンテンツトピック更新
     */
    async updateContentTopicRaw(requestParameters: UpdateContentTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentTopicDetailOut>> {
        if (requestParameters.contentTopicId === null || requestParameters.contentTopicId === undefined) {
            throw new runtime.RequiredError('contentTopicId','Required parameter requestParameters.contentTopicId was null or undefined when calling updateContentTopic.');
        }

        if (requestParameters.contentTopicUpdateIn === null || requestParameters.contentTopicUpdateIn === undefined) {
            throw new runtime.RequiredError('contentTopicUpdateIn','Required parameter requestParameters.contentTopicUpdateIn was null or undefined when calling updateContentTopic.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/content-topics/{content_topic_id}`.replace(`{${"content_topic_id"}}`, encodeURIComponent(String(requestParameters.contentTopicId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ContentTopicUpdateInToJSON(requestParameters.contentTopicUpdateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentTopicDetailOutFromJSON(jsonValue));
    }

    /**
     * コンテンツトピックを更新 - 必要権限: [ASSETS_EDIT]
     * コンテンツトピック更新
     */
    async updateContentTopic(requestParameters: UpdateContentTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentTopicDetailOut> {
        const response = await this.updateContentTopicRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
