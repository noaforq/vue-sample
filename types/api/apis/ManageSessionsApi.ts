/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  AppSchemasManageSessionsSessionContentListOutSessionContentListOut,
  AppSchemasManageSessionsSessionDetailOutSessionDetailOut,
  AppSchemasManageSessionsSessionQuestionResultListOutSessionQuestionResultListOut,
  CheatCheckType,
  FolderConf,
  QuestionType,
  SessionCheatingCheckUserListOut,
  SessionCompanyDocumentListOut,
  SessionContentAddIn,
  SessionCreateIn,
  SessionErrorListOut,
  SessionHeaderListOut,
  SessionListCountOut,
  SessionListOut,
  SessionPersonalRecordOut,
  SessionPortfolioOut,
  SessionQuestionRecordListOut,
  SessionQuestionRecordPerUserListOut,
  SessionQuestionnaireListOut,
  SessionRankingListOut,
  SessionRealTimeRankingListOut,
  SessionRecordCSVIn,
  SessionSearchCodeOut,
  SessionTermDetailOut,
  SessionThreadCreateIn,
  SessionThreadListOut,
  SessionUpdateIn,
  SessionUserAddIn,
  SessionUserAddOut,
  SessionUserResultListOut,
  SessionUsersAddListOut,
  SessionUsersDeleteIn,
  SessionUsersListOut,
  SessionUsersOutListOut,
  SkillCheckSessionUsersDeleteIn,
  UserResultDetailOut,
  ValidationError,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    AppSchemasManageSessionsSessionContentListOutSessionContentListOutFromJSON,
    AppSchemasManageSessionsSessionContentListOutSessionContentListOutToJSON,
    AppSchemasManageSessionsSessionDetailOutSessionDetailOutFromJSON,
    AppSchemasManageSessionsSessionDetailOutSessionDetailOutToJSON,
    AppSchemasManageSessionsSessionQuestionResultListOutSessionQuestionResultListOutFromJSON,
    AppSchemasManageSessionsSessionQuestionResultListOutSessionQuestionResultListOutToJSON,
    CheatCheckTypeFromJSON,
    CheatCheckTypeToJSON,
    FolderConfFromJSON,
    FolderConfToJSON,
    QuestionTypeFromJSON,
    QuestionTypeToJSON,
    SessionCheatingCheckUserListOutFromJSON,
    SessionCheatingCheckUserListOutToJSON,
    SessionCompanyDocumentListOutFromJSON,
    SessionCompanyDocumentListOutToJSON,
    SessionContentAddInFromJSON,
    SessionContentAddInToJSON,
    SessionCreateInFromJSON,
    SessionCreateInToJSON,
    SessionErrorListOutFromJSON,
    SessionErrorListOutToJSON,
    SessionHeaderListOutFromJSON,
    SessionHeaderListOutToJSON,
    SessionListCountOutFromJSON,
    SessionListCountOutToJSON,
    SessionListOutFromJSON,
    SessionListOutToJSON,
    SessionPersonalRecordOutFromJSON,
    SessionPersonalRecordOutToJSON,
    SessionPortfolioOutFromJSON,
    SessionPortfolioOutToJSON,
    SessionQuestionRecordListOutFromJSON,
    SessionQuestionRecordListOutToJSON,
    SessionQuestionRecordPerUserListOutFromJSON,
    SessionQuestionRecordPerUserListOutToJSON,
    SessionQuestionnaireListOutFromJSON,
    SessionQuestionnaireListOutToJSON,
    SessionRankingListOutFromJSON,
    SessionRankingListOutToJSON,
    SessionRealTimeRankingListOutFromJSON,
    SessionRealTimeRankingListOutToJSON,
    SessionRecordCSVInFromJSON,
    SessionRecordCSVInToJSON,
    SessionSearchCodeOutFromJSON,
    SessionSearchCodeOutToJSON,
    SessionTermDetailOutFromJSON,
    SessionTermDetailOutToJSON,
    SessionThreadCreateInFromJSON,
    SessionThreadCreateInToJSON,
    SessionThreadListOutFromJSON,
    SessionThreadListOutToJSON,
    SessionUpdateInFromJSON,
    SessionUpdateInToJSON,
    SessionUserAddInFromJSON,
    SessionUserAddInToJSON,
    SessionUserAddOutFromJSON,
    SessionUserAddOutToJSON,
    SessionUserResultListOutFromJSON,
    SessionUserResultListOutToJSON,
    SessionUsersAddListOutFromJSON,
    SessionUsersAddListOutToJSON,
    SessionUsersDeleteInFromJSON,
    SessionUsersDeleteInToJSON,
    SessionUsersListOutFromJSON,
    SessionUsersListOutToJSON,
    SessionUsersOutListOutFromJSON,
    SessionUsersOutListOutToJSON,
    SkillCheckSessionUsersDeleteInFromJSON,
    SkillCheckSessionUsersDeleteInToJSON,
    UserResultDetailOutFromJSON,
    UserResultDetailOutToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface AddSessionContentRequest {
    sessionId: number;
    sessionContentAddIn: Array<SessionContentAddIn>;
}

export interface AddSkillCheckSessionUsersRequest {
    sessionId: number;
    sessionUserAddIn: SessionUserAddIn;
}

export interface CreateSessionRequest {
    eventId: number;
    sessionCreateIn: SessionCreateIn;
}

export interface CreateSessionThreadRequest {
    sessionId: number;
    sessionThreadCreateIn: SessionThreadCreateIn;
}

export interface DeleteSessionRequest {
    sessionId: number;
}

export interface DeleteSessionThreadRequest {
    sessionId: number;
    threadId: number;
}

export interface DeleteSessionUsersRequest {
    sessionId: number;
    sessionUsersDeleteIn: SessionUsersDeleteIn;
}

export interface DeleteSkillCheckUsersRequest {
    sessionId: number;
    skillCheckSessionUsersDeleteIn: SkillCheckSessionUsersDeleteIn;
}

export interface DownloadSessionRecordsCsvRequest {
    sessionId: number;
    sessionRecordCSVIn: SessionRecordCSVIn;
}

export interface DownloadSessionRecordsDetailCsvRequest {
    sessionId: number;
}

export interface DownloadSessionSubmittedCodeForZipRequest {
    sessionId: number;
    includeStudentNumber?: boolean;
    folderConfig?: FolderConf;
}

export interface DownloadSkillCheckUserListRequest {
    sessionId: number;
    includePassword?: boolean;
}

export interface ExecuteCheatingCheckRequest {
    sessionId: number;
    checkType?: CheatCheckType;
}

export interface GetSessionCompanyDocumentsRequest {
    sessionId: number;
}

export interface GetSessionContentListRequest {
    sessionId: number;
    questionFiltered?: boolean;
    questionTypes?: Array<QuestionType>;
}

export interface GetSessionDetailRequest {
    sessionId: number;
}

export interface GetSessionErrorListRequest {
    sessionId: number;
    userId: number;
}

export interface GetSessionHeaderRequest {
    sessionId: number;
}

export interface GetSessionListRequest {
    eventId?: number;
    limit?: number;
    offset?: number;
    search?: string;
}

export interface GetSessionListCountRequest {
    eventId?: number;
    limit?: number;
    offset?: number;
    search?: string;
}

export interface GetSessionPersonalRecordRequest {
    sessionId: number;
    userId: number;
}

export interface GetSessionPortfolioRequest {
    sessionId: number;
    userId: number;
}

export interface GetSessionQuestionResultListRequest {
    sessionId: number;
}

export interface GetSessionQuestionnaireRequest {
    sessionId: number;
}

export interface GetSessionRankingDetailRequest {
    sessionId: number;
    userId: number;
}

export interface GetSessionRankingListRequest {
    sessionId: number;
}

export interface GetSessionRealTimeRankingListRequest {
    sessionId: number;
}

export interface GetSessionRecordsPerQuestionRequest {
    sessionId: number;
}

export interface GetSessionRecordsPerUserRequest {
    sessionId: number;
}

export interface GetSessionThreadsRequest {
    sessionId: number;
}

export interface GetSessionUserResultListRequest {
    sessionId: number;
}

export interface GetSessionUsersRequest {
    sessionId: number;
}

export interface GetSessionUsersOutRequest {
    sessionId: number;
}

export interface GetSkillCheckUsersAdditionalListRequest {
    sessionId: number;
}

export interface PauseSessionRequest {
    sessionId: number;
}

export interface RegisterSessionTermRequest {
    sessionTermId: number;
    sessionId: number;
}

export interface RestartCertificateExamUserTimerRequest {
    sessionId: number;
    userId: number;
    isReset?: boolean;
}

export interface ResumeSessionRequest {
    sessionId: number;
}

export interface SearchSessionSubmittedCodeRequest {
    sessionId: number;
    contentId: number;
    keyword: string;
}

export interface UnregisterSessionTermRequest {
    sessionId: number;
}

export interface UpdateSessionRequest {
    sessionId: number;
    sessionUpdateIn: SessionUpdateIn;
}

/**
 * 
 */
export class ManageSessionsApi extends runtime.BaseAPI {

    /**
     * セッションコンテンツ追加(更新) - 必要権限: [OWN_SESSION_EDIT] [ALL_EVENT_AND_SESSION_EDIT] - 実行可能条件     - [ALL_EVENT_AND_SESSION_EDIT]を持つ場合         - 自組織・他組織イベントセッションを実行可能     - [ALL_EVENT_AND_SESSION_EDIT]を持たない かつ [OWN_SESSION_EDIT]を持つ場合         - 自組織イベントセッションのみ実行可能     - Session.is_deleted = False - content_add_inが全てNoneの場合は、DBを変更しない
     * セッションコンテンツ追加
     */
    async addSessionContentRaw(requestParameters: AddSessionContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSchemasManageSessionsSessionDetailOutSessionDetailOut>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling addSessionContent.');
        }

        if (requestParameters.sessionContentAddIn === null || requestParameters.sessionContentAddIn === undefined) {
            throw new runtime.RequiredError('sessionContentAddIn','Required parameter requestParameters.sessionContentAddIn was null or undefined when calling addSessionContent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/sessions/{session_id}/contents`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.sessionContentAddIn.map(SessionContentAddInToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppSchemasManageSessionsSessionDetailOutSessionDetailOutFromJSON(jsonValue));
    }

    /**
     * セッションコンテンツ追加(更新) - 必要権限: [OWN_SESSION_EDIT] [ALL_EVENT_AND_SESSION_EDIT] - 実行可能条件     - [ALL_EVENT_AND_SESSION_EDIT]を持つ場合         - 自組織・他組織イベントセッションを実行可能     - [ALL_EVENT_AND_SESSION_EDIT]を持たない かつ [OWN_SESSION_EDIT]を持つ場合         - 自組織イベントセッションのみ実行可能     - Session.is_deleted = False - content_add_inが全てNoneの場合は、DBを変更しない
     * セッションコンテンツ追加
     */
    async addSessionContent(requestParameters: AddSessionContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSchemasManageSessionsSessionDetailOutSessionDetailOut> {
        const response = await this.addSessionContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * スキルチェックセッション（企業作成セッション）へ参加者を登録する - 必要権限：[OWN_EVENT_EDIT]     - 自組織主催イベントの企業アカウントのみ実行できる - session_idに紐づくセッションへ参加者（スキルチェックアカウント）を登録する - session_idのセッションが削除済み、存在しない場合NotFound
     * スキルチェックセッションユーザー登録
     */
    async addSkillCheckSessionUsersRaw(requestParameters: AddSkillCheckSessionUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SessionUserAddOut>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling addSkillCheckSessionUsers.');
        }

        if (requestParameters.sessionUserAddIn === null || requestParameters.sessionUserAddIn === undefined) {
            throw new runtime.RequiredError('sessionUserAddIn','Required parameter requestParameters.sessionUserAddIn was null or undefined when calling addSkillCheckSessionUsers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/sessions/{session_id}/skill-check-users`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SessionUserAddInToJSON(requestParameters.sessionUserAddIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionUserAddOutFromJSON(jsonValue));
    }

    /**
     * スキルチェックセッション（企業作成セッション）へ参加者を登録する - 必要権限：[OWN_EVENT_EDIT]     - 自組織主催イベントの企業アカウントのみ実行できる - session_idに紐づくセッションへ参加者（スキルチェックアカウント）を登録する - session_idのセッションが削除済み、存在しない場合NotFound
     * スキルチェックセッションユーザー登録
     */
    async addSkillCheckSessionUsers(requestParameters: AddSkillCheckSessionUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SessionUserAddOut> {
        const response = await this.addSkillCheckSessionUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * セッション作成 - 必要権限: [OWN_SESSION_EDIT] [ALL_EVENT_AND_SESSION_EDIT] - 各項目設定可能条件     - 全アカウント・全イベント目的で共通で設定可能         - name         - starts_at         - ends_at         - location         - リアルタイムランキング表示             - 表示人数             - 参加者にランキングを表示する         - 参加者にランキング表示     - スタッフ設定可能項目         - パスワードつきセッション             - パスワード: パスワードつきセッション時必須(自動生成)         - 練習用セッション         - 参加ユーザー制限         - 卒業年度制限-以上，以下         - リアルタイムランキング表示             - 実名表示             - 所属組織         - 参加者にアンケートを表示する         - アンケート詳細設定         - Googleフォーム解答ページURL         - 説明文         - Googleフォーム編集ページURL[管理者のみ表示]     - 学校アカウント設定可能項目         - パスワードつきセッション             - パスワード: パスワードつきセッション時必須(自動生成)         - 練習用セッション         - 小テスト用セッション         - ランダムセッション         - 問題数         - 挑戦状況表示         - リアルタイムランキング表示             - 実名表示             - 所属組織             - 補足情報             - 学籍番号     - 検定試験のみ設定可能項目         - 試験時間(分)     - プログラミングコンテストのみ設定可能項目         - 求人紹介規約の同意を要求する - 作成可能条件     - [ALL_EVENT_AND_SESSION_EDIT]を持つ場合         - 自組織・他組織イベントセッション作成可能     - [ALL_EVENT_AND_SESSION_EDIT]を持たない かつ [OWN_SESSION_EDIT]を持つ場合         - 自組織イベントセッションのみ作成可能
     * セッション作成
     */
    async createSessionRaw(requestParameters: CreateSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSchemasManageSessionsSessionDetailOutSessionDetailOut>> {
        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling createSession.');
        }

        if (requestParameters.sessionCreateIn === null || requestParameters.sessionCreateIn === undefined) {
            throw new runtime.RequiredError('sessionCreateIn','Required parameter requestParameters.sessionCreateIn was null or undefined when calling createSession.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/sessions/{event_id}`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters.eventId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SessionCreateInToJSON(requestParameters.sessionCreateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppSchemasManageSessionsSessionDetailOutSessionDetailOutFromJSON(jsonValue));
    }

    /**
     * セッション作成 - 必要権限: [OWN_SESSION_EDIT] [ALL_EVENT_AND_SESSION_EDIT] - 各項目設定可能条件     - 全アカウント・全イベント目的で共通で設定可能         - name         - starts_at         - ends_at         - location         - リアルタイムランキング表示             - 表示人数             - 参加者にランキングを表示する         - 参加者にランキング表示     - スタッフ設定可能項目         - パスワードつきセッション             - パスワード: パスワードつきセッション時必須(自動生成)         - 練習用セッション         - 参加ユーザー制限         - 卒業年度制限-以上，以下         - リアルタイムランキング表示             - 実名表示             - 所属組織         - 参加者にアンケートを表示する         - アンケート詳細設定         - Googleフォーム解答ページURL         - 説明文         - Googleフォーム編集ページURL[管理者のみ表示]     - 学校アカウント設定可能項目         - パスワードつきセッション             - パスワード: パスワードつきセッション時必須(自動生成)         - 練習用セッション         - 小テスト用セッション         - ランダムセッション         - 問題数         - 挑戦状況表示         - リアルタイムランキング表示             - 実名表示             - 所属組織             - 補足情報             - 学籍番号     - 検定試験のみ設定可能項目         - 試験時間(分)     - プログラミングコンテストのみ設定可能項目         - 求人紹介規約の同意を要求する - 作成可能条件     - [ALL_EVENT_AND_SESSION_EDIT]を持つ場合         - 自組織・他組織イベントセッション作成可能     - [ALL_EVENT_AND_SESSION_EDIT]を持たない かつ [OWN_SESSION_EDIT]を持つ場合         - 自組織イベントセッションのみ作成可能
     * セッション作成
     */
    async createSession(requestParameters: CreateSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSchemasManageSessionsSessionDetailOutSessionDetailOut> {
        const response = await this.createSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * セッションスレッドを作成 - 必要権限：[OWN_SESSION_EDIT] [PRO_SESSION_VIEW] [TECHTHON_SESSION_VIEW] - session_id, ログインユーザーに紐づくセッションスレッドを新規作成する - session_idのセッションが削除済み、存在しない場合NotFound
     * セッションスレッド作成
     */
    async createSessionThreadRaw(requestParameters: CreateSessionThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling createSessionThread.');
        }

        if (requestParameters.sessionThreadCreateIn === null || requestParameters.sessionThreadCreateIn === undefined) {
            throw new runtime.RequiredError('sessionThreadCreateIn','Required parameter requestParameters.sessionThreadCreateIn was null or undefined when calling createSessionThread.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/sessions/{session_id}/threads`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SessionThreadCreateInToJSON(requestParameters.sessionThreadCreateIn),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * セッションスレッドを作成 - 必要権限：[OWN_SESSION_EDIT] [PRO_SESSION_VIEW] [TECHTHON_SESSION_VIEW] - session_id, ログインユーザーに紐づくセッションスレッドを新規作成する - session_idのセッションが削除済み、存在しない場合NotFound
     * セッションスレッド作成
     */
    async createSessionThread(requestParameters: CreateSessionThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.createSessionThreadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * セッション削除 - 必要権限: [ALL_EVENT_AND_SESSION_EDIT] [OWN_SESSION_EDIT] - 論理削除 - 削除可能条件     - [ALL_EVENT_AND_SESSION_EDIT]を持つ場合         - 自組織・他組織イベントセッション削除可能     - [ALL_EVENT_AND_SESSION_EDIT]を持たない かつ [OWN_SESSION_EDIT]を持つ 場合         - 自組織イベントセッションのみ削除可能     - is_deleted == False
     * セッション削除
     */
    async deleteSessionRaw(requestParameters: DeleteSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling deleteSession.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sessions/{session_id}`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * セッション削除 - 必要権限: [ALL_EVENT_AND_SESSION_EDIT] [OWN_SESSION_EDIT] - 論理削除 - 削除可能条件     - [ALL_EVENT_AND_SESSION_EDIT]を持つ場合         - 自組織・他組織イベントセッション削除可能     - [ALL_EVENT_AND_SESSION_EDIT]を持たない かつ [OWN_SESSION_EDIT]を持つ 場合         - 自組織イベントセッションのみ削除可能     - is_deleted == False
     * セッション削除
     */
    async deleteSession(requestParameters: DeleteSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSessionRaw(requestParameters, initOverrides);
    }

    /**
     * セッションスレッドの投稿を論理削除 - 必要権限:[OWN_SESSION_EDIT] [PRO_SESSION_VIEW] [TECHTHON_SESSION_VIEW] - session_idのセッションが削除済み、存在しない場合NotFound - thread_idのスレッド投稿が削除済み、存在しない場合NotFound
     * セッションスレッド削除
     */
    async deleteSessionThreadRaw(requestParameters: DeleteSessionThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling deleteSessionThread.');
        }

        if (requestParameters.threadId === null || requestParameters.threadId === undefined) {
            throw new runtime.RequiredError('threadId','Required parameter requestParameters.threadId was null or undefined when calling deleteSessionThread.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sessions/{session_id}/threads/{thread_id}`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))).replace(`{${"thread_id"}}`, encodeURIComponent(String(requestParameters.threadId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * セッションスレッドの投稿を論理削除 - 必要権限:[OWN_SESSION_EDIT] [PRO_SESSION_VIEW] [TECHTHON_SESSION_VIEW] - session_idのセッションが削除済み、存在しない場合NotFound - thread_idのスレッド投稿が削除済み、存在しない場合NotFound
     * セッションスレッド削除
     */
    async deleteSessionThread(requestParameters: DeleteSessionThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSessionThreadRaw(requestParameters, initOverrides);
    }

    /**
     * セッション参加ユーザー取り消し - 必要権限: [ALL_EVENT_AND_SESSION_EDIT] [OWN_SESSION_EDIT] - 削除可能条件   - is_deleted = False   - [ALL_EVENT_AND_SESSION_EDIT]を持つ場合     - 自組織・他組織イベントセッション削除可能   - [ALL_EVENT_AND_SESSION_EDIT]を持たない かつ [OWN_SESSION_EDIT]を持つ 場合     - 自組織イベントセッションのみ削除可能 - 処理概要   - 削除済でないid=session_idのセッション取得   - セッションが開催終了していた場合、CannotBeExecutedConditionsNotSatisfied発生   - セッションが存在しない場合NotFound発生   - セッション問題の解答がないユーザーのみ抽出し、削除実行
     * セッション参加ユーザー取り消し
     */
    async deleteSessionUsersRaw(requestParameters: DeleteSessionUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling deleteSessionUsers.');
        }

        if (requestParameters.sessionUsersDeleteIn === null || requestParameters.sessionUsersDeleteIn === undefined) {
            throw new runtime.RequiredError('sessionUsersDeleteIn','Required parameter requestParameters.sessionUsersDeleteIn was null or undefined when calling deleteSessionUsers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/sessions/{session_id}/users/out`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SessionUsersDeleteInToJSON(requestParameters.sessionUsersDeleteIn),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * セッション参加ユーザー取り消し - 必要権限: [ALL_EVENT_AND_SESSION_EDIT] [OWN_SESSION_EDIT] - 削除可能条件   - is_deleted = False   - [ALL_EVENT_AND_SESSION_EDIT]を持つ場合     - 自組織・他組織イベントセッション削除可能   - [ALL_EVENT_AND_SESSION_EDIT]を持たない かつ [OWN_SESSION_EDIT]を持つ 場合     - 自組織イベントセッションのみ削除可能 - 処理概要   - 削除済でないid=session_idのセッション取得   - セッションが開催終了していた場合、CannotBeExecutedConditionsNotSatisfied発生   - セッションが存在しない場合NotFound発生   - セッション問題の解答がないユーザーのみ抽出し、削除実行
     * セッション参加ユーザー取り消し
     */
    async deleteSessionUsers(requestParameters: DeleteSessionUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSessionUsersRaw(requestParameters, initOverrides);
    }

    /**
     * スキルチェックセッションへの参加者登録を解除する - 必要権限: [OWN_EVENT_EDIT]     - TODO:現状企業学校で自組織セッション対象に実行可、444スタッフ側での実行権限については検討中 - session_idのセッションが削除済み,存在しない場合NotFound - session_idのセッションが終了済みの場合実行不可エラー（CannotBeExecutedConditionsNotSatisfied） - 削除条件：セッション内での問題回答がないユーザーのみ削除可
     * スキルチェックユーザー登録解除
     */
    async deleteSkillCheckUsersRaw(requestParameters: DeleteSkillCheckUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling deleteSkillCheckUsers.');
        }

        if (requestParameters.skillCheckSessionUsersDeleteIn === null || requestParameters.skillCheckSessionUsersDeleteIn === undefined) {
            throw new runtime.RequiredError('skillCheckSessionUsersDeleteIn','Required parameter requestParameters.skillCheckSessionUsersDeleteIn was null or undefined when calling deleteSkillCheckUsers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/sessions/{session_id}/skill-check-users/delete`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SkillCheckSessionUsersDeleteInToJSON(requestParameters.skillCheckSessionUsersDeleteIn),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * スキルチェックセッションへの参加者登録を解除する - 必要権限: [OWN_EVENT_EDIT]     - TODO:現状企業学校で自組織セッション対象に実行可、444スタッフ側での実行権限については検討中 - session_idのセッションが削除済み,存在しない場合NotFound - session_idのセッションが終了済みの場合実行不可エラー（CannotBeExecutedConditionsNotSatisfied） - 削除条件：セッション内での問題回答がないユーザーのみ削除可
     * スキルチェックユーザー登録解除
     */
    async deleteSkillCheckUsers(requestParameters: DeleteSkillCheckUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSkillCheckUsersRaw(requestParameters, initOverrides);
    }

    /**
     * スキルチェックユーザーリストをダウンロードする - 必要権限: [OWN_SESSION_VIEW], [ALL_EVENT_AND_SESSION_VIEW] - session_idのセッションが削除済み、存在しない場合NotFound - SessionRecordCSVIn.csv_bodyの内容をCSVファイルに書き出しファイル出力
     * セッション成績CSVダウンロード
     */
    async downloadSessionRecordsCsvRaw(requestParameters: DownloadSessionRecordsCsvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling downloadSessionRecordsCsv.');
        }

        if (requestParameters.sessionRecordCSVIn === null || requestParameters.sessionRecordCSVIn === undefined) {
            throw new runtime.RequiredError('sessionRecordCSVIn','Required parameter requestParameters.sessionRecordCSVIn was null or undefined when calling downloadSessionRecordsCsv.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/sessions/{session_id}/records/download`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SessionRecordCSVInToJSON(requestParameters.sessionRecordCSVIn),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * スキルチェックユーザーリストをダウンロードする - 必要権限: [OWN_SESSION_VIEW], [ALL_EVENT_AND_SESSION_VIEW] - session_idのセッションが削除済み、存在しない場合NotFound - SessionRecordCSVIn.csv_bodyの内容をCSVファイルに書き出しファイル出力
     * セッション成績CSVダウンロード
     */
    async downloadSessionRecordsCsv(requestParameters: DownloadSessionRecordsCsvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.downloadSessionRecordsCsvRaw(requestParameters, initOverrides);
    }

    /**
     * セッション成績 ユーザー毎の成績詳細CSVダウンロード - 必要権限: [ALL_EVENT_AND_SESSION_VIEW OWN_SESSION_VIEW] - session_idが削除済み、存在しないならNotFound - csvのカラム名     - タイムスタンプ     - ユーザー名     - 補足     - 表示名     - 名前     - 生年月日     - メールアドレス     - 試験開始時間     - 試験終了時間     - 正解数     - 合計スコア     - 合計基礎点     - セッション名     - セッション言語     - 問題の数だけつなげる         - 問題1:問題名         - 問題1:問題タグ         - 問題1:言語         - 問題1:コード文字数         - 問題1:スコア         - 問題1:基礎点         - 問題1:正解ボーナス点         - 問題1:タイムボーナス         - 問題1:問題タイプ         - 問題1:問題カテゴリ         - 問題1:問題トピック         - 問題1:難易度         - 問題1:開始時間         - 問題1:経過時間         - 問題1:最後の提出         - 問題1:目標時間         - 問題1:検証エラー数         - 問題1:検証回数         - 問題1:コンパイルエラー数         - 問題1:正解テストケース数         - 問題1:全テストケース数         - 問題1:ステータス         - 問題1:コード提出回数         - 問題1:ケース1 (○ or ×)         - 問題1:ケースn         - 問題n ...
     * セッション成績CSVダウンロード
     */
    async downloadSessionRecordsDetailCsvRaw(requestParameters: DownloadSessionRecordsDetailCsvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling downloadSessionRecordsDetailCsv.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sessions/{session_id}/records/detail/download`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * セッション成績 ユーザー毎の成績詳細CSVダウンロード - 必要権限: [ALL_EVENT_AND_SESSION_VIEW OWN_SESSION_VIEW] - session_idが削除済み、存在しないならNotFound - csvのカラム名     - タイムスタンプ     - ユーザー名     - 補足     - 表示名     - 名前     - 生年月日     - メールアドレス     - 試験開始時間     - 試験終了時間     - 正解数     - 合計スコア     - 合計基礎点     - セッション名     - セッション言語     - 問題の数だけつなげる         - 問題1:問題名         - 問題1:問題タグ         - 問題1:言語         - 問題1:コード文字数         - 問題1:スコア         - 問題1:基礎点         - 問題1:正解ボーナス点         - 問題1:タイムボーナス         - 問題1:問題タイプ         - 問題1:問題カテゴリ         - 問題1:問題トピック         - 問題1:難易度         - 問題1:開始時間         - 問題1:経過時間         - 問題1:最後の提出         - 問題1:目標時間         - 問題1:検証エラー数         - 問題1:検証回数         - 問題1:コンパイルエラー数         - 問題1:正解テストケース数         - 問題1:全テストケース数         - 問題1:ステータス         - 問題1:コード提出回数         - 問題1:ケース1 (○ or ×)         - 問題1:ケースn         - 問題n ...
     * セッション成績CSVダウンロード
     */
    async downloadSessionRecordsDetailCsv(requestParameters: DownloadSessionRecordsDetailCsvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.downloadSessionRecordsDetailCsvRaw(requestParameters, initOverrides);
    }

    /**
     * セッションZip提出コードダウンロード - 必要権限： [OWN_SESSION_VIEW] - 学校主催セッションでのみ実行可能 - (データDL画面にて)セッションに提出されたコードをZip形式でDL - 処理概要：     - 指定セッションが学校主催セッションかチェック（その他主催の場合PermissionDenied）     - 指定セッションが削除済み、存在しない場合NotFound     - 下記DLファイル詳細に従ってファイル作成、出力 - DLファイル詳細：     - <セッション名>_ResultsCodes.zip         - フォルダ分類 AT_USERの場合　※[]内フォルダの深さ             - [1]filelist.csv（セッション参加者全体の回答リスト一覧）             - [1]<ユーザーid>_<ユーザー名>                 - [2]<問題id>_<問題名>                     - [2]<回答日時>...ユーザーの回答コード(採点開始ボタン押下時の提出コード)                         - ex: 2023-02-07T11/23/48.744461.py         - フォルダ分類 AT_QUESTIONの場合             - [1]filelist.csv（セッション参加者全体の回答リスト一覧）             - [1]<問題id>_<問題名>                 - [2]<ユーザーid>_<ユーザー名>                     - [2]<回答日時>     - フォルダ名に学籍番号を含む場合　<ユーザーid>が学籍番号へ変更（学籍番号なしは_<ユーザー名>で表示）     - filelist.csv詳細         - カラム：問題ID, 問題タイトル , ユーザー名 , 名前 , 表示名 , 補足情報 , 時刻 , 0:不正解/1:正解 , Zip内ファイルパス
     * セッションZip提出コードダウンロード
     */
    async downloadSessionSubmittedCodeForZipRaw(requestParameters: DownloadSessionSubmittedCodeForZipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling downloadSessionSubmittedCodeForZip.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeStudentNumber !== undefined) {
            queryParameters['include_student_number'] = requestParameters.includeStudentNumber;
        }

        if (requestParameters.folderConfig !== undefined) {
            queryParameters['folder_config'] = requestParameters.folderConfig;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sessions/{session_id}/code-download`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * セッションZip提出コードダウンロード - 必要権限： [OWN_SESSION_VIEW] - 学校主催セッションでのみ実行可能 - (データDL画面にて)セッションに提出されたコードをZip形式でDL - 処理概要：     - 指定セッションが学校主催セッションかチェック（その他主催の場合PermissionDenied）     - 指定セッションが削除済み、存在しない場合NotFound     - 下記DLファイル詳細に従ってファイル作成、出力 - DLファイル詳細：     - <セッション名>_ResultsCodes.zip         - フォルダ分類 AT_USERの場合　※[]内フォルダの深さ             - [1]filelist.csv（セッション参加者全体の回答リスト一覧）             - [1]<ユーザーid>_<ユーザー名>                 - [2]<問題id>_<問題名>                     - [2]<回答日時>...ユーザーの回答コード(採点開始ボタン押下時の提出コード)                         - ex: 2023-02-07T11/23/48.744461.py         - フォルダ分類 AT_QUESTIONの場合             - [1]filelist.csv（セッション参加者全体の回答リスト一覧）             - [1]<問題id>_<問題名>                 - [2]<ユーザーid>_<ユーザー名>                     - [2]<回答日時>     - フォルダ名に学籍番号を含む場合　<ユーザーid>が学籍番号へ変更（学籍番号なしは_<ユーザー名>で表示）     - filelist.csv詳細         - カラム：問題ID, 問題タイトル , ユーザー名 , 名前 , 表示名 , 補足情報 , 時刻 , 0:不正解/1:正解 , Zip内ファイルパス
     * セッションZip提出コードダウンロード
     */
    async downloadSessionSubmittedCodeForZip(requestParameters: DownloadSessionSubmittedCodeForZipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.downloadSessionSubmittedCodeForZipRaw(requestParameters, initOverrides);
    }

    /**
     * スキルチェックユーザーリストをダウンロードする - 必要権限：[OWN_SKILL_CHECK_ACCOUNT_VIEW]     - 自組織アカウントのみ実行できる - session_idに紐づくセッションに参加中のユーザー情報を出力     - 出力情報：ユーザー名/名前/補足情報/参加日/(パスワード)     - パスワードを含めるチェック（include_password=True）の場合、パスワード列を追加する - ファイル名：skillchecks.csv - session_idのセッションが削除済み、存在しない場合NotFound
     * 参加スキルチェックユーザーリストダウンロード
     */
    async downloadSkillCheckUserListRaw(requestParameters: DownloadSkillCheckUserListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling downloadSkillCheckUserList.');
        }

        const queryParameters: any = {};

        if (requestParameters.includePassword !== undefined) {
            queryParameters['include_password'] = requestParameters.includePassword;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sessions/{session_id}/skill-check-users/download`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * スキルチェックユーザーリストをダウンロードする - 必要権限：[OWN_SKILL_CHECK_ACCOUNT_VIEW]     - 自組織アカウントのみ実行できる - session_idに紐づくセッションに参加中のユーザー情報を出力     - 出力情報：ユーザー名/名前/補足情報/参加日/(パスワード)     - パスワードを含めるチェック（include_password=True）の場合、パスワード列を追加する - ファイル名：skillchecks.csv - session_idのセッションが削除済み、存在しない場合NotFound
     * 参加スキルチェックユーザーリストダウンロード
     */
    async downloadSkillCheckUserList(requestParameters: DownloadSkillCheckUserListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.downloadSkillCheckUserListRaw(requestParameters, initOverrides);
    }

    /**
     * セッション不正チェック実行 - 必要権限: [OWN_SESSION_VIEW] [ALL_EVENT_AND_SESSION_VIEW] - 実行条件:     - 主催者組織(会社・学校)     - イベント共催組織(会社・学校)     - スタッフ・アルバイト - チェック内容     - 解答の完全一致:   コードをそのままkeyとしてグルーピングし、2ユーザー以上存在するものを表示     - 早すぎる解答:     問題難易度*60秒以下の提出をピックアップ     - 類似ソースコード: 「空白を抜かした行数 x 提出言語」をkeyとしてグルーピングし、2ユーザー以上存在するものを表示
     * セッション不正チェック実行
     */
    async executeCheatingCheckRaw(requestParameters: ExecuteCheatingCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SessionCheatingCheckUserListOut>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling executeCheatingCheck.');
        }

        const queryParameters: any = {};

        if (requestParameters.checkType !== undefined) {
            queryParameters['check_type'] = requestParameters.checkType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sessions/{session_id}/cheating_check`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionCheatingCheckUserListOutFromJSON(jsonValue));
    }

    /**
     * セッション不正チェック実行 - 必要権限: [OWN_SESSION_VIEW] [ALL_EVENT_AND_SESSION_VIEW] - 実行条件:     - 主催者組織(会社・学校)     - イベント共催組織(会社・学校)     - スタッフ・アルバイト - チェック内容     - 解答の完全一致:   コードをそのままkeyとしてグルーピングし、2ユーザー以上存在するものを表示     - 早すぎる解答:     問題難易度*60秒以下の提出をピックアップ     - 類似ソースコード: 「空白を抜かした行数 x 提出言語」をkeyとしてグルーピングし、2ユーザー以上存在するものを表示
     * セッション不正チェック実行
     */
    async executeCheatingCheck(requestParameters: ExecuteCheatingCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SessionCheatingCheckUserListOut> {
        const response = await this.executeCheatingCheckRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * セッション企業資料一覧取得(PROとTechthonで共通) - 必要権限: [OWN_SESSION_VIEW] [PRO_SESSION_VIEW] [TECHTHON_SESSION_VIEW] - session_idに紐付くセッション企業資料を取得 - session_idのセッションが削除済み、存在しない場合NotFound
     * セッション企業資料一覧取得(PROとTechthonで共通)
     */
    async getSessionCompanyDocumentsRaw(requestParameters: GetSessionCompanyDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SessionCompanyDocumentListOut>>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getSessionCompanyDocuments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sessions/{session_id}/company-documents`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SessionCompanyDocumentListOutFromJSON));
    }

    /**
     * セッション企業資料一覧取得(PROとTechthonで共通) - 必要権限: [OWN_SESSION_VIEW] [PRO_SESSION_VIEW] [TECHTHON_SESSION_VIEW] - session_idに紐付くセッション企業資料を取得 - session_idのセッションが削除済み、存在しない場合NotFound
     * セッション企業資料一覧取得(PROとTechthonで共通)
     */
    async getSessionCompanyDocuments(requestParameters: GetSessionCompanyDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SessionCompanyDocumentListOut>> {
        const response = await this.getSessionCompanyDocumentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 管理者用セッションコンテンツ一覧取得 - 必要権限: [OWN_SESSION_VIEW]　[ALL_EVENT_AND_SESSION_VIEW] - 並び順: order昇順 - 取得可能条件     - [ALL_EVENT_AND_SESSION_VIEW]を持つ場合         - 自組織・他組織イベントセッション取得可能     - [ALL_EVENT_AND_SESSION_VIEW]を持たない かつ [OWN_SESSION_VIEW]を持つ場合         - 自組織イベントセッションのみ取得可能 - session_idのセッションが削除済み、存在しない場合NotFound - question_filtered = True のとき
     * 管理者用セッションコンテンツ一覧取得
     */
    async getSessionContentListRaw(requestParameters: GetSessionContentListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AppSchemasManageSessionsSessionContentListOutSessionContentListOut>>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getSessionContentList.');
        }

        const queryParameters: any = {};

        if (requestParameters.questionFiltered !== undefined) {
            queryParameters['question_filtered'] = requestParameters.questionFiltered;
        }

        if (requestParameters.questionTypes) {
            queryParameters['question_types'] = requestParameters.questionTypes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sessions/{session_id}/contents`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AppSchemasManageSessionsSessionContentListOutSessionContentListOutFromJSON));
    }

    /**
     * 管理者用セッションコンテンツ一覧取得 - 必要権限: [OWN_SESSION_VIEW]　[ALL_EVENT_AND_SESSION_VIEW] - 並び順: order昇順 - 取得可能条件     - [ALL_EVENT_AND_SESSION_VIEW]を持つ場合         - 自組織・他組織イベントセッション取得可能     - [ALL_EVENT_AND_SESSION_VIEW]を持たない かつ [OWN_SESSION_VIEW]を持つ場合         - 自組織イベントセッションのみ取得可能 - session_idのセッションが削除済み、存在しない場合NotFound - question_filtered = True のとき
     * 管理者用セッションコンテンツ一覧取得
     */
    async getSessionContentList(requestParameters: GetSessionContentListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AppSchemasManageSessionsSessionContentListOutSessionContentListOut>> {
        const response = await this.getSessionContentListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * セッション詳細情報取得 - 必要権限: [OWN_SESSION_VIEW], [ALL_EVENT_AND_SESSION_VIEW] - 取得可能条件     - [ALL_EVENT_AND_SESSION_VIEW]を持つ場合         - 自組織・他組織イベントセッション取得可能     - [ALL_EVENT_AND_SESSION_VIEW]を持たない かつ [OWN_SESSION_VIEW]を持つ場合         - 自組織イベントセッションのみ取得可能
     * セッション詳細情報取得
     */
    async getSessionDetailRaw(requestParameters: GetSessionDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSchemasManageSessionsSessionDetailOutSessionDetailOut>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getSessionDetail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sessions/{session_id}`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppSchemasManageSessionsSessionDetailOutSessionDetailOutFromJSON(jsonValue));
    }

    /**
     * セッション詳細情報取得 - 必要権限: [OWN_SESSION_VIEW], [ALL_EVENT_AND_SESSION_VIEW] - 取得可能条件     - [ALL_EVENT_AND_SESSION_VIEW]を持つ場合         - 自組織・他組織イベントセッション取得可能     - [ALL_EVENT_AND_SESSION_VIEW]を持たない かつ [OWN_SESSION_VIEW]を持つ場合         - 自組織イベントセッションのみ取得可能
     * セッション詳細情報取得
     */
    async getSessionDetail(requestParameters: GetSessionDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSchemasManageSessionsSessionDetailOutSessionDetailOut> {
        const response = await this.getSessionDetailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ユーザー毎のエラー一覧を取得 - 必要権限: [OWN_SESSION_VIEW] [ALL_EVENT_AND_SESSION_VIEW] - 並び順: 作成日の昇順 - 取得可能条件     - [ALL_EVENT_AND_SESSION_VIEW]を持つ場合         - 自組織・他組織イベントセッション取得可能     - [ALL_EVENT_AND_SESSION_VIEW]を持たない かつ [OWN_SESSION_VIEW]を持つ場合         - 自組織イベントセッションのみ取得可能
     * セッションエラーコード取得
     */
    async getSessionErrorListRaw(requestParameters: GetSessionErrorListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SessionErrorListOut>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getSessionErrorList.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getSessionErrorList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sessions/{session_id}/error/{user_id}`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionErrorListOutFromJSON(jsonValue));
    }

    /**
     * ユーザー毎のエラー一覧を取得 - 必要権限: [OWN_SESSION_VIEW] [ALL_EVENT_AND_SESSION_VIEW] - 並び順: 作成日の昇順 - 取得可能条件     - [ALL_EVENT_AND_SESSION_VIEW]を持つ場合         - 自組織・他組織イベントセッション取得可能     - [ALL_EVENT_AND_SESSION_VIEW]を持たない かつ [OWN_SESSION_VIEW]を持つ場合         - 自組織イベントセッションのみ取得可能
     * セッションエラーコード取得
     */
    async getSessionErrorList(requestParameters: GetSessionErrorListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SessionErrorListOut> {
        const response = await this.getSessionErrorListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * セッションヘッダー情報取得(PROとTechthonで共通) - 必要権限: [OWN_SESSION_VIEW] [PRO_SESSION_VIEW] [TECHTHON_SESSION_VIEW] - session_idに紐付くセッションヘッダー情報を取得 - session_idのセッションが削除済み、存在しない場合NotFound
     * セッションヘッダー情報取得(PROとTechthonで共通)
     */
    async getSessionHeaderRaw(requestParameters: GetSessionHeaderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SessionHeaderListOut>>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getSessionHeader.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sessions/{session_id}/header`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SessionHeaderListOutFromJSON));
    }

    /**
     * セッションヘッダー情報取得(PROとTechthonで共通) - 必要権限: [OWN_SESSION_VIEW] [PRO_SESSION_VIEW] [TECHTHON_SESSION_VIEW] - session_idに紐付くセッションヘッダー情報を取得 - session_idのセッションが削除済み、存在しない場合NotFound
     * セッションヘッダー情報取得(PROとTechthonで共通)
     */
    async getSessionHeader(requestParameters: GetSessionHeaderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SessionHeaderListOut>> {
        const response = await this.getSessionHeaderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * セッション一覧を取得 - 必要権限: [OWN_SESSION_VIEW] [ALL_EVENT_AND_SESSION_VIEW] - 並び順:開始日時の昇順     - 開始日時が同時の場合は作成日時の降順 - レスポンスデータ補足情報     - is_active: セッションが一時停止中か     - sessions         - session_user_count: セッション参加ユーザーの合計         - session_status         　- 開催予定: セッション開始日時 > 現在日時         　- 開催中: セッション開始日時 <= 現在日時 <= セッション終了日時         　- 終了: 現在日時 > セッション終了日時 - 取得可能条件     - is_deleted = False     - [ALL_EVENT_AND_SESSION_VIEW]を持つ場合         - 自組織・他組織セッション取得可能     - [ALL_EVENT_AND_SESSION_VIEW]を持たない かつ [OWN_SESSION_VIEW]を持つ場合         - 自組織セッションのみ取得可能     - TODO: 通常セッションのみ取得する　９月リリースでPRO・TECHTHONセッション対応した際にフィルター削除
     * セッション一覧取得
     */
    async getSessionListRaw(requestParameters: GetSessionListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SessionListOut>>> {
        const queryParameters: any = {};

        if (requestParameters.eventId !== undefined) {
            queryParameters['event_id'] = requestParameters.eventId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sessions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SessionListOutFromJSON));
    }

    /**
     * セッション一覧を取得 - 必要権限: [OWN_SESSION_VIEW] [ALL_EVENT_AND_SESSION_VIEW] - 並び順:開始日時の昇順     - 開始日時が同時の場合は作成日時の降順 - レスポンスデータ補足情報     - is_active: セッションが一時停止中か     - sessions         - session_user_count: セッション参加ユーザーの合計         - session_status         　- 開催予定: セッション開始日時 > 現在日時         　- 開催中: セッション開始日時 <= 現在日時 <= セッション終了日時         　- 終了: 現在日時 > セッション終了日時 - 取得可能条件     - is_deleted = False     - [ALL_EVENT_AND_SESSION_VIEW]を持つ場合         - 自組織・他組織セッション取得可能     - [ALL_EVENT_AND_SESSION_VIEW]を持たない かつ [OWN_SESSION_VIEW]を持つ場合         - 自組織セッションのみ取得可能     - TODO: 通常セッションのみ取得する　９月リリースでPRO・TECHTHONセッション対応した際にフィルター削除
     * セッション一覧取得
     */
    async getSessionList(requestParameters: GetSessionListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SessionListOut>> {
        const response = await this.getSessionListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * セッション一覧を取得(件数有り) - 必要権限: [OWN_SESSION_VIEW] [ALL_EVENT_AND_SESSION_VIEW] - 並び順:ID降順 - レスポンスデータ補足情報     - is_active: セッションが一時停止中か     - sessions         - session_user_count: セッション参加ユーザーの合計         - session_status         　- 開催予定: セッション開始日時 > 現在日時         　- 開催中: セッション開始日時 <= 現在日時 <= セッション終了日時         　- 終了: 現在日時 > セッション終了日時 - 取得可能条件     - is_deleted = False     - [ALL_EVENT_AND_SESSION_VIEW]を持つ場合         - 自組織・他組織セッション取得可能     - [ALL_EVENT_AND_SESSION_VIEW]を持たない かつ [OWN_SESSION_VIEW]を持つ場合         - 自組織セッションのみ取得可能     - TODO: 通常セッションのみ取得する　９月リリースでPRO・TECHTHONセッション対応した際にフィルター削除
     * セッション一覧取得(件数有り)
     */
    async getSessionListCountRaw(requestParameters: GetSessionListCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SessionListCountOut>> {
        const queryParameters: any = {};

        if (requestParameters.eventId !== undefined) {
            queryParameters['event_id'] = requestParameters.eventId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sessions/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionListCountOutFromJSON(jsonValue));
    }

    /**
     * セッション一覧を取得(件数有り) - 必要権限: [OWN_SESSION_VIEW] [ALL_EVENT_AND_SESSION_VIEW] - 並び順:ID降順 - レスポンスデータ補足情報     - is_active: セッションが一時停止中か     - sessions         - session_user_count: セッション参加ユーザーの合計         - session_status         　- 開催予定: セッション開始日時 > 現在日時         　- 開催中: セッション開始日時 <= 現在日時 <= セッション終了日時         　- 終了: 現在日時 > セッション終了日時 - 取得可能条件     - is_deleted = False     - [ALL_EVENT_AND_SESSION_VIEW]を持つ場合         - 自組織・他組織セッション取得可能     - [ALL_EVENT_AND_SESSION_VIEW]を持たない かつ [OWN_SESSION_VIEW]を持つ場合         - 自組織セッションのみ取得可能     - TODO: 通常セッションのみ取得する　９月リリースでPRO・TECHTHONセッション対応した際にフィルター削除
     * セッション一覧取得(件数有り)
     */
    async getSessionListCount(requestParameters: GetSessionListCountRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SessionListCountOut> {
        const response = await this.getSessionListCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * セッション個人成績取得 指定されたセッションとユーザーに紐づいた全問題の成績を返却する - 必要権限: [OWN_SESSION_VIEW], [ALL_EVENT_AND_SESSION_VIEW] - 取得可能条件     - [ALL_EVENT_AND_SESSION_VIEW]を持つ場合         - 自組織・他組織イベントセッション取得可能     - [ALL_EVENT_AND_SESSION_VIEW]を持たない かつ [OWN_SESSION_VIEW]を持つ場合         - 自組織イベントセッションのみ取得可能     - session_idが存在しない場合404     - user_idのユーザーが存在しない,sessionに参加していない場合404 - レスポンス詳細     - コード： コード全体の文字数返却
     * セッション個人成績取得
     */
    async getSessionPersonalRecordRaw(requestParameters: GetSessionPersonalRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SessionPersonalRecordOut>>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getSessionPersonalRecord.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getSessionPersonalRecord.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sessions/{session_id}/records/{user_id}`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SessionPersonalRecordOutFromJSON));
    }

    /**
     * セッション個人成績取得 指定されたセッションとユーザーに紐づいた全問題の成績を返却する - 必要権限: [OWN_SESSION_VIEW], [ALL_EVENT_AND_SESSION_VIEW] - 取得可能条件     - [ALL_EVENT_AND_SESSION_VIEW]を持つ場合         - 自組織・他組織イベントセッション取得可能     - [ALL_EVENT_AND_SESSION_VIEW]を持たない かつ [OWN_SESSION_VIEW]を持つ場合         - 自組織イベントセッションのみ取得可能     - session_idが存在しない場合404     - user_idのユーザーが存在しない,sessionに参加していない場合404 - レスポンス詳細     - コード： コード全体の文字数返却
     * セッション個人成績取得
     */
    async getSessionPersonalRecord(requestParameters: GetSessionPersonalRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SessionPersonalRecordOut>> {
        const response = await this.getSessionPersonalRecordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * セッション用ポートフォリオ取得 - 必要権限: [OWN_SESSION_VIEW] - 仕様     - 指定したユーザーの指定したセッションにおけるポートフォリオを取得する     - ユーザーやイベントが存在しない場合・削除された場合は404     - 他組織のセッションや、該当セッションに参加していないユーザーを指定した場合は403 - レスポンスデータ補足情報   - ユーザー情報     - 取得項目       - 表示名、ユーザーアイコンURL、都道府県、生年月日、卒業年月     - 抽出モデル: Userモデルと紐付くモデル     - 抽出条件       - id=user_id(クエリパラメータ)   - セッション情報     - 取得項目       - セッション、主催者、開催場所、実施期間、参加人数、問題数、評価方式     - 抽出モデル: Sessionと紐付くモデル     - 抽出条件       - id=session_id(クエリパラメータ)   - 相対評価     - 得点率       - user_score: ユーザーが獲得した総合得点の合計。       - avg_score: セッション参加ユーザーが獲得した総合得点の平均。       - max_score: 総合得点の最大値。セッション内の全問題における総合得点の合計。     - 正解率       - user_passed: ユーザーが通過した問題数。       - avg_passed: セッション参加ユーザーにおける、通過問題数の平均。       - max_passed: セッション内問題の通過数の最大値。セッション内の問題数。     - スコア分布       - セッション内の全問題における、それぞれの算出方法による算出値の合計。       - ※基礎得点(base): 問題難易度に10を乗じた値。       - ※タイムボーナス(time): 問題難易度に7を乗じた値。       - ※合格ボーナス得点(pass): 問題難易度に5を乗じた値。         - user_base: ユーザーの基礎得点。         - avg_base: セッション参加ユーザーの基礎得点の平均。         - max_base: 基礎得点のMAX値。セッション内全問題における基礎得点の合計。         - user_time: ユーザーのタイムボーナス得点。         - avg_time: セッション参加ユーザーのタイムボーナス得点の平均。         - max_time: タイムボーナスのMAX値。セッション内の全問題におけるタイムボーナスの合計。         - user_pass: ユーザーの合格ボーナス得点。         - avg_pass: セッション参加ユーザーの合格ボーナス得点の平均。         - max_pass: 合格ボーナス得点のMAX値。セッション内の全問題における合格ボーナス得点の合計。   - 問題成績     - セッション内の全問題における、問題名、難易度などの情報   - 補足情報     フロントエンドでパーセンテージを計算して表示する。
     * セッション用ポートフォリオ取得
     */
    async getSessionPortfolioRaw(requestParameters: GetSessionPortfolioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SessionPortfolioOut>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getSessionPortfolio.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getSessionPortfolio.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sessions/{session_id}/portfolio/{user_id}`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionPortfolioOutFromJSON(jsonValue));
    }

    /**
     * セッション用ポートフォリオ取得 - 必要権限: [OWN_SESSION_VIEW] - 仕様     - 指定したユーザーの指定したセッションにおけるポートフォリオを取得する     - ユーザーやイベントが存在しない場合・削除された場合は404     - 他組織のセッションや、該当セッションに参加していないユーザーを指定した場合は403 - レスポンスデータ補足情報   - ユーザー情報     - 取得項目       - 表示名、ユーザーアイコンURL、都道府県、生年月日、卒業年月     - 抽出モデル: Userモデルと紐付くモデル     - 抽出条件       - id=user_id(クエリパラメータ)   - セッション情報     - 取得項目       - セッション、主催者、開催場所、実施期間、参加人数、問題数、評価方式     - 抽出モデル: Sessionと紐付くモデル     - 抽出条件       - id=session_id(クエリパラメータ)   - 相対評価     - 得点率       - user_score: ユーザーが獲得した総合得点の合計。       - avg_score: セッション参加ユーザーが獲得した総合得点の平均。       - max_score: 総合得点の最大値。セッション内の全問題における総合得点の合計。     - 正解率       - user_passed: ユーザーが通過した問題数。       - avg_passed: セッション参加ユーザーにおける、通過問題数の平均。       - max_passed: セッション内問題の通過数の最大値。セッション内の問題数。     - スコア分布       - セッション内の全問題における、それぞれの算出方法による算出値の合計。       - ※基礎得点(base): 問題難易度に10を乗じた値。       - ※タイムボーナス(time): 問題難易度に7を乗じた値。       - ※合格ボーナス得点(pass): 問題難易度に5を乗じた値。         - user_base: ユーザーの基礎得点。         - avg_base: セッション参加ユーザーの基礎得点の平均。         - max_base: 基礎得点のMAX値。セッション内全問題における基礎得点の合計。         - user_time: ユーザーのタイムボーナス得点。         - avg_time: セッション参加ユーザーのタイムボーナス得点の平均。         - max_time: タイムボーナスのMAX値。セッション内の全問題におけるタイムボーナスの合計。         - user_pass: ユーザーの合格ボーナス得点。         - avg_pass: セッション参加ユーザーの合格ボーナス得点の平均。         - max_pass: 合格ボーナス得点のMAX値。セッション内の全問題における合格ボーナス得点の合計。   - 問題成績     - セッション内の全問題における、問題名、難易度などの情報   - 補足情報     フロントエンドでパーセンテージを計算して表示する。
     * セッション用ポートフォリオ取得
     */
    async getSessionPortfolio(requestParameters: GetSessionPortfolioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SessionPortfolioOut> {
        const response = await this.getSessionPortfolioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * セッション問題成績一覧取得 - 必要権限: [ALL_EVENT_AND_SESSION_VIEW] [OWN_SESSION_VIEW] - 並び順:     - 「詳細を見る」ボタン押下時の問題毎の参加ユーザの成績一覧     - スコア順降順     - 同率スコアの場合、セッション参加順降順 - アカウント主催イベント毎のログインアカウント別の取得可能項目     - スタッフ主催イベント         - アルバイト             - 参加者アカウント名             - 参加者表示名         - スタッフ (企業スキルチェック)             - 参加者アカウント名             - 参加者本名                 - 必要権限： [人材紹介機能] RECRUITMENT　かつ　ユーザーが人材紹介規約同意済み             - 参加者表示名     - 企業主催イベント (企業スキルチェック)         - 企業/スタッフ             - 参加者アカウント名             - 参加者表示名             - 補足     - 学校主催イベント (企業スキルチェック)         - 学校             - 学籍番号             - 参加者アカウント名             - 参加者本名                 - 必要権限： [自組織イベント個人情報閲覧] SESSION_PERSONAL_INFORMATION_VIEW                 - 必要権限： [他組織イベント個人情報閲覧] SESSION_SPONSOR_PERSONAL_INFORMATION_VIEW             - 補足         - スタッフ             - 学籍番号             - 参加者アカウント名             - 参加者本名                 - 必要権限： [人材紹介機能] RECRUITMENT　かつ　ユーザーが人材紹介規約同意済み             - 補足     - 学校・スタッフ主催イベント         - 企業 (イベント共催)             - アカウント名
     * セッション問題成績一覧取得
     */
    async getSessionQuestionResultListRaw(requestParameters: GetSessionQuestionResultListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AppSchemasManageSessionsSessionQuestionResultListOutSessionQuestionResultListOut>>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getSessionQuestionResultList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sessions/{session_id}/results`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AppSchemasManageSessionsSessionQuestionResultListOutSessionQuestionResultListOutFromJSON));
    }

    /**
     * セッション問題成績一覧取得 - 必要権限: [ALL_EVENT_AND_SESSION_VIEW] [OWN_SESSION_VIEW] - 並び順:     - 「詳細を見る」ボタン押下時の問題毎の参加ユーザの成績一覧     - スコア順降順     - 同率スコアの場合、セッション参加順降順 - アカウント主催イベント毎のログインアカウント別の取得可能項目     - スタッフ主催イベント         - アルバイト             - 参加者アカウント名             - 参加者表示名         - スタッフ (企業スキルチェック)             - 参加者アカウント名             - 参加者本名                 - 必要権限： [人材紹介機能] RECRUITMENT　かつ　ユーザーが人材紹介規約同意済み             - 参加者表示名     - 企業主催イベント (企業スキルチェック)         - 企業/スタッフ             - 参加者アカウント名             - 参加者表示名             - 補足     - 学校主催イベント (企業スキルチェック)         - 学校             - 学籍番号             - 参加者アカウント名             - 参加者本名                 - 必要権限： [自組織イベント個人情報閲覧] SESSION_PERSONAL_INFORMATION_VIEW                 - 必要権限： [他組織イベント個人情報閲覧] SESSION_SPONSOR_PERSONAL_INFORMATION_VIEW             - 補足         - スタッフ             - 学籍番号             - 参加者アカウント名             - 参加者本名                 - 必要権限： [人材紹介機能] RECRUITMENT　かつ　ユーザーが人材紹介規約同意済み             - 補足     - 学校・スタッフ主催イベント         - 企業 (イベント共催)             - アカウント名
     * セッション問題成績一覧取得
     */
    async getSessionQuestionResultList(requestParameters: GetSessionQuestionResultListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AppSchemasManageSessionsSessionQuestionResultListOutSessionQuestionResultListOut>> {
        const response = await this.getSessionQuestionResultListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * セッションアンケート取得(PROとTechthonで共通) - 必要権限: [OWN_SESSION_VIEW] [PRO_SESSION_VIEW] [TECHTHON_SESSION_VIEW] - session_idに紐付くアンケートを取得 - session_idのセッションが削除済み、存在しない場合NotFound
     * セッションアンケート取得(PROとTechthonで共通)
     */
    async getSessionQuestionnaireRaw(requestParameters: GetSessionQuestionnaireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SessionQuestionnaireListOut>>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getSessionQuestionnaire.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sessions/{session_id}/questionnaire`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SessionQuestionnaireListOutFromJSON));
    }

    /**
     * セッションアンケート取得(PROとTechthonで共通) - 必要権限: [OWN_SESSION_VIEW] [PRO_SESSION_VIEW] [TECHTHON_SESSION_VIEW] - session_idに紐付くアンケートを取得 - session_idのセッションが削除済み、存在しない場合NotFound
     * セッションアンケート取得(PROとTechthonで共通)
     */
    async getSessionQuestionnaire(requestParameters: GetSessionQuestionnaireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SessionQuestionnaireListOut>> {
        const response = await this.getSessionQuestionnaireRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * セッションランキングユーザー詳細（ランキングタブ内容,詳細を見る） user_idに紐づいた問題解答詳細情報を返却 - 必要権限: [OWN_SESSION_VIEW] [ALL_EVENT_AND_SESSION_VIEW] - 取得可能条件     - [ALL_EVENT_AND_SESSION_VIEW]を持つ場合         - 自組織・他組織イベントセッション取得可能     - [ALL_EVENT_AND_SESSION_VIEW]を持たない かつ [OWN_SESSION_VIEW]を持つ場合         - 自組織イベントセッションのみ取得可能 - アカウント種別表示可能項目     - 全アカウント共通表示項目         - 詳細を見る(問題ごとの成績)             - 問題名/難易度/提出回数/目標時間内にクリアしたか/回答開始日時/合否/スコア/コンパイルエラー数
     * セッションランキングユーザー詳細取得
     */
    async getSessionRankingDetailRaw(requestParameters: GetSessionRankingDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserResultDetailOut>>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getSessionRankingDetail.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getSessionRankingDetail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sessions/{session_id}/ranking/{user_id}`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserResultDetailOutFromJSON));
    }

    /**
     * セッションランキングユーザー詳細（ランキングタブ内容,詳細を見る） user_idに紐づいた問題解答詳細情報を返却 - 必要権限: [OWN_SESSION_VIEW] [ALL_EVENT_AND_SESSION_VIEW] - 取得可能条件     - [ALL_EVENT_AND_SESSION_VIEW]を持つ場合         - 自組織・他組織イベントセッション取得可能     - [ALL_EVENT_AND_SESSION_VIEW]を持たない かつ [OWN_SESSION_VIEW]を持つ場合         - 自組織イベントセッションのみ取得可能 - アカウント種別表示可能項目     - 全アカウント共通表示項目         - 詳細を見る(問題ごとの成績)             - 問題名/難易度/提出回数/目標時間内にクリアしたか/回答開始日時/合否/スコア/コンパイルエラー数
     * セッションランキングユーザー詳細取得
     */
    async getSessionRankingDetail(requestParameters: GetSessionRankingDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserResultDetailOut>> {
        const response = await this.getSessionRankingDetailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * セッションランキング一覧（ランキングタブ内容） - 必要権限: [OWN_SESSION_VIEW] [ALL_EVENT_AND_SESSION_VIEW] - 並び順: 合計スコア降順     - 同率スコアの場合：スコアの更新日時順に表示する - 取得可能条件     - [ALL_EVENT_AND_SESSION_VIEW]を持つ場合         - 自組織・他組織イベントセッション取得可能     - [ALL_EVENT_AND_SESSION_VIEW]を持たない かつ [OWN_SESSION_VIEW]を持つ場合         - 自組織イベントセッションのみ取得可能 - アカウント種別表示可能項目     - 全アカウント共通表示項目         - 参加者名/順位/挑戦数/コンパイルエラー数/合格数/合計スコア     - (セッション作成者の)アカウントタイプ毎に取得項目変更:         - スタッフ主催イベント             - アルバイト:                 - 実名/補足/学籍番号　非表示             -　ST,SU:                 - 実名                     - 必要権限： 人材紹介機能 [RECRUITMENT]　& ユーザーが人材紹介規約同意済み                     - 自組織イベントの場合                         - 必要権限： 自組織個人情報閲覧 [OWN_SESSION_PERSONAL_INFORMATION_VIEW]                 - 補足/学籍番号 非表示             - イベント共催企業:                 - 実名/表示名/補足/学籍番号 非表示         - 学校主催イベント             - 学校・スタッフ:                 - チャットルームIDを返却                 - 表示名　非表示                 - 実名                     - 自組織イベントの場合                         - 必要権限： [自組織イベント個人情報閲覧] OWN_SESSION_PERSONAL_INFORMATION_VIEW                     - 他組織イベント かつ 閲覧者がスタッフの場合                         - 必要権限： [他組織イベント個人情報閲覧] ALL_SESSION_PERSONAL_INFORMATION_VIEW                     - 必要権限: 人材紹介機能 [RECRUITMENT] & ユーザーが人材紹介規約同意済み             - イベント共催企業:                 - 実名/表示名/補足/学籍番号 非表示         - 企業主催イベント             - 実名/学籍番号 非表示
     * セッションランキング一覧取得
     */
    async getSessionRankingListRaw(requestParameters: GetSessionRankingListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SessionRankingListOut>>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getSessionRankingList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sessions/{session_id}/ranking`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SessionRankingListOutFromJSON));
    }

    /**
     * セッションランキング一覧（ランキングタブ内容） - 必要権限: [OWN_SESSION_VIEW] [ALL_EVENT_AND_SESSION_VIEW] - 並び順: 合計スコア降順     - 同率スコアの場合：スコアの更新日時順に表示する - 取得可能条件     - [ALL_EVENT_AND_SESSION_VIEW]を持つ場合         - 自組織・他組織イベントセッション取得可能     - [ALL_EVENT_AND_SESSION_VIEW]を持たない かつ [OWN_SESSION_VIEW]を持つ場合         - 自組織イベントセッションのみ取得可能 - アカウント種別表示可能項目     - 全アカウント共通表示項目         - 参加者名/順位/挑戦数/コンパイルエラー数/合格数/合計スコア     - (セッション作成者の)アカウントタイプ毎に取得項目変更:         - スタッフ主催イベント             - アルバイト:                 - 実名/補足/学籍番号　非表示             -　ST,SU:                 - 実名                     - 必要権限： 人材紹介機能 [RECRUITMENT]　& ユーザーが人材紹介規約同意済み                     - 自組織イベントの場合                         - 必要権限： 自組織個人情報閲覧 [OWN_SESSION_PERSONAL_INFORMATION_VIEW]                 - 補足/学籍番号 非表示             - イベント共催企業:                 - 実名/表示名/補足/学籍番号 非表示         - 学校主催イベント             - 学校・スタッフ:                 - チャットルームIDを返却                 - 表示名　非表示                 - 実名                     - 自組織イベントの場合                         - 必要権限： [自組織イベント個人情報閲覧] OWN_SESSION_PERSONAL_INFORMATION_VIEW                     - 他組織イベント かつ 閲覧者がスタッフの場合                         - 必要権限： [他組織イベント個人情報閲覧] ALL_SESSION_PERSONAL_INFORMATION_VIEW                     - 必要権限: 人材紹介機能 [RECRUITMENT] & ユーザーが人材紹介規約同意済み             - イベント共催企業:                 - 実名/表示名/補足/学籍番号 非表示         - 企業主催イベント             - 実名/学籍番号 非表示
     * セッションランキング一覧取得
     */
    async getSessionRankingList(requestParameters: GetSessionRankingListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SessionRankingListOut>> {
        const response = await this.getSessionRankingListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * セッションリアルタイムランキング一覧取得 - 必要権限: [ALL_EVENT_AND_SESSION_VIEW], [OWN_SESSION_VIEW] - 並び順: order昇順     - ランクづけ         - 同率スコアの場合：セッション参加ユーザID昇順で並べる - 取得可能条件     - [ALL_EVENT_AND_SESSION_VIEW]を持つ場合         - 自組織・他組織イベントセッション取得可能     - [ALL_EVENT_AND_SESSION_VIEW]を持たない かつ [OWN_SESSION_VIEW]を持つ場合         - 自組織イベントセッションのみ取得可能 - アカウント種別表示可能項目     - セッションの表示設定によって、実名/所属組織/補足情報/学籍番号が表示される     - 全アカウント共通表示項目         - 順位         - スコア         - 参加者名     - スタッフ         - 実名(本名表示設定の場合、参加者名から本名へ切り替わる)         - 所属組織         - 補足情報         - 学籍番号     - 学校         - 実名(本名表示設定の場合、参加者名から本名へ切り替わる)         - 所属組織         - 補足情報         - 学籍番号 - ランキング表示人数(max_num_of_ranking)まで表示する
     * セッションリアルタイムランキング一覧取得
     */
    async getSessionRealTimeRankingListRaw(requestParameters: GetSessionRealTimeRankingListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SessionRealTimeRankingListOut>>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getSessionRealTimeRankingList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sessions/{session_id}/leaderboard`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SessionRealTimeRankingListOutFromJSON));
    }

    /**
     * セッションリアルタイムランキング一覧取得 - 必要権限: [ALL_EVENT_AND_SESSION_VIEW], [OWN_SESSION_VIEW] - 並び順: order昇順     - ランクづけ         - 同率スコアの場合：セッション参加ユーザID昇順で並べる - 取得可能条件     - [ALL_EVENT_AND_SESSION_VIEW]を持つ場合         - 自組織・他組織イベントセッション取得可能     - [ALL_EVENT_AND_SESSION_VIEW]を持たない かつ [OWN_SESSION_VIEW]を持つ場合         - 自組織イベントセッションのみ取得可能 - アカウント種別表示可能項目     - セッションの表示設定によって、実名/所属組織/補足情報/学籍番号が表示される     - 全アカウント共通表示項目         - 順位         - スコア         - 参加者名     - スタッフ         - 実名(本名表示設定の場合、参加者名から本名へ切り替わる)         - 所属組織         - 補足情報         - 学籍番号     - 学校         - 実名(本名表示設定の場合、参加者名から本名へ切り替わる)         - 所属組織         - 補足情報         - 学籍番号 - ランキング表示人数(max_num_of_ranking)まで表示する
     * セッションリアルタイムランキング一覧取得
     */
    async getSessionRealTimeRankingList(requestParameters: GetSessionRealTimeRankingListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SessionRealTimeRankingListOut>> {
        const response = await this.getSessionRealTimeRankingListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * セッション成績(問題ごと) - 必要権限: [OWN_SESSION_VIEW], [ALL_EVENT_AND_SESSION_VIEW] - 並び順:     - スコア順降順     - 同率スコアの場合、セッション参加順降順 - アカウント主催イベント毎のログインアカウント別の取得可能項目     - スタッフ主催イベント         - アルバイト             - 参加者アカウント名             - 参加者表示名         - スタッフ (企業スキルチェック)             - 参加者アカウント名             - 参加者本名                 - 自組織イベントの場合                     - 必要権限： [自組織イベント個人情報閲覧権限] OWN_SESSION_PERSONAL_INFORMATION_VIEW                 - 人材紹介                     - 必要権限： [人材紹介機能] RECRUITMENT & 対象ユーザが人材紹介規約同意済み             - 参加者表示名     - 企業主催イベント (企業スキルチェック)         - 企業/スタッフ             - 参加者アカウント名             - 参加者表示名             - 補足     - 学校主催イベント (企業スキルチェック)         - 学校             - 学籍番号             - 参加者アカウント名             - 参加者本名                 - 自組織イベントの場合                     - 必要権限： [自組織イベント個人情報閲覧] SESSION_PERSONAL_INFORMATION_VIEW                 - 他組織イベントの場合                     - 必要権限： [他組織イベント個人情報閲覧] SESSION_SPONSOR_PERSONAL_INFORMATION_VIEW                 - 人材紹介                     - 必要権限： [人材紹介機能] RECRUITMENT & 対象ユーザが人材紹介規約同意済み             - 補足         - スタッフ             - 学籍番号             - 参加者アカウント名             - 参加者本名                 - 必要権限： [人材紹介機能] RECRUITMENT             - 補足     - 学校・スタッフ主催イベント         - 企業 (イベント共催)             - アカウント名
     * セッション成績(問題ごと)
     */
    async getSessionRecordsPerQuestionRaw(requestParameters: GetSessionRecordsPerQuestionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SessionQuestionRecordListOut>>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getSessionRecordsPerQuestion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sessions/{session_id}/records/question-detail`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SessionQuestionRecordListOutFromJSON));
    }

    /**
     * セッション成績(問題ごと) - 必要権限: [OWN_SESSION_VIEW], [ALL_EVENT_AND_SESSION_VIEW] - 並び順:     - スコア順降順     - 同率スコアの場合、セッション参加順降順 - アカウント主催イベント毎のログインアカウント別の取得可能項目     - スタッフ主催イベント         - アルバイト             - 参加者アカウント名             - 参加者表示名         - スタッフ (企業スキルチェック)             - 参加者アカウント名             - 参加者本名                 - 自組織イベントの場合                     - 必要権限： [自組織イベント個人情報閲覧権限] OWN_SESSION_PERSONAL_INFORMATION_VIEW                 - 人材紹介                     - 必要権限： [人材紹介機能] RECRUITMENT & 対象ユーザが人材紹介規約同意済み             - 参加者表示名     - 企業主催イベント (企業スキルチェック)         - 企業/スタッフ             - 参加者アカウント名             - 参加者表示名             - 補足     - 学校主催イベント (企業スキルチェック)         - 学校             - 学籍番号             - 参加者アカウント名             - 参加者本名                 - 自組織イベントの場合                     - 必要権限： [自組織イベント個人情報閲覧] SESSION_PERSONAL_INFORMATION_VIEW                 - 他組織イベントの場合                     - 必要権限： [他組織イベント個人情報閲覧] SESSION_SPONSOR_PERSONAL_INFORMATION_VIEW                 - 人材紹介                     - 必要権限： [人材紹介機能] RECRUITMENT & 対象ユーザが人材紹介規約同意済み             - 補足         - スタッフ             - 学籍番号             - 参加者アカウント名             - 参加者本名                 - 必要権限： [人材紹介機能] RECRUITMENT             - 補足     - 学校・スタッフ主催イベント         - 企業 (イベント共催)             - アカウント名
     * セッション成績(問題ごと)
     */
    async getSessionRecordsPerQuestion(requestParameters: GetSessionRecordsPerQuestionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SessionQuestionRecordListOut>> {
        const response = await this.getSessionRecordsPerQuestionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * セッション成績(ユーザーごと) - 必要権限: [OWN_SESSION_VIEW], [ALL_EVENT_AND_SESSION_VIEW] - 並び順:     - スコア順降順     - 同率スコアの場合、セッション参加順降順 - アカウント主催イベント毎のログインアカウント別の取得可能項目     - スタッフ主催イベント         - アルバイト             - 参加者アカウント名             - 参加者表示名         - スタッフ (企業スキルチェック)             - 参加者アカウント名             - 参加者本名                 - 自組織イベントの場合                     - 必要権限： [自組織イベント個人情報閲覧権限] OWN_SESSION_PERSONAL_INFORMATION_VIEW                 - 人材紹介                     - 必要権限： [人材紹介機能] RECRUITMENT & 対象ユーザが人材紹介規約同意済み             - 参加者表示名     - 企業主催イベント (企業スキルチェック)         - 企業/スタッフ             - 参加者アカウント名             - 参加者表示名             - 補足     - 学校主催イベント (企業スキルチェック)         - 学校             - 学籍番号             - 参加者アカウント名             - 参加者本名                 - 自組織イベントの場合                     - 必要権限： [自組織イベント個人情報閲覧] SESSION_PERSONAL_INFORMATION_VIEW                 - 他組織イベントの場合                     - 必要権限： [他組織イベント個人情報閲覧] SESSION_SPONSOR_PERSONAL_INFORMATION_VIEW                 - 人材紹介                     - 必要権限： [人材紹介機能] RECRUITMENT & 対象ユーザが人材紹介規約同意済み             - 補足         - スタッフ             - 学籍番号             - 参加者アカウント名             - 参加者本名                 - 必要権限： [人材紹介機能] RECRUITMENT             - 補足     - 学校・スタッフ主催イベント         - 企業 (イベント共催)             - アカウント名
     * セッション成績(ユーザーごと)
     */
    async getSessionRecordsPerUserRaw(requestParameters: GetSessionRecordsPerUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SessionQuestionRecordPerUserListOut>>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getSessionRecordsPerUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sessions/{session_id}/records/user-detail`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SessionQuestionRecordPerUserListOutFromJSON));
    }

    /**
     * セッション成績(ユーザーごと) - 必要権限: [OWN_SESSION_VIEW], [ALL_EVENT_AND_SESSION_VIEW] - 並び順:     - スコア順降順     - 同率スコアの場合、セッション参加順降順 - アカウント主催イベント毎のログインアカウント別の取得可能項目     - スタッフ主催イベント         - アルバイト             - 参加者アカウント名             - 参加者表示名         - スタッフ (企業スキルチェック)             - 参加者アカウント名             - 参加者本名                 - 自組織イベントの場合                     - 必要権限： [自組織イベント個人情報閲覧権限] OWN_SESSION_PERSONAL_INFORMATION_VIEW                 - 人材紹介                     - 必要権限： [人材紹介機能] RECRUITMENT & 対象ユーザが人材紹介規約同意済み             - 参加者表示名     - 企業主催イベント (企業スキルチェック)         - 企業/スタッフ             - 参加者アカウント名             - 参加者表示名             - 補足     - 学校主催イベント (企業スキルチェック)         - 学校             - 学籍番号             - 参加者アカウント名             - 参加者本名                 - 自組織イベントの場合                     - 必要権限： [自組織イベント個人情報閲覧] SESSION_PERSONAL_INFORMATION_VIEW                 - 他組織イベントの場合                     - 必要権限： [他組織イベント個人情報閲覧] SESSION_SPONSOR_PERSONAL_INFORMATION_VIEW                 - 人材紹介                     - 必要権限： [人材紹介機能] RECRUITMENT & 対象ユーザが人材紹介規約同意済み             - 補足         - スタッフ             - 学籍番号             - 参加者アカウント名             - 参加者本名                 - 必要権限： [人材紹介機能] RECRUITMENT             - 補足     - 学校・スタッフ主催イベント         - 企業 (イベント共催)             - アカウント名
     * セッション成績(ユーザーごと)
     */
    async getSessionRecordsPerUser(requestParameters: GetSessionRecordsPerUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SessionQuestionRecordPerUserListOut>> {
        const response = await this.getSessionRecordsPerUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * セッションスレッド投稿の一覧取得 - 必要権限: [OWN_SESSION_VIEW] [PRO_SESSION_VIEW] [TECHTHON_SESSION_VIEW] - session_idに紐づくスレッドを一覧取得 - session_idのセッションが削除済み、存在しない場合NotFound - id降順に取得
     * セッションスレッド一覧取得
     */
    async getSessionThreadsRaw(requestParameters: GetSessionThreadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SessionThreadListOut>>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getSessionThreads.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sessions/{session_id}/threads`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SessionThreadListOutFromJSON));
    }

    /**
     * セッションスレッド投稿の一覧取得 - 必要権限: [OWN_SESSION_VIEW] [PRO_SESSION_VIEW] [TECHTHON_SESSION_VIEW] - session_idに紐づくスレッドを一覧取得 - session_idのセッションが削除済み、存在しない場合NotFound - id降順に取得
     * セッションスレッド一覧取得
     */
    async getSessionThreads(requestParameters: GetSessionThreadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SessionThreadListOut>> {
        const response = await this.getSessionThreadsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ユーザー成績一覧取得 - 並び順: order昇順 - 必要権限:     - [OWN_SESSION_VIEW]     - [ALL_EVENT_AND_SESSION_VIEW] - 取得条件：     - [ALL_EVENT_AND_SESSION_VIEW]を持つ場合         - 自組織・他組織イベントセッション取得可能     - [ALL_EVENT_AND_SESSION_VIEW]を持たない かつ [OWN_SESSION_VIEW]を持つ場合         - 自組織イベントセッションのみ取得可能 - (セッション作成者の)アカウントタイプ毎に取得項目変更:     - スタッフ主催イベント         - アルバイト:             - 名前(本名)/補足/都道府県　なし         -　ST,SU:             - 名前(本名)                 - 必要権限： 人材紹介機能 [RECRUITMENT]　& ユーザーが人材紹介規約同意済み                 - 自組織イベントの場合                     - 必要権限： 自組織個人情報閲覧 [SESSION_PERSONAL_INFORMATION_VIEW]             - 補足　なし         - イベント共催企業:             - 名前(本名)/表示名/補足 なし     - 学校主催イベント         - 学校・スタッフ:             - 表示名　なし             - 名前(本名)                 - 自組織イベントの場合                     - 必要権限： [自組織イベント個人情報閲覧] SESSION_PERSONAL_INFORMATION_VIEW                 - 他組織イベント かつ 閲覧者がスタッフの場合                     - 必要権限： [他組織イベント個人情報閲覧] SESSION_SPONSOR_PERSONAL_INFORMATION_VIEW                 - 必要権限: 人材紹介機能 [RECRUITMENT] & ユーザーが人材紹介規約同意済み         - イベント共催企業:             - 名前(本名)/表示名/補足/　なし     - 企業主催イベント         - 名前(本名)/都道府県/　なし
     * ユーザー成績一覧取得
     */
    async getSessionUserResultListRaw(requestParameters: GetSessionUserResultListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SessionUserResultListOut>>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getSessionUserResultList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sessions/{session_id}/results/users`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SessionUserResultListOutFromJSON));
    }

    /**
     * ユーザー成績一覧取得 - 並び順: order昇順 - 必要権限:     - [OWN_SESSION_VIEW]     - [ALL_EVENT_AND_SESSION_VIEW] - 取得条件：     - [ALL_EVENT_AND_SESSION_VIEW]を持つ場合         - 自組織・他組織イベントセッション取得可能     - [ALL_EVENT_AND_SESSION_VIEW]を持たない かつ [OWN_SESSION_VIEW]を持つ場合         - 自組織イベントセッションのみ取得可能 - (セッション作成者の)アカウントタイプ毎に取得項目変更:     - スタッフ主催イベント         - アルバイト:             - 名前(本名)/補足/都道府県　なし         -　ST,SU:             - 名前(本名)                 - 必要権限： 人材紹介機能 [RECRUITMENT]　& ユーザーが人材紹介規約同意済み                 - 自組織イベントの場合                     - 必要権限： 自組織個人情報閲覧 [SESSION_PERSONAL_INFORMATION_VIEW]             - 補足　なし         - イベント共催企業:             - 名前(本名)/表示名/補足 なし     - 学校主催イベント         - 学校・スタッフ:             - 表示名　なし             - 名前(本名)                 - 自組織イベントの場合                     - 必要権限： [自組織イベント個人情報閲覧] SESSION_PERSONAL_INFORMATION_VIEW                 - 他組織イベント かつ 閲覧者がスタッフの場合                     - 必要権限： [他組織イベント個人情報閲覧] SESSION_SPONSOR_PERSONAL_INFORMATION_VIEW                 - 必要権限: 人材紹介機能 [RECRUITMENT] & ユーザーが人材紹介規約同意済み         - イベント共催企業:             - 名前(本名)/表示名/補足/　なし     - 企業主催イベント         - 名前(本名)/都道府県/　なし
     * ユーザー成績一覧取得
     */
    async getSessionUserResultList(requestParameters: GetSessionUserResultListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SessionUserResultListOut>> {
        const response = await this.getSessionUserResultListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * セッション参加者の一覧を取得 - 必要権限：[OWN_SESSION_VIEW] [ALL_EVENT_AND_SESSION_VIEW] [PRO_SESSION_VIEW] [TECHTHON_SESSION_VIEW] - 取得条件：     - [ALL_EVENT_AND_SESSION_VIEW]を持つ場合         - 自組織・他組織イベントセッション取得可能     - [ALL_EVENT_AND_SESSION_VIEW]を持たない かつ     - ([OWN_SESSION_EDIT] または [PRO_SESSION_EDIT] または [TECHTHON_SESSION_EDIT]) を持つ 場合         - 自組織イベントセッション, 共催企業登録済イベントのみ取得可能 - (セッション作成者の)アカウントタイプ毎に取得項目変更     - スタッフ主催イベント         - アルバイト:             - 表示項目：参加者名(アカウント名)/表示名/参加日         - ST,SU:             - 表示項目：参加者名(アカウント名)/名前(本名)/表示名/都道府県/卒業予定/所属/参加日             - 名前(本名)                 - 必要権限： 人材紹介機能 [RECRUITMENT]　& ユーザーが人材紹介規約同意済み                 - 必要権限： 自組織個人情報閲覧 [OWN_SESSION_PERSONAL_INFORMATION_VIEW]         - イベント共催企業:             - 表示項目：参加者名(アカウント名)/都道府県/卒業予定/参加日     - 学校主催イベント         - 学校・スタッフ:             - 表示項目：参加者名(アカウント名)/名前(本名)/都道府県/卒業予定/所属/参加日/学籍番号             - 名前(本名)                 - 必要権限： [自組織イベント個人情報閲覧] OWN_SESSION_PERSONAL_INFORMATION_VIEW                 - 必要権限： [他組織イベント個人情報閲覧] SESSION_SPONSOR_PERSONAL_INFORMATION_VIEW                 - 権限: 人材紹介機能 [RECRUITMENT] & ユーザーが人材紹介規約同意済み         - イベント共催企業:             - 表示項目：参加者名(アカウント名)/都道府県/卒業予定/参加日     - 企業主催イベント         - 表示項目：参加者名(アカウント名)/表示名/補足/参加日
     * セッション参加者一覧取得
     */
    async getSessionUsersRaw(requestParameters: GetSessionUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SessionUsersListOut>>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getSessionUsers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sessions/{session_id}/users`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SessionUsersListOutFromJSON));
    }

    /**
     * セッション参加者の一覧を取得 - 必要権限：[OWN_SESSION_VIEW] [ALL_EVENT_AND_SESSION_VIEW] [PRO_SESSION_VIEW] [TECHTHON_SESSION_VIEW] - 取得条件：     - [ALL_EVENT_AND_SESSION_VIEW]を持つ場合         - 自組織・他組織イベントセッション取得可能     - [ALL_EVENT_AND_SESSION_VIEW]を持たない かつ     - ([OWN_SESSION_EDIT] または [PRO_SESSION_EDIT] または [TECHTHON_SESSION_EDIT]) を持つ 場合         - 自組織イベントセッション, 共催企業登録済イベントのみ取得可能 - (セッション作成者の)アカウントタイプ毎に取得項目変更     - スタッフ主催イベント         - アルバイト:             - 表示項目：参加者名(アカウント名)/表示名/参加日         - ST,SU:             - 表示項目：参加者名(アカウント名)/名前(本名)/表示名/都道府県/卒業予定/所属/参加日             - 名前(本名)                 - 必要権限： 人材紹介機能 [RECRUITMENT]　& ユーザーが人材紹介規約同意済み                 - 必要権限： 自組織個人情報閲覧 [OWN_SESSION_PERSONAL_INFORMATION_VIEW]         - イベント共催企業:             - 表示項目：参加者名(アカウント名)/都道府県/卒業予定/参加日     - 学校主催イベント         - 学校・スタッフ:             - 表示項目：参加者名(アカウント名)/名前(本名)/都道府県/卒業予定/所属/参加日/学籍番号             - 名前(本名)                 - 必要権限： [自組織イベント個人情報閲覧] OWN_SESSION_PERSONAL_INFORMATION_VIEW                 - 必要権限： [他組織イベント個人情報閲覧] SESSION_SPONSOR_PERSONAL_INFORMATION_VIEW                 - 権限: 人材紹介機能 [RECRUITMENT] & ユーザーが人材紹介規約同意済み         - イベント共催企業:             - 表示項目：参加者名(アカウント名)/都道府県/卒業予定/参加日     - 企業主催イベント         - 表示項目：参加者名(アカウント名)/表示名/補足/参加日
     * セッション参加者一覧取得
     */
    async getSessionUsers(requestParameters: GetSessionUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SessionUsersListOut>> {
        const response = await this.getSessionUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * セッション参加取り消し対象ユーザー一覧取得 - 必要権限: [OWN_SESSION_VIEW] [ALL_EVENT_AND_SESSION_VIEW] - 取得可能条件   - is_deleted = False   - [ALL_EVENT_AND_SESSION_VIEW]を持つ場合     - 自組織・他組織セッション取得可能   - [ALL_EVENT_AND_SESSION_VIEW]を持たない かつ [OWN_SESSION_VIEW]を持つ場合     - 自組織セッションのみ取得可能 - 取得条件：   - 開催中のセッションに参加しているユーザーのうち、一度も解答していないユーザーの一覧を取得 - 並び順: Session.created_atの降順 - レスポンス内容補足：   - ユーザーアイコン画像URL     - UserCommonInfo.icon   - ユーザー名     - UserCommonInfo.display_nameが存在する場合、UserCommonInfo.display_name     - 存在しない場合、User.username   - 名前     - API実行ユーザーが学校アカウントかスタッフアカウントの場合、UserCommonInfo.last_name + UserCommonInfo.first_name     - 上記以外の場合、\"-\"   - 補足:     - API実行ユーザーが学校アカウントかスタッフアカウントの場合、UserCommonInfo.extra_info     - 上記以外の場合、\"-\"   - 参加日     - Session.created_at
     * セッション参加取り消し対象ユーザー一覧取得
     */
    async getSessionUsersOutRaw(requestParameters: GetSessionUsersOutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SessionUsersOutListOut>>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getSessionUsersOut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sessions/{session_id}/users/out`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SessionUsersOutListOutFromJSON));
    }

    /**
     * セッション参加取り消し対象ユーザー一覧取得 - 必要権限: [OWN_SESSION_VIEW] [ALL_EVENT_AND_SESSION_VIEW] - 取得可能条件   - is_deleted = False   - [ALL_EVENT_AND_SESSION_VIEW]を持つ場合     - 自組織・他組織セッション取得可能   - [ALL_EVENT_AND_SESSION_VIEW]を持たない かつ [OWN_SESSION_VIEW]を持つ場合     - 自組織セッションのみ取得可能 - 取得条件：   - 開催中のセッションに参加しているユーザーのうち、一度も解答していないユーザーの一覧を取得 - 並び順: Session.created_atの降順 - レスポンス内容補足：   - ユーザーアイコン画像URL     - UserCommonInfo.icon   - ユーザー名     - UserCommonInfo.display_nameが存在する場合、UserCommonInfo.display_name     - 存在しない場合、User.username   - 名前     - API実行ユーザーが学校アカウントかスタッフアカウントの場合、UserCommonInfo.last_name + UserCommonInfo.first_name     - 上記以外の場合、\"-\"   - 補足:     - API実行ユーザーが学校アカウントかスタッフアカウントの場合、UserCommonInfo.extra_info     - 上記以外の場合、\"-\"   - 参加日     - Session.created_at
     * セッション参加取り消し対象ユーザー一覧取得
     */
    async getSessionUsersOut(requestParameters: GetSessionUsersOutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SessionUsersOutListOut>> {
        const response = await this.getSessionUsersOutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * スキルチェックセッション（企業作成セッション）に参加できるユーザーの一覧を取得する 参加者追加タブにて使用 - 必要権限：[OWN_SESSION_EDIT]     - 自組織主催イベントの企業アカウントのみ実行できる - session_idに紐づく追加可能な参加者アカウントの一覧を取得する     - 取得ユーザ条件：ログインしている企業アカウントが発行したスキルチェックアカウント - session_idのセッションが削除済み、存在しない場合NotFound
     * スキルチェックセッション参加者追加一覧取得
     */
    async getSkillCheckUsersAdditionalListRaw(requestParameters: GetSkillCheckUsersAdditionalListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SessionUsersAddListOut>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getSkillCheckUsersAdditionalList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sessions/{session_id}/skill-check-users`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionUsersAddListOutFromJSON(jsonValue));
    }

    /**
     * スキルチェックセッション（企業作成セッション）に参加できるユーザーの一覧を取得する 参加者追加タブにて使用 - 必要権限：[OWN_SESSION_EDIT]     - 自組織主催イベントの企業アカウントのみ実行できる - session_idに紐づく追加可能な参加者アカウントの一覧を取得する     - 取得ユーザ条件：ログインしている企業アカウントが発行したスキルチェックアカウント - session_idのセッションが削除済み、存在しない場合NotFound
     * スキルチェックセッション参加者追加一覧取得
     */
    async getSkillCheckUsersAdditionalList(requestParameters: GetSkillCheckUsersAdditionalListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SessionUsersAddListOut> {
        const response = await this.getSkillCheckUsersAdditionalListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * セッション一時停止 - 必要権限: [OWN_SESSION_EDIT] [ALL_EVENT_AND_SESSION_EDIT] [PRO_SESSION_EDIT] [TECHTHON_SESSION_EDIT] - 実行可能条件     - [ALL_EVENT_AND_SESSION_EDIT]を持つ場合         - 自組織・他組織イベントセッション実行可能     - [ALL_EVENT_AND_SESSION_EDIT]を持たない かつ     - ([OWN_SESSION_EDIT] または [PRO_SESSION_EDIT] または [TECHTHON_SESSION_EDIT]) を持つ 場合         - 自組織イベントセッションのみ実行可能     - is_active = True のみ実行可能     - is_deleted = False のみ実行可能
     * セッション一時停止
     */
    async pauseSessionRaw(requestParameters: PauseSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSchemasManageSessionsSessionDetailOutSessionDetailOut>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling pauseSession.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sessions/{session_id}/pause`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppSchemasManageSessionsSessionDetailOutSessionDetailOutFromJSON(jsonValue));
    }

    /**
     * セッション一時停止 - 必要権限: [OWN_SESSION_EDIT] [ALL_EVENT_AND_SESSION_EDIT] [PRO_SESSION_EDIT] [TECHTHON_SESSION_EDIT] - 実行可能条件     - [ALL_EVENT_AND_SESSION_EDIT]を持つ場合         - 自組織・他組織イベントセッション実行可能     - [ALL_EVENT_AND_SESSION_EDIT]を持たない かつ     - ([OWN_SESSION_EDIT] または [PRO_SESSION_EDIT] または [TECHTHON_SESSION_EDIT]) を持つ 場合         - 自組織イベントセッションのみ実行可能     - is_active = True のみ実行可能     - is_deleted = False のみ実行可能
     * セッション一時停止
     */
    async pauseSession(requestParameters: PauseSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSchemasManageSessionsSessionDetailOutSessionDetailOut> {
        const response = await this.pauseSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * セッション規約を登録する - 必要権限: [OWN_SESSION_EDIT] [ALL_EVENT_AND_SESSION_EDIT] - セッション開始後・終了後の場合不可
     * セッション規約を登録する
     */
    async registerSessionTermRaw(requestParameters: RegisterSessionTermRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SessionTermDetailOut>> {
        if (requestParameters.sessionTermId === null || requestParameters.sessionTermId === undefined) {
            throw new runtime.RequiredError('sessionTermId','Required parameter requestParameters.sessionTermId was null or undefined when calling registerSessionTerm.');
        }

        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling registerSessionTerm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sessions/{session_id}/registration/{session_term_id}`.replace(`{${"session_term_id"}}`, encodeURIComponent(String(requestParameters.sessionTermId))).replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionTermDetailOutFromJSON(jsonValue));
    }

    /**
     * セッション規約を登録する - 必要権限: [OWN_SESSION_EDIT] [ALL_EVENT_AND_SESSION_EDIT] - セッション開始後・終了後の場合不可
     * セッション規約を登録する
     */
    async registerSessionTerm(requestParameters: RegisterSessionTermRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SessionTermDetailOut> {
        const response = await this.registerSessionTermRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 認定試験のタイマーを再開 - セッションユーザーステータスを解答終了から再開待ちに変更 - is_reset=Trueの場合、session_user.user_start_at・end_atを削除して更新 - 必要権限     -　444主催         - スタッフ     - 学校主催         - スタッフ         - 主催学校
     * 認定試験のタイマーを再開
     */
    async restartCertificateExamUserTimerRaw(requestParameters: RestartCertificateExamUserTimerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling restartCertificateExamUserTimer.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling restartCertificateExamUserTimer.');
        }

        const queryParameters: any = {};

        if (requestParameters.isReset !== undefined) {
            queryParameters['is_reset'] = requestParameters.isReset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sessions/certificate-exam/{session_id}/users/{user_id}/timer/restart`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 認定試験のタイマーを再開 - セッションユーザーステータスを解答終了から再開待ちに変更 - is_reset=Trueの場合、session_user.user_start_at・end_atを削除して更新 - 必要権限     -　444主催         - スタッフ     - 学校主催         - スタッフ         - 主催学校
     * 認定試験のタイマーを再開
     */
    async restartCertificateExamUserTimer(requestParameters: RestartCertificateExamUserTimerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.restartCertificateExamUserTimerRaw(requestParameters, initOverrides);
    }

    /**
     * セッション再開 - 必要権限: [OWN_SESSION_EDIT] [ALL_EVENT_AND_SESSION_EDIT] [PRO_SESSION_EDIT] [TECHTHON_SESSION_EDIT] - 実行可能条件     - [ALL_EVENT_AND_SESSION_EDIT]を持つ場合         - 自組織・他組織イベントセッション実行可能     - [ALL_EVENT_AND_SESSION_EDIT]を持たない かつ     - ([OWN_SESSION_EDIT] または [PRO_SESSION_EDIT] または [TECHTHON_SESSION_EDIT]) を持つ 場合         - 自組織イベントセッションのみ実行可能     - is_active = False のみ実行可能     - is_deleted = False のみ実行可能
     * セッション再開
     */
    async resumeSessionRaw(requestParameters: ResumeSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSchemasManageSessionsSessionDetailOutSessionDetailOut>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling resumeSession.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sessions/{session_id}/resume`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppSchemasManageSessionsSessionDetailOutSessionDetailOutFromJSON(jsonValue));
    }

    /**
     * セッション再開 - 必要権限: [OWN_SESSION_EDIT] [ALL_EVENT_AND_SESSION_EDIT] [PRO_SESSION_EDIT] [TECHTHON_SESSION_EDIT] - 実行可能条件     - [ALL_EVENT_AND_SESSION_EDIT]を持つ場合         - 自組織・他組織イベントセッション実行可能     - [ALL_EVENT_AND_SESSION_EDIT]を持たない かつ     - ([OWN_SESSION_EDIT] または [PRO_SESSION_EDIT] または [TECHTHON_SESSION_EDIT]) を持つ 場合         - 自組織イベントセッションのみ実行可能     - is_active = False のみ実行可能     - is_deleted = False のみ実行可能
     * セッション再開
     */
    async resumeSession(requestParameters: ResumeSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSchemasManageSessionsSessionDetailOutSessionDetailOut> {
        const response = await this.resumeSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * セッションで提出されたコード内を検索する - 必要権限：[OWN_EVENT_EDIT]     - スタッフアカウントは全てのセッション対象に実行可     - 学校アカウントは学校主催セッション対象に実行可 - 返却データ詳細：     - 指定されたセッション内問題に紐づく提出コード（合格ステータスの解答のみ）を返却     - search_result_countに指定検索ワードでの該当回数を表示する(０回の場合も結果自体は表示する) - session_idのセッションが削除済み、存在しない場合NotFound - 学校主催セッション以外の場合PermissionDenied - content_idが不正の場合(存在しないID or QuestionType.CODING/FILLING/BUG以外)、NotFound
     * セッション提出コード検索
     */
    async searchSessionSubmittedCodeRaw(requestParameters: SearchSessionSubmittedCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SessionSearchCodeOut>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling searchSessionSubmittedCode.');
        }

        if (requestParameters.contentId === null || requestParameters.contentId === undefined) {
            throw new runtime.RequiredError('contentId','Required parameter requestParameters.contentId was null or undefined when calling searchSessionSubmittedCode.');
        }

        if (requestParameters.keyword === null || requestParameters.keyword === undefined) {
            throw new runtime.RequiredError('keyword','Required parameter requestParameters.keyword was null or undefined when calling searchSessionSubmittedCode.');
        }

        const queryParameters: any = {};

        if (requestParameters.contentId !== undefined) {
            queryParameters['content_id'] = requestParameters.contentId;
        }

        if (requestParameters.keyword !== undefined) {
            queryParameters['keyword'] = requestParameters.keyword;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sessions/{session_id}/code-search`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionSearchCodeOutFromJSON(jsonValue));
    }

    /**
     * セッションで提出されたコード内を検索する - 必要権限：[OWN_EVENT_EDIT]     - スタッフアカウントは全てのセッション対象に実行可     - 学校アカウントは学校主催セッション対象に実行可 - 返却データ詳細：     - 指定されたセッション内問題に紐づく提出コード（合格ステータスの解答のみ）を返却     - search_result_countに指定検索ワードでの該当回数を表示する(０回の場合も結果自体は表示する) - session_idのセッションが削除済み、存在しない場合NotFound - 学校主催セッション以外の場合PermissionDenied - content_idが不正の場合(存在しないID or QuestionType.CODING/FILLING/BUG以外)、NotFound
     * セッション提出コード検索
     */
    async searchSessionSubmittedCode(requestParameters: SearchSessionSubmittedCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SessionSearchCodeOut> {
        const response = await this.searchSessionSubmittedCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * セッション規約を登録解除する - 必要権限: [OWN_SESSION_EDIT] [ALL_EVENT_AND_SESSION_EDIT] - Sessionモデル内の規約IDをNoneに更新する - セッション開始後・終了後の場合不可
     * セッション規約を登録解除する
     */
    async unregisterSessionTermRaw(requestParameters: UnregisterSessionTermRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling unregisterSessionTerm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/sessions/{session_id}/unregistration`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * セッション規約を登録解除する - 必要権限: [OWN_SESSION_EDIT] [ALL_EVENT_AND_SESSION_EDIT] - Sessionモデル内の規約IDをNoneに更新する - セッション開始後・終了後の場合不可
     * セッション規約を登録解除する
     */
    async unregisterSessionTerm(requestParameters: UnregisterSessionTermRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.unregisterSessionTermRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * セッション設定更新 - 必要権限: [OWN_SESSION_EDIT], [ALL_EVENT_AND_SESSION_EDIT] - 練習用セッションへ設定変更時の挙動     - イベント詳細画面-イベント成績タブのスコア集計からセッション内の全ての問題が外れる。     - 就職用ポートフォリオの問題関連の集計から、本セッションで解いた全ての問題が外れる。 - アカウント毎の設定更新可能項目     - 全アカウント・全イベント目的で共通で設定可能         - name         - starts_at         - ends_at         - location         - リアルタイムランキング表示             - 表示人数             - 参加者にランキングを表示する         - 参加者にランキング表示         - 使用可能言語     - スタッフ設定可能項目         - パスワードつきセッション             - パスワード: パスワードつきセッション時必須(自動生成)         - 練習用セッション         - 参加ユーザー制限         - 卒業年度制限-以上，以下         - リアルタイムランキング表示             - 実名表示             - 所属組織         - 参加者にアンケートを表示する         - アンケート詳細設定         - Googleフォーム解答ページURL         - 説明文         - Googleフォーム編集ページURL[管理者のみ表示]     - 学校アカウント設定可能項目         - パスワードつきセッション             - パスワード: パスワードつきセッション時必須(自動生成)         - 練習用セッション         - 小テスト用セッション         - ランダムセッション         - 問題数         - 挑戦状況表示         - リアルタイムランキング表示             - 実名表示             - 所属組織             - 補足情報             - 学籍番号     - 検定試験のみ設定可能項目         - 試験時間(分)     - プログラミングコンテストのみ設定可能項目         - 求人紹介規約の同意を要求する - 更新可能条件     - [ALL_EVENT_AND_SESSION_EDIT]を持つ場合         - 自組織・他組織イベントセッション実施可能     - [ALL_EVENT_AND_SESSION_EDIT]を持たない かつ [OWN_SESSION_EDIT]を持つ場合         - 自組織イベントセッションのみ実施可能
     * セッション設定更新
     */
    async updateSessionRaw(requestParameters: UpdateSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSchemasManageSessionsSessionDetailOutSessionDetailOut>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling updateSession.');
        }

        if (requestParameters.sessionUpdateIn === null || requestParameters.sessionUpdateIn === undefined) {
            throw new runtime.RequiredError('sessionUpdateIn','Required parameter requestParameters.sessionUpdateIn was null or undefined when calling updateSession.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/sessions/{session_id}`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SessionUpdateInToJSON(requestParameters.sessionUpdateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppSchemasManageSessionsSessionDetailOutSessionDetailOutFromJSON(jsonValue));
    }

    /**
     * セッション設定更新 - 必要権限: [OWN_SESSION_EDIT], [ALL_EVENT_AND_SESSION_EDIT] - 練習用セッションへ設定変更時の挙動     - イベント詳細画面-イベント成績タブのスコア集計からセッション内の全ての問題が外れる。     - 就職用ポートフォリオの問題関連の集計から、本セッションで解いた全ての問題が外れる。 - アカウント毎の設定更新可能項目     - 全アカウント・全イベント目的で共通で設定可能         - name         - starts_at         - ends_at         - location         - リアルタイムランキング表示             - 表示人数             - 参加者にランキングを表示する         - 参加者にランキング表示         - 使用可能言語     - スタッフ設定可能項目         - パスワードつきセッション             - パスワード: パスワードつきセッション時必須(自動生成)         - 練習用セッション         - 参加ユーザー制限         - 卒業年度制限-以上，以下         - リアルタイムランキング表示             - 実名表示             - 所属組織         - 参加者にアンケートを表示する         - アンケート詳細設定         - Googleフォーム解答ページURL         - 説明文         - Googleフォーム編集ページURL[管理者のみ表示]     - 学校アカウント設定可能項目         - パスワードつきセッション             - パスワード: パスワードつきセッション時必須(自動生成)         - 練習用セッション         - 小テスト用セッション         - ランダムセッション         - 問題数         - 挑戦状況表示         - リアルタイムランキング表示             - 実名表示             - 所属組織             - 補足情報             - 学籍番号     - 検定試験のみ設定可能項目         - 試験時間(分)     - プログラミングコンテストのみ設定可能項目         - 求人紹介規約の同意を要求する - 更新可能条件     - [ALL_EVENT_AND_SESSION_EDIT]を持つ場合         - 自組織・他組織イベントセッション実施可能     - [ALL_EVENT_AND_SESSION_EDIT]を持たない かつ [OWN_SESSION_EDIT]を持つ場合         - 自組織イベントセッションのみ実施可能
     * セッション設定更新
     */
    async updateSession(requestParameters: UpdateSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSchemasManageSessionsSessionDetailOutSessionDetailOut> {
        const response = await this.updateSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
