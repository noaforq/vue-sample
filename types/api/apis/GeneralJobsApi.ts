/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  AppRoutersGeneralJobsGetJobsListOrdering,
  BannerJobListOut,
  JobDetailDetailOut,
  JobsListOut,
  RelatedJobList,
  ValidationError,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    AppRoutersGeneralJobsGetJobsListOrderingFromJSON,
    AppRoutersGeneralJobsGetJobsListOrderingToJSON,
    BannerJobListOutFromJSON,
    BannerJobListOutToJSON,
    JobDetailDetailOutFromJSON,
    JobDetailDetailOutToJSON,
    JobsListOutFromJSON,
    JobsListOutToJSON,
    RelatedJobListFromJSON,
    RelatedJobListToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface GeneralGetJobRequest {
    jobId: number;
}

export interface GeneralGetJobsListRequest {
    orderBy?: AppRoutersGeneralJobsGetJobsListOrdering;
    limit?: number;
    offset?: number;
    employmentStatus?: string;
    pgLang?: string;
    framework?: string;
    occupation?: string;
    feature?: string;
    companyName?: string;
    isFavorite?: boolean;
    isScoutReceive?: boolean;
    graduationYear?: number;
}

export interface GeneralGetRelatedJobsRequest {
    jobId: number;
}

export interface GeneralPutJobApplicationRequest {
    jobId: number;
}

export interface GeneralPutJobFavoriteRequest {
    jobId: number;
}

/**
 * 
 */
export class GeneralJobsApi extends runtime.BaseAPI {

    /**
     * _summary_  Returns:     JobDetailOut: _description_
     * 一般求人詳細取得
     */
    async generalGetJobRaw(requestParameters: GeneralGetJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobDetailDetailOut>> {
        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling generalGetJob.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/jobs/{job_id}`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobDetailDetailOutFromJSON(jsonValue));
    }

    /**
     * _summary_  Returns:     JobDetailOut: _description_
     * 一般求人詳細取得
     */
    async generalGetJob(requestParameters: GeneralGetJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobDetailDetailOut> {
        const response = await this.generalGetJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * _summary_  Returns:     JobsListOut: _description_
     * 一般求人一覧取得
     */
    async generalGetJobsListRaw(requestParameters: GeneralGetJobsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobsListOut>> {
        const queryParameters: any = {};

        if (requestParameters.orderBy !== undefined) {
            queryParameters['order_by'] = requestParameters.orderBy;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.employmentStatus !== undefined) {
            queryParameters['employmentStatus'] = requestParameters.employmentStatus;
        }

        if (requestParameters.pgLang !== undefined) {
            queryParameters['pgLang'] = requestParameters.pgLang;
        }

        if (requestParameters.framework !== undefined) {
            queryParameters['framework'] = requestParameters.framework;
        }

        if (requestParameters.occupation !== undefined) {
            queryParameters['occupation'] = requestParameters.occupation;
        }

        if (requestParameters.feature !== undefined) {
            queryParameters['feature'] = requestParameters.feature;
        }

        if (requestParameters.companyName !== undefined) {
            queryParameters['companyName'] = requestParameters.companyName;
        }

        if (requestParameters.isFavorite !== undefined) {
            queryParameters['isFavorite'] = requestParameters.isFavorite;
        }

        if (requestParameters.isScoutReceive !== undefined) {
            queryParameters['isScoutReceive'] = requestParameters.isScoutReceive;
        }

        if (requestParameters.graduationYear !== undefined) {
            queryParameters['graduationYear'] = requestParameters.graduationYear;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/jobs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobsListOutFromJSON(jsonValue));
    }

    /**
     * _summary_  Returns:     JobsListOut: _description_
     * 一般求人一覧取得
     */
    async generalGetJobsList(requestParameters: GeneralGetJobsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobsListOut> {
        const response = await this.generalGetJobsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 関連求人を取得する
     */
    async generalGetRelatedJobsRaw(requestParameters: GeneralGetRelatedJobsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RelatedJobList>>> {
        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling generalGetRelatedJobs.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/jobs/{job_id}/related-jobs`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RelatedJobListFromJSON));
    }

    /**
     * 関連求人を取得する
     */
    async generalGetRelatedJobs(requestParameters: GeneralGetRelatedJobsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RelatedJobList>> {
        const response = await this.generalGetRelatedJobsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * _summary_ Returns:     None: _description_
     * 一般求人応募
     */
    async generalPutJobApplicationRaw(requestParameters: GeneralPutJobApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling generalPutJobApplication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/jobs/{job_id}/applications`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * _summary_ Returns:     None: _description_
     * 一般求人応募
     */
    async generalPutJobApplication(requestParameters: GeneralPutJobApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.generalPutJobApplicationRaw(requestParameters, initOverrides);
    }

    /**
     * _summary_  Returns:     None: _description_
     * 一般求人気になる変更
     */
    async generalPutJobFavoriteRaw(requestParameters: GeneralPutJobFavoriteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling generalPutJobFavorite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/jobs/{job_id}/favorites`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * _summary_  Returns:     None: _description_
     * 一般求人気になる変更
     */
    async generalPutJobFavorite(requestParameters: GeneralPutJobFavoriteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.generalPutJobFavoriteRaw(requestParameters, initOverrides);
    }

    /**
     * 一般求人 - ピックアップ求人(バナー求人)一覧取得 - 必要権限: [Pm.GENERAL_USER] - 仕様     - 公開済み求人をランダムで9件取得する         - 並び順含めリクエスト毎に毎回ランダム取得         - 9個に満たない場合は全求人を取得する(並び順はランダム)
     * 一般求人 - ピックアップ求人(バナー求人)一覧取得(未実装)
     */
    async getBannerJobListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BannerJobListOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/general/jobs/banner`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BannerJobListOutFromJSON));
    }

    /**
     * 一般求人 - ピックアップ求人(バナー求人)一覧取得 - 必要権限: [Pm.GENERAL_USER] - 仕様     - 公開済み求人をランダムで9件取得する         - 並び順含めリクエスト毎に毎回ランダム取得         - 9個に満たない場合は全求人を取得する(並び順はランダム)
     * 一般求人 - ピックアップ求人(バナー求人)一覧取得(未実装)
     */
    async getBannerJobList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BannerJobListOut>> {
        const response = await this.getBannerJobListRaw(initOverrides);
        return await response.value();
    }

}
