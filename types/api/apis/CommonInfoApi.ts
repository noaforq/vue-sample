/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  AppSchemasCommonInfoInformationDetailOutInformationDetailOut,
  InfoListOut,
  InformationDashboardListOut,
  NotificationDetailOut,
  ValidationError,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    AppSchemasCommonInfoInformationDetailOutInformationDetailOutFromJSON,
    AppSchemasCommonInfoInformationDetailOutInformationDetailOutToJSON,
    InfoListOutFromJSON,
    InfoListOutToJSON,
    InformationDashboardListOutFromJSON,
    InformationDashboardListOutToJSON,
    NotificationDetailOutFromJSON,
    NotificationDetailOutToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface GetCommonInformationDetailRequest {
    informationId: number;
}

export interface GetCommonNotificationDetailRequest {
    notificationId: number;
}

/**
 * 
 */
export class CommonInfoApi extends runtime.BaseAPI {

    /**
     * ダッシュボード用インフォ一覧取得 - 必要権限: [GENERAL_USER, INFORMATION_VIEW] - 仕様     - ユーザタイプに応じて、該当する未読のアップデートのお知らせインフォ(Information)一覧を返す     - 返す全てのインフォに対し、既読フラグ(InformationViewLog)を付与する     - フィルタリング条件: 公開フラグがTrue AND 未読 AND アップデートのお知らせかがTrue     - ソート条件：作成日の降順
     * ダッシュボード用インフォ一覧取得
     */
    async getCommonInformationDashboardListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InformationDashboardListOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/info/informations/dashboard`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InformationDashboardListOutFromJSON));
    }

    /**
     * ダッシュボード用インフォ一覧取得 - 必要権限: [GENERAL_USER, INFORMATION_VIEW] - 仕様     - ユーザタイプに応じて、該当する未読のアップデートのお知らせインフォ(Information)一覧を返す     - 返す全てのインフォに対し、既読フラグ(InformationViewLog)を付与する     - フィルタリング条件: 公開フラグがTrue AND 未読 AND アップデートのお知らせかがTrue     - ソート条件：作成日の降順
     * ダッシュボード用インフォ一覧取得
     */
    async getCommonInformationDashboardList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InformationDashboardListOut>> {
        const response = await this.getCommonInformationDashboardListRaw(initOverrides);
        return await response.value();
    }

    /**
     * インフォ詳細取得 - 必要権限: [GENERAL_USER, INFORMATION_VIEW] - 仕様     - information_idに該当するインフォ(Information)を返す     - 返すインフォが未読の場合は既読フラグ(InformationViewLog)を付与する     - 該当するインフォが存在しない場合は404     - 該当するインフォのタイプがユーザータイプと異なる場合は403
     * インフォ詳細取得
     */
    async getCommonInformationDetailRaw(requestParameters: GetCommonInformationDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSchemasCommonInfoInformationDetailOutInformationDetailOut>> {
        if (requestParameters.informationId === null || requestParameters.informationId === undefined) {
            throw new runtime.RequiredError('informationId','Required parameter requestParameters.informationId was null or undefined when calling getCommonInformationDetail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/info/informations/{information_id}`.replace(`{${"information_id"}}`, encodeURIComponent(String(requestParameters.informationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppSchemasCommonInfoInformationDetailOutInformationDetailOutFromJSON(jsonValue));
    }

    /**
     * インフォ詳細取得 - 必要権限: [GENERAL_USER, INFORMATION_VIEW] - 仕様     - information_idに該当するインフォ(Information)を返す     - 返すインフォが未読の場合は既読フラグ(InformationViewLog)を付与する     - 該当するインフォが存在しない場合は404     - 該当するインフォのタイプがユーザータイプと異なる場合は403
     * インフォ詳細取得
     */
    async getCommonInformationDetail(requestParameters: GetCommonInformationDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSchemasCommonInfoInformationDetailOutInformationDetailOut> {
        const response = await this.getCommonInformationDetailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * インフォ一覧取得 - 必要権限: [GENERAL_USER, INFORMATION_VIEW] - 仕様     - ユーザタイプに応じて、該当するインフォ(Information)一覧を返す     - フィルタリング条件: 公開フラグがTrue     - ソート条件：作成日の降順
     * インフォ一覧取得
     */
    async getCommonInformationListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InfoListOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/info/informations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InfoListOutFromJSON));
    }

    /**
     * インフォ一覧取得 - 必要権限: [GENERAL_USER, INFORMATION_VIEW] - 仕様     - ユーザタイプに応じて、該当するインフォ(Information)一覧を返す     - フィルタリング条件: 公開フラグがTrue     - ソート条件：作成日の降順
     * インフォ一覧取得
     */
    async getCommonInformationList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InfoListOut>> {
        const response = await this.getCommonInformationListRaw(initOverrides);
        return await response.value();
    }

    /**
     * 通知詳細取得 - 必要権限: [GENERAL_USER, INFORMATION_VIEW] - 仕様     - notification_idに該当する通知(Notification)のURLを返す     - 返す通知が未読の場合は既読フラグ(NotificationViewLog)を付与する     - 該当する通知が存在しない場合は404     - 該当する通知のが自分宛or自組織宛でなければ403
     * 通知詳細取得
     */
    async getCommonNotificationDetailRaw(requestParameters: GetCommonNotificationDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationDetailOut>> {
        if (requestParameters.notificationId === null || requestParameters.notificationId === undefined) {
            throw new runtime.RequiredError('notificationId','Required parameter requestParameters.notificationId was null or undefined when calling getCommonNotificationDetail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/info/notifications/{notification_id}`.replace(`{${"notification_id"}}`, encodeURIComponent(String(requestParameters.notificationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationDetailOutFromJSON(jsonValue));
    }

    /**
     * 通知詳細取得 - 必要権限: [GENERAL_USER, INFORMATION_VIEW] - 仕様     - notification_idに該当する通知(Notification)のURLを返す     - 返す通知が未読の場合は既読フラグ(NotificationViewLog)を付与する     - 該当する通知が存在しない場合は404     - 該当する通知のが自分宛or自組織宛でなければ403
     * 通知詳細取得
     */
    async getCommonNotificationDetail(requestParameters: GetCommonNotificationDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationDetailOut> {
        const response = await this.getCommonNotificationDetailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 通知一覧取得 - 必要権限: [GENERAL_USER, INFORMATION_VIEW] - 仕様     - ユーザー宛 + ユーザーが所属する組織宛の通知(Notification)一覧を返す         - ユーザーが一般ユーザー(GENERAL)の場合は「ユーザー宛」のみ判定する         - is_for_all(通知タイプ)は未使用のため考慮しない     - ソート条件：作成日の降順
     * 通知一覧取得
     */
    async getCommonNotificationListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InfoListOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/info/notifications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InfoListOutFromJSON));
    }

    /**
     * 通知一覧取得 - 必要権限: [GENERAL_USER, INFORMATION_VIEW] - 仕様     - ユーザー宛 + ユーザーが所属する組織宛の通知(Notification)一覧を返す         - ユーザーが一般ユーザー(GENERAL)の場合は「ユーザー宛」のみ判定する         - is_for_all(通知タイプ)は未使用のため考慮しない     - ソート条件：作成日の降順
     * 通知一覧取得
     */
    async getCommonNotificationList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InfoListOut>> {
        const response = await this.getCommonNotificationListRaw(initOverrides);
        return await response.value();
    }

    /**
     * インフォ一括既読 - 必要権限: [GENERAL_USER, INFORMATION_VIEW] - 仕様     - 未読のインフォを一括で既読にする         - 判定対象のインフォはインフォ一覧(get_information_list)と同じ条件
     * インフォ一括既読
     */
    async viewAllInformationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/info/informations/view-all`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * インフォ一括既読 - 必要権限: [GENERAL_USER, INFORMATION_VIEW] - 仕様     - 未読のインフォを一括で既読にする         - 判定対象のインフォはインフォ一覧(get_information_list)と同じ条件
     * インフォ一括既読
     */
    async viewAllInformations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.viewAllInformationsRaw(initOverrides);
    }

    /**
     * 通知一括既読 - 必要権限: [GENERAL_USER, INFORMATION_VIEW] - 仕様     - 未読の通知を一括で既読にする         - 判定対象の通知は通知一覧(get_notification_list)と同じ条件
     * 通知一括既読
     */
    async viewAllNotificationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/info/notifications/view-all`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 通知一括既読 - 必要権限: [GENERAL_USER, INFORMATION_VIEW] - 仕様     - 未読の通知を一括で既読にする         - 判定対象の通知は通知一覧(get_notification_list)と同じ条件
     * 通知一括既読
     */
    async viewAllNotifications(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.viewAllNotificationsRaw(initOverrides);
    }

}
