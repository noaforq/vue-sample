/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  SelectionDateTimeUpdateIn,
  SelectionListOut,
  SelectionMemoUpdateIn,
  SelectionStep,
  SelectionStepUpdateIn,
  ValidationError,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    SelectionDateTimeUpdateInFromJSON,
    SelectionDateTimeUpdateInToJSON,
    SelectionListOutFromJSON,
    SelectionListOutToJSON,
    SelectionMemoUpdateInFromJSON,
    SelectionMemoUpdateInToJSON,
    SelectionStepFromJSON,
    SelectionStepToJSON,
    SelectionStepUpdateInFromJSON,
    SelectionStepUpdateInToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface GetSelectionListRequest {
    username?: string;
    jobId?: number;
    organizationId?: number;
    companyId?: number;
    isFavorite?: boolean;
    selectionStep?: Array<SelectionStep>;
    startsAt?: number;
    graduationYearFrom?: number;
    graduationYearTo?: number;
    offset?: number;
    limit?: number;
}

export interface UpdateFavoriteSelectionRequest {
    jobSelectionId: number;
}

export interface UpdateSelectionRequest {
    jobSelectionId: number;
    selectionStepUpdateIn: SelectionStepUpdateIn;
}

export interface UpdateSelectionDatetimeRequest {
    jobSelectionId: number;
    selectionDateTimeUpdateIn: SelectionDateTimeUpdateIn;
}

export interface UpdateSelectionMemoRequest {
    jobSelectionId: number;
    selectionMemoUpdateIn: SelectionMemoUpdateIn;
}

/**
 * 
 */
export class ManageSelectionsApi extends runtime.BaseAPI {

    /**
     * 選考管理一覧取得 - 必要権限: [SELECTION | PORTFOLIO_PERSONAL_INFORMATION_VIEW | RECRUITMENT] - 並び順: 選考ID降順 - 444スタッフ： 企業名検索ができる & 件数取得 - 企業ユーザー: 自分が所属する企業IDで絞り込み & 企業名検索ができない ＆ 件数取得 - 取得条件     - Job.is_deleted=False     - Job.is_published=True - 項目取得条件     - 本名/年齢         - PORTFOLIO_PERSONAL_INFORMATION_VIEW         - RECRUITMENT & 対象ユーザー人材紹介規約同意済み         - SELECTION & 選考タイプ：スカウト & スカウト承諾済み(応募中以降の選考中ステップあり)         - SELECTION & 選考タイプ：自己応募 & 選考受理済み(書類選考以降の選考中ステップあり)     - 条件を満たさない場合はNoneにする(非表示) - 検索条件     - UserID     - 求人ID     - 選考ステップ - 絞り込み条件     - お気に入り     - 企業ID     - 選考ステップ     - 選考開始年     - 卒業年度
     * 選考管理一覧取得
     */
    async getSelectionListRaw(requestParameters: GetSelectionListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SelectionListOut>> {
        const queryParameters: any = {};

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        if (requestParameters.jobId !== undefined) {
            queryParameters['job_id'] = requestParameters.jobId;
        }

        if (requestParameters.organizationId !== undefined) {
            queryParameters['organization_id'] = requestParameters.organizationId;
        }

        if (requestParameters.companyId !== undefined) {
            queryParameters['company_id'] = requestParameters.companyId;
        }

        if (requestParameters.isFavorite !== undefined) {
            queryParameters['is_favorite'] = requestParameters.isFavorite;
        }

        if (requestParameters.selectionStep) {
            queryParameters['selection_step'] = requestParameters.selectionStep;
        }

        if (requestParameters.startsAt !== undefined) {
            queryParameters['starts_at'] = requestParameters.startsAt;
        }

        if (requestParameters.graduationYearFrom !== undefined) {
            queryParameters['graduation_year_from'] = requestParameters.graduationYearFrom;
        }

        if (requestParameters.graduationYearTo !== undefined) {
            queryParameters['graduation_year_to'] = requestParameters.graduationYearTo;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/selections`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SelectionListOutFromJSON(jsonValue));
    }

    /**
     * 選考管理一覧取得 - 必要権限: [SELECTION | PORTFOLIO_PERSONAL_INFORMATION_VIEW | RECRUITMENT] - 並び順: 選考ID降順 - 444スタッフ： 企業名検索ができる & 件数取得 - 企業ユーザー: 自分が所属する企業IDで絞り込み & 企業名検索ができない ＆ 件数取得 - 取得条件     - Job.is_deleted=False     - Job.is_published=True - 項目取得条件     - 本名/年齢         - PORTFOLIO_PERSONAL_INFORMATION_VIEW         - RECRUITMENT & 対象ユーザー人材紹介規約同意済み         - SELECTION & 選考タイプ：スカウト & スカウト承諾済み(応募中以降の選考中ステップあり)         - SELECTION & 選考タイプ：自己応募 & 選考受理済み(書類選考以降の選考中ステップあり)     - 条件を満たさない場合はNoneにする(非表示) - 検索条件     - UserID     - 求人ID     - 選考ステップ - 絞り込み条件     - お気に入り     - 企業ID     - 選考ステップ     - 選考開始年     - 卒業年度
     * 選考管理一覧取得
     */
    async getSelectionList(requestParameters: GetSelectionListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SelectionListOut> {
        const response = await this.getSelectionListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * お気に入り選考を更新 - 必要権限: [SELECTION] - is_favorite = Falseの場合、Trueへ更新 - is_favorite = Trueの場合、Falseへ更新
     * お気に入り選考を更新
     */
    async updateFavoriteSelectionRaw(requestParameters: UpdateFavoriteSelectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.jobSelectionId === null || requestParameters.jobSelectionId === undefined) {
            throw new runtime.RequiredError('jobSelectionId','Required parameter requestParameters.jobSelectionId was null or undefined when calling updateFavoriteSelection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/selections/{job_selection_id}/favorites`.replace(`{${"job_selection_id"}}`, encodeURIComponent(String(requestParameters.jobSelectionId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * お気に入り選考を更新 - 必要権限: [SELECTION] - is_favorite = Falseの場合、Trueへ更新 - is_favorite = Trueの場合、Falseへ更新
     * お気に入り選考を更新
     */
    async updateFavoriteSelection(requestParameters: UpdateFavoriteSelectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateFavoriteSelectionRaw(requestParameters, initOverrides);
    }

    /**
     * 選考ステップを更新 - 必要権限: [SELECTION] - 更新条件     - Job.is_deleted=False     - Job.is_published=True     - selection_stepが終了以外     - 選考開始日から365日以内     - status(選考ステップ)が選考終了区分のステップに変更された際に、直前のstatusの値をfinished_status(選考終了時のステップ)に格納する     - 求人選考タイプ(JobSelectionType)毎の選考管理         - 共通             - スタッフは選考ステータスを制限なく編集できる。             - ユーザーから辞退の操作ができるのはスカウト承認待ちの際のみ。         - エージェント経由 AGENT             - 人材紹介プラン契約中の企業が選択できる選考種別。             - 選考ステータスの管理はスタッフが行う。             - 企業は選考ステータスを編集できない。         - 自社選考 DIRECT             - スカウトプラン契約中の企業が選択できる選考種別。             - 選考ステータスの管理は企業が行う。             - 企業は選考ステータスを前ステップへ戻せない。                 - 現在の選考ステップ(SelectionStep)より小さい選考ステップへ更新できない
     * 選考ステップを更新
     */
    async updateSelectionRaw(requestParameters: UpdateSelectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.jobSelectionId === null || requestParameters.jobSelectionId === undefined) {
            throw new runtime.RequiredError('jobSelectionId','Required parameter requestParameters.jobSelectionId was null or undefined when calling updateSelection.');
        }

        if (requestParameters.selectionStepUpdateIn === null || requestParameters.selectionStepUpdateIn === undefined) {
            throw new runtime.RequiredError('selectionStepUpdateIn','Required parameter requestParameters.selectionStepUpdateIn was null or undefined when calling updateSelection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/selections/{job_selection_id}/steps`.replace(`{${"job_selection_id"}}`, encodeURIComponent(String(requestParameters.jobSelectionId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SelectionStepUpdateInToJSON(requestParameters.selectionStepUpdateIn),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * 選考ステップを更新 - 必要権限: [SELECTION] - 更新条件     - Job.is_deleted=False     - Job.is_published=True     - selection_stepが終了以外     - 選考開始日から365日以内     - status(選考ステップ)が選考終了区分のステップに変更された際に、直前のstatusの値をfinished_status(選考終了時のステップ)に格納する     - 求人選考タイプ(JobSelectionType)毎の選考管理         - 共通             - スタッフは選考ステータスを制限なく編集できる。             - ユーザーから辞退の操作ができるのはスカウト承認待ちの際のみ。         - エージェント経由 AGENT             - 人材紹介プラン契約中の企業が選択できる選考種別。             - 選考ステータスの管理はスタッフが行う。             - 企業は選考ステータスを編集できない。         - 自社選考 DIRECT             - スカウトプラン契約中の企業が選択できる選考種別。             - 選考ステータスの管理は企業が行う。             - 企業は選考ステータスを前ステップへ戻せない。                 - 現在の選考ステップ(SelectionStep)より小さい選考ステップへ更新できない
     * 選考ステップを更新
     */
    async updateSelection(requestParameters: UpdateSelectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updateSelectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 選考予定日を更新 - 必要権限: [SELECTION] - 更新条件     - Job.is_deleted=False     - Job.is_published=True     - selection_stepが終了以外     - 選考開始日から365日以内
     * 選考予定日を更新
     */
    async updateSelectionDatetimeRaw(requestParameters: UpdateSelectionDatetimeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.jobSelectionId === null || requestParameters.jobSelectionId === undefined) {
            throw new runtime.RequiredError('jobSelectionId','Required parameter requestParameters.jobSelectionId was null or undefined when calling updateSelectionDatetime.');
        }

        if (requestParameters.selectionDateTimeUpdateIn === null || requestParameters.selectionDateTimeUpdateIn === undefined) {
            throw new runtime.RequiredError('selectionDateTimeUpdateIn','Required parameter requestParameters.selectionDateTimeUpdateIn was null or undefined when calling updateSelectionDatetime.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/selections/{job_selection_id}/datetime`.replace(`{${"job_selection_id"}}`, encodeURIComponent(String(requestParameters.jobSelectionId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SelectionDateTimeUpdateInToJSON(requestParameters.selectionDateTimeUpdateIn),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * 選考予定日を更新 - 必要権限: [SELECTION] - 更新条件     - Job.is_deleted=False     - Job.is_published=True     - selection_stepが終了以外     - 選考開始日から365日以内
     * 選考予定日を更新
     */
    async updateSelectionDatetime(requestParameters: UpdateSelectionDatetimeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updateSelectionDatetimeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 選考メモ更新 - 必要権限: [SELECTION] - 更新条件     - Job.is_deleted=False     - Job.is_published=True
     * 選考メモ更新
     */
    async updateSelectionMemoRaw(requestParameters: UpdateSelectionMemoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.jobSelectionId === null || requestParameters.jobSelectionId === undefined) {
            throw new runtime.RequiredError('jobSelectionId','Required parameter requestParameters.jobSelectionId was null or undefined when calling updateSelectionMemo.');
        }

        if (requestParameters.selectionMemoUpdateIn === null || requestParameters.selectionMemoUpdateIn === undefined) {
            throw new runtime.RequiredError('selectionMemoUpdateIn','Required parameter requestParameters.selectionMemoUpdateIn was null or undefined when calling updateSelectionMemo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/selections/{job_selection_id}/memo`.replace(`{${"job_selection_id"}}`, encodeURIComponent(String(requestParameters.jobSelectionId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SelectionMemoUpdateInToJSON(requestParameters.selectionMemoUpdateIn),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * 選考メモ更新 - 必要権限: [SELECTION] - 更新条件     - Job.is_deleted=False     - Job.is_published=True
     * 選考メモ更新
     */
    async updateSelectionMemo(requestParameters: UpdateSelectionMemoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updateSelectionMemoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
