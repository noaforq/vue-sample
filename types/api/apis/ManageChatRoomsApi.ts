/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  ManageChatFileListOut,
  ManageChatListDetailOut,
  ManageChatListOut,
  ManageChatRoomCreateIn,
  ManageChatRoomCreateOut,
  ManageChatRoomListOut,
  ManageChatSendIn,
  ValidationError,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    ManageChatFileListOutFromJSON,
    ManageChatFileListOutToJSON,
    ManageChatListDetailOutFromJSON,
    ManageChatListDetailOutToJSON,
    ManageChatListOutFromJSON,
    ManageChatListOutToJSON,
    ManageChatRoomCreateInFromJSON,
    ManageChatRoomCreateInToJSON,
    ManageChatRoomCreateOutFromJSON,
    ManageChatRoomCreateOutToJSON,
    ManageChatRoomListOutFromJSON,
    ManageChatRoomListOutToJSON,
    ManageChatSendInFromJSON,
    ManageChatSendInToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface CreateManageChatRoomRequest {
    manageChatRoomCreateIn: ManageChatRoomCreateIn;
}

export interface DeleteManageChatFileRequest {
    chatRoomId: number;
    chatId: number;
}

export interface GetManageChatFileListRequest {
    chatRoomId: number;
}

export interface GetManageChatListRequest {
    chatRoomId: number;
}

export interface GetManageChatRoomListRequest {
    roomName?: string;
    limit?: number;
    offset?: number;
}

export interface ReadManageChatRequest {
    chatRoomId: number;
}

export interface SendManageChatRequest {
    chatRoomId: number;
    manageChatSendIn: ManageChatSendIn;
}

/**
 * 
 */
export class ManageChatRoomsApi extends runtime.BaseAPI {

    /**
     * 管理者チャットルーム作成 - 必要権限: [CHAT] - 登録時データ補足情報     - organization_id: 自組織に設定する     - host_user_id: 学校の場合のみ自身をホストユーザーにする     - general_user_id: リクエストのuser_idに設定する     - last_send_time: 現在時刻を設定する     - show_real_name: 学校の場合のみTrue     - chat_room_type: 企業: `COMPANY`, 学校: `SCHOOL`, エージェント(444): `AGENT` に設定する - 同じホストとユーザーのチャットルームが存在する場合は登録処理は行わず、レスポンスのみ行う
     * 管理者チャットルーム作成
     */
    async createManageChatRoomRaw(requestParameters: CreateManageChatRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManageChatRoomCreateOut>> {
        if (requestParameters.manageChatRoomCreateIn === null || requestParameters.manageChatRoomCreateIn === undefined) {
            throw new runtime.RequiredError('manageChatRoomCreateIn','Required parameter requestParameters.manageChatRoomCreateIn was null or undefined when calling createManageChatRoom.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/chat-rooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ManageChatRoomCreateInToJSON(requestParameters.manageChatRoomCreateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManageChatRoomCreateOutFromJSON(jsonValue));
    }

    /**
     * 管理者チャットルーム作成 - 必要権限: [CHAT] - 登録時データ補足情報     - organization_id: 自組織に設定する     - host_user_id: 学校の場合のみ自身をホストユーザーにする     - general_user_id: リクエストのuser_idに設定する     - last_send_time: 現在時刻を設定する     - show_real_name: 学校の場合のみTrue     - chat_room_type: 企業: `COMPANY`, 学校: `SCHOOL`, エージェント(444): `AGENT` に設定する - 同じホストとユーザーのチャットルームが存在する場合は登録処理は行わず、レスポンスのみ行う
     * 管理者チャットルーム作成
     */
    async createManageChatRoom(requestParameters: CreateManageChatRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManageChatRoomCreateOut> {
        const response = await this.createManageChatRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 管理者チャットファイル削除 - 必要権限: [CHAT] - 取得条件     - 企業 or エージェント(444)の場合: 自社が参加しているチャットルームのみ取得可能     - 学校の場合: 自身(先生)の参加しているチャットルームのみ取得可能     - is_deleted: False     - expires_at: 現在日時以上 - is_deleted=Trueに変更する - cloud storageのファイルを削除する
     * 管理者チャットファイル削除
     */
    async deleteManageChatFileRaw(requestParameters: DeleteManageChatFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.chatRoomId === null || requestParameters.chatRoomId === undefined) {
            throw new runtime.RequiredError('chatRoomId','Required parameter requestParameters.chatRoomId was null or undefined when calling deleteManageChatFile.');
        }

        if (requestParameters.chatId === null || requestParameters.chatId === undefined) {
            throw new runtime.RequiredError('chatId','Required parameter requestParameters.chatId was null or undefined when calling deleteManageChatFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/chat-rooms/{chat_room_id}/files/{chat_id}`.replace(`{${"chat_room_id"}}`, encodeURIComponent(String(requestParameters.chatRoomId))).replace(`{${"chat_id"}}`, encodeURIComponent(String(requestParameters.chatId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 管理者チャットファイル削除 - 必要権限: [CHAT] - 取得条件     - 企業 or エージェント(444)の場合: 自社が参加しているチャットルームのみ取得可能     - 学校の場合: 自身(先生)の参加しているチャットルームのみ取得可能     - is_deleted: False     - expires_at: 現在日時以上 - is_deleted=Trueに変更する - cloud storageのファイルを削除する
     * 管理者チャットファイル削除
     */
    async deleteManageChatFile(requestParameters: DeleteManageChatFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteManageChatFileRaw(requestParameters, initOverrides);
    }

    /**
     * 管理者チャットファイル一覧取得 - 必要権限: [CHAT] - 並び順: id昇順 - 取得条件     - 企業 or エージェント(444)の場合: 自社が参加しているチャットルームのみ取得可能     - 学校の場合: 自身(先生)の参加しているチャットルームのみ取得可能     - is_deleted: False     - expires_at: 現在日時以上 - レスポンス補足情報     - sender: チャット送信者の本名(full_name)、相手が一般ユーザーで本名表示フラグがFalseの場合はアカウント名(username)を表示     - icon: 送信者のユーザーアイコン
     * 管理者チャットファイル一覧取得
     */
    async getManageChatFileListRaw(requestParameters: GetManageChatFileListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ManageChatFileListOut>>> {
        if (requestParameters.chatRoomId === null || requestParameters.chatRoomId === undefined) {
            throw new runtime.RequiredError('chatRoomId','Required parameter requestParameters.chatRoomId was null or undefined when calling getManageChatFileList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/chat-rooms/{chat_room_id}/files`.replace(`{${"chat_room_id"}}`, encodeURIComponent(String(requestParameters.chatRoomId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ManageChatFileListOutFromJSON));
    }

    /**
     * 管理者チャットファイル一覧取得 - 必要権限: [CHAT] - 並び順: id昇順 - 取得条件     - 企業 or エージェント(444)の場合: 自社が参加しているチャットルームのみ取得可能     - 学校の場合: 自身(先生)の参加しているチャットルームのみ取得可能     - is_deleted: False     - expires_at: 現在日時以上 - レスポンス補足情報     - sender: チャット送信者の本名(full_name)、相手が一般ユーザーで本名表示フラグがFalseの場合はアカウント名(username)を表示     - icon: 送信者のユーザーアイコン
     * 管理者チャットファイル一覧取得
     */
    async getManageChatFileList(requestParameters: GetManageChatFileListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ManageChatFileListOut>> {
        const response = await this.getManageChatFileListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 管理者チャット一覧取得 - 必要権限: [CHAT] - 並び順: id昇順 - ユーザー別取得可能条件     - 企業 or エージェント(444): 自社が参加しているチャットルームのみ取得可能     - 学校: 自身(先生)の参加しているチャットルームのみ取得可能 - レスポンス項目     - icon: ユーザーのicon     - room_name: ユーザーのアカウント名(username)     - sub_room_name: 本名表示フラグがTrueの場合、ユーザーの本名を表示     - chats         - file.is_expired: 有効期限切れ、もしくはis_deletedがTrueの場合True、それ以外はFalse         - is_own: 自身のチャットの場合True         - is_read: 一般ユーザーが自身のチャットを既読の場合True         - sender: チャット送信者の本名(full_name)、相手が一般ユーザーで本名表示フラグがFalseの場合はアカウント名(username)を表示         - icon: チャット送信者のユーザーアイコンURL
     * 管理者チャット一覧取得
     */
    async getManageChatListRaw(requestParameters: GetManageChatListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManageChatListOut>> {
        if (requestParameters.chatRoomId === null || requestParameters.chatRoomId === undefined) {
            throw new runtime.RequiredError('chatRoomId','Required parameter requestParameters.chatRoomId was null or undefined when calling getManageChatList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/chat-rooms/{chat_room_id}/chats`.replace(`{${"chat_room_id"}}`, encodeURIComponent(String(requestParameters.chatRoomId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManageChatListOutFromJSON(jsonValue));
    }

    /**
     * 管理者チャット一覧取得 - 必要権限: [CHAT] - 並び順: id昇順 - ユーザー別取得可能条件     - 企業 or エージェント(444): 自社が参加しているチャットルームのみ取得可能     - 学校: 自身(先生)の参加しているチャットルームのみ取得可能 - レスポンス項目     - icon: ユーザーのicon     - room_name: ユーザーのアカウント名(username)     - sub_room_name: 本名表示フラグがTrueの場合、ユーザーの本名を表示     - chats         - file.is_expired: 有効期限切れ、もしくはis_deletedがTrueの場合True、それ以外はFalse         - is_own: 自身のチャットの場合True         - is_read: 一般ユーザーが自身のチャットを既読の場合True         - sender: チャット送信者の本名(full_name)、相手が一般ユーザーで本名表示フラグがFalseの場合はアカウント名(username)を表示         - icon: チャット送信者のユーザーアイコンURL
     * 管理者チャット一覧取得
     */
    async getManageChatList(requestParameters: GetManageChatListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManageChatListOut> {
        const response = await this.getManageChatListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 管理者チャットルーム一覧取得 - 必要権限: [CHAT] - 並び順: 最終送信日時の降順 - ユーザー別表示内容     - 企業 or エージェント(444): 自社が参加しているチャットルーム一覧を表示     - 学校: 自身(先生)の参加しているチャットルーム一覧を表示 - レスポンス補足情報     - icon: ユーザーのicon     - room_name: 一般ユーザーのusername     - sub_room_name: `show_real_name=True`の場合ユーザーの本名を表示     - chat_partner_type: `ユーザー`固定     - unread_count: 一般ユーザーチャットの未読数(ログインユーザーごとに計算)     - is_deleted_account: 一般ユーザーが退会済み(is_deleted=True)の場合True     - is_scout_refusal_account: 一般ユーザーがスカウト拒否(receive_scouts=False)の場合True
     * 管理者チャットルーム一覧取得
     */
    async getManageChatRoomListRaw(requestParameters: GetManageChatRoomListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManageChatRoomListOut>> {
        const queryParameters: any = {};

        if (requestParameters.roomName !== undefined) {
            queryParameters['room_name'] = requestParameters.roomName;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/chat-rooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManageChatRoomListOutFromJSON(jsonValue));
    }

    /**
     * 管理者チャットルーム一覧取得 - 必要権限: [CHAT] - 並び順: 最終送信日時の降順 - ユーザー別表示内容     - 企業 or エージェント(444): 自社が参加しているチャットルーム一覧を表示     - 学校: 自身(先生)の参加しているチャットルーム一覧を表示 - レスポンス補足情報     - icon: ユーザーのicon     - room_name: 一般ユーザーのusername     - sub_room_name: `show_real_name=True`の場合ユーザーの本名を表示     - chat_partner_type: `ユーザー`固定     - unread_count: 一般ユーザーチャットの未読数(ログインユーザーごとに計算)     - is_deleted_account: 一般ユーザーが退会済み(is_deleted=True)の場合True     - is_scout_refusal_account: 一般ユーザーがスカウト拒否(receive_scouts=False)の場合True
     * 管理者チャットルーム一覧取得
     */
    async getManageChatRoomList(requestParameters: GetManageChatRoomListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManageChatRoomListOut> {
        const response = await this.getManageChatRoomListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 管理者チャット既読 - 必要権限: [CHAT] - 既読可能条件     - 企業 or エージェント(444): 自社が参加しているチャットルームのみ     - 学校: 自身(先生)の参加しているチャットルームのみ - chat_roomが取得できない場合はNotFoundエラー - 指定されたチャットルームで、自身が未読のチャットを既読にする(ChatReadUserに登録する)
     * 管理者チャット既読
     */
    async readManageChatRaw(requestParameters: ReadManageChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.chatRoomId === null || requestParameters.chatRoomId === undefined) {
            throw new runtime.RequiredError('chatRoomId','Required parameter requestParameters.chatRoomId was null or undefined when calling readManageChat.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/chat-rooms/{chat_room_id}/read-chats`.replace(`{${"chat_room_id"}}`, encodeURIComponent(String(requestParameters.chatRoomId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 管理者チャット既読 - 必要権限: [CHAT] - 既読可能条件     - 企業 or エージェント(444): 自社が参加しているチャットルームのみ     - 学校: 自身(先生)の参加しているチャットルームのみ - chat_roomが取得できない場合はNotFoundエラー - 指定されたチャットルームで、自身が未読のチャットを既読にする(ChatReadUserに登録する)
     * 管理者チャット既読
     */
    async readManageChat(requestParameters: ReadManageChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.readManageChatRaw(requestParameters, initOverrides);
    }

    /**
     * 管理者チャット送信 - 必要権限: [CHAT] - サブチャットルーム名(本名)表示条件: 本名表示フラグがTrueの場合 - 送信可能条件     - 企業 or エージェント(444): 自社が参加しているチャットルームのみ     - 学校: 自身(先生)の参加しているチャットルームのみ - チャット送信後に送信先ユーザーに対して通知メールを送信する     - receive_emails=Falseの場合は送信しない - チャットファイルの場合は有効期限を7日間に設定する - レスポンス項目     - icon: ユーザーのicon     - room_name: ユーザーのアカウント名(username)     - sub_room_name: 本名表示フラグがTrueの場合、ユーザーの本名を表示     - chats         - is_expired: 有効期限切れ、もしくはis_deletedがTrueの場合True         - is_own: 自身のチャットの場合True         - is_read: 一般ユーザーが自身のチャットを既読の場合True         - sender: チャット送信者の本名(full_name)、相手が一般ユーザーで本名表示フラグがFalseの場合はアカウント名(username)を表示         - icon: チャット送信者のユーザーアイコンURL - 登録時データ補足情報     - ChatRoom.last_send_time: 現在時刻で更新
     * 管理者チャット送信
     */
    async sendManageChatRaw(requestParameters: SendManageChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManageChatListDetailOut>> {
        if (requestParameters.chatRoomId === null || requestParameters.chatRoomId === undefined) {
            throw new runtime.RequiredError('chatRoomId','Required parameter requestParameters.chatRoomId was null or undefined when calling sendManageChat.');
        }

        if (requestParameters.manageChatSendIn === null || requestParameters.manageChatSendIn === undefined) {
            throw new runtime.RequiredError('manageChatSendIn','Required parameter requestParameters.manageChatSendIn was null or undefined when calling sendManageChat.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/chat-rooms/{chat_room_id}/chats`.replace(`{${"chat_room_id"}}`, encodeURIComponent(String(requestParameters.chatRoomId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ManageChatSendInToJSON(requestParameters.manageChatSendIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManageChatListDetailOutFromJSON(jsonValue));
    }

    /**
     * 管理者チャット送信 - 必要権限: [CHAT] - サブチャットルーム名(本名)表示条件: 本名表示フラグがTrueの場合 - 送信可能条件     - 企業 or エージェント(444): 自社が参加しているチャットルームのみ     - 学校: 自身(先生)の参加しているチャットルームのみ - チャット送信後に送信先ユーザーに対して通知メールを送信する     - receive_emails=Falseの場合は送信しない - チャットファイルの場合は有効期限を7日間に設定する - レスポンス項目     - icon: ユーザーのicon     - room_name: ユーザーのアカウント名(username)     - sub_room_name: 本名表示フラグがTrueの場合、ユーザーの本名を表示     - chats         - is_expired: 有効期限切れ、もしくはis_deletedがTrueの場合True         - is_own: 自身のチャットの場合True         - is_read: 一般ユーザーが自身のチャットを既読の場合True         - sender: チャット送信者の本名(full_name)、相手が一般ユーザーで本名表示フラグがFalseの場合はアカウント名(username)を表示         - icon: チャット送信者のユーザーアイコンURL - 登録時データ補足情報     - ChatRoom.last_send_time: 現在時刻で更新
     * 管理者チャット送信
     */
    async sendManageChat(requestParameters: SendManageChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManageChatListDetailOut> {
        const response = await this.sendManageChatRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
