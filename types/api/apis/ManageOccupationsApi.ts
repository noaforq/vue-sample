/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  AppSchemasManageOccupationsOccupationDetailOutOccupationDetailOut,
  OccupationCreateIn,
  OccupationListOut,
  OccupationUpdateIn,
  ValidationError,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    AppSchemasManageOccupationsOccupationDetailOutOccupationDetailOutFromJSON,
    AppSchemasManageOccupationsOccupationDetailOutOccupationDetailOutToJSON,
    OccupationCreateInFromJSON,
    OccupationCreateInToJSON,
    OccupationListOutFromJSON,
    OccupationListOutToJSON,
    OccupationUpdateInFromJSON,
    OccupationUpdateInToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface CreateOccupationRequest {
    occupationCreateIn: OccupationCreateIn;
}

export interface DeleteOccupationRequest {
    occupationId: number;
}

export interface GetOccupationRequest {
    occupationId: number;
}

export interface UpdateOccupationRequest {
    occupationId: number;
    occupationUpdateIn: OccupationUpdateIn;
}

/**
 * 
 */
export class ManageOccupationsApi extends runtime.BaseAPI {

    /**
     * 職種を作成 - 必要権限: [ASSETS_EDIT]
     * 職種作成
     */
    async createOccupationRaw(requestParameters: CreateOccupationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSchemasManageOccupationsOccupationDetailOutOccupationDetailOut>> {
        if (requestParameters.occupationCreateIn === null || requestParameters.occupationCreateIn === undefined) {
            throw new runtime.RequiredError('occupationCreateIn','Required parameter requestParameters.occupationCreateIn was null or undefined when calling createOccupation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/occupations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OccupationCreateInToJSON(requestParameters.occupationCreateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppSchemasManageOccupationsOccupationDetailOutOccupationDetailOutFromJSON(jsonValue));
    }

    /**
     * 職種を作成 - 必要権限: [ASSETS_EDIT]
     * 職種作成
     */
    async createOccupation(requestParameters: CreateOccupationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSchemasManageOccupationsOccupationDetailOutOccupationDetailOut> {
        const response = await this.createOccupationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 職種を削除 - 必要権限: [ASSETS_EDIT]
     * 職種削除
     */
    async deleteOccupationRaw(requestParameters: DeleteOccupationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.occupationId === null || requestParameters.occupationId === undefined) {
            throw new runtime.RequiredError('occupationId','Required parameter requestParameters.occupationId was null or undefined when calling deleteOccupation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/occupations/{occupation_id}`.replace(`{${"occupation_id"}}`, encodeURIComponent(String(requestParameters.occupationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 職種を削除 - 必要権限: [ASSETS_EDIT]
     * 職種削除
     */
    async deleteOccupation(requestParameters: DeleteOccupationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteOccupationRaw(requestParameters, initOverrides);
    }

    /**
     * 職種詳細を取得 - 必要権限: [ASSETS_EDIT]
     * 職種詳細取得
     */
    async getOccupationRaw(requestParameters: GetOccupationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSchemasManageOccupationsOccupationDetailOutOccupationDetailOut>> {
        if (requestParameters.occupationId === null || requestParameters.occupationId === undefined) {
            throw new runtime.RequiredError('occupationId','Required parameter requestParameters.occupationId was null or undefined when calling getOccupation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/occupations/{occupation_id}`.replace(`{${"occupation_id"}}`, encodeURIComponent(String(requestParameters.occupationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppSchemasManageOccupationsOccupationDetailOutOccupationDetailOutFromJSON(jsonValue));
    }

    /**
     * 職種詳細を取得 - 必要権限: [ASSETS_EDIT]
     * 職種詳細取得
     */
    async getOccupation(requestParameters: GetOccupationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSchemasManageOccupationsOccupationDetailOutOccupationDetailOut> {
        const response = await this.getOccupationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 職種一覧を取得 - 必要権限: [ASSETS_EDIT] - 並び順: id降順
     * 職種一覧取得
     */
    async getOccupationListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OccupationListOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/occupations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OccupationListOutFromJSON));
    }

    /**
     * 職種一覧を取得 - 必要権限: [ASSETS_EDIT] - 並び順: id降順
     * 職種一覧取得
     */
    async getOccupationList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OccupationListOut>> {
        const response = await this.getOccupationListRaw(initOverrides);
        return await response.value();
    }

    /**
     * 職種を更新 - 必要権限: [ASSETS_EDIT]
     * 職種更新
     */
    async updateOccupationRaw(requestParameters: UpdateOccupationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSchemasManageOccupationsOccupationDetailOutOccupationDetailOut>> {
        if (requestParameters.occupationId === null || requestParameters.occupationId === undefined) {
            throw new runtime.RequiredError('occupationId','Required parameter requestParameters.occupationId was null or undefined when calling updateOccupation.');
        }

        if (requestParameters.occupationUpdateIn === null || requestParameters.occupationUpdateIn === undefined) {
            throw new runtime.RequiredError('occupationUpdateIn','Required parameter requestParameters.occupationUpdateIn was null or undefined when calling updateOccupation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/occupations/{occupation_id}`.replace(`{${"occupation_id"}}`, encodeURIComponent(String(requestParameters.occupationId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: OccupationUpdateInToJSON(requestParameters.occupationUpdateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppSchemasManageOccupationsOccupationDetailOutOccupationDetailOutFromJSON(jsonValue));
    }

    /**
     * 職種を更新 - 必要権限: [ASSETS_EDIT]
     * 職種更新
     */
    async updateOccupation(requestParameters: UpdateOccupationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSchemasManageOccupationsOccupationDetailOutOccupationDetailOut> {
        const response = await this.updateOccupationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
