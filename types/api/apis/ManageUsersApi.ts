/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  ForSuUserListOut,
  ForSuUserProfileOut,
  UpdateForSuUserProfileIn,
  UpdateForSuUserProfileOut,
  ValidationError,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    ForSuUserListOutFromJSON,
    ForSuUserListOutToJSON,
    ForSuUserProfileOutFromJSON,
    ForSuUserProfileOutToJSON,
    UpdateForSuUserProfileInFromJSON,
    UpdateForSuUserProfileInToJSON,
    UpdateForSuUserProfileOutFromJSON,
    UpdateForSuUserProfileOutToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface GetForSuUserListRequest {
    fuzzySearchName?: string;
}

export interface GetForSuUserProfileRequest {
    userId: number;
}

export interface UpdateForSuUserProfileRequest {
    userId: number;
    updateForSuUserProfileIn: UpdateForSuUserProfileIn;
}

/**
 * 
 */
export class ManageUsersApi extends runtime.BaseAPI {

    /**
     * SU用ユーザー一覧取得 - 必要権限: [Pm.USER_ACCOUNT_EDIT] - ユーザー一覧取得     - User.id_deleted == False     - User.user_type == UserType.GENERAL     - fuzzy_search_nameで以下を検索         - User.username         - User.user_common_info.display_name         - User.user_common_info.last_name         - User.user_common_info.first_name         - User.user_common_info.email - 並び順 User.id
     * SU用ユーザー一覧取得
     */
    async getForSuUserListRaw(requestParameters: GetForSuUserListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ForSuUserListOut>>> {
        const queryParameters: any = {};

        if (requestParameters.fuzzySearchName !== undefined) {
            queryParameters['fuzzy_search_name'] = requestParameters.fuzzySearchName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ForSuUserListOutFromJSON));
    }

    /**
     * SU用ユーザー一覧取得 - 必要権限: [Pm.USER_ACCOUNT_EDIT] - ユーザー一覧取得     - User.id_deleted == False     - User.user_type == UserType.GENERAL     - fuzzy_search_nameで以下を検索         - User.username         - User.user_common_info.display_name         - User.user_common_info.last_name         - User.user_common_info.first_name         - User.user_common_info.email - 並び順 User.id
     * SU用ユーザー一覧取得
     */
    async getForSuUserList(requestParameters: GetForSuUserListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ForSuUserListOut>> {
        const response = await this.getForSuUserListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * SU用ユーザープロフィール取得 - 必要権限: [Pm.USER_ACCOUNT_EDIT] - ユーザープロフィール取得     - is_delete == False,     - user_type == GENERAL,     - id == user_id - 取得できなければ NotFound
     * SU用ユーザプロフィール取得
     */
    async getForSuUserProfileRaw(requestParameters: GetForSuUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ForSuUserProfileOut>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getForSuUserProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/users/{user_id}/profile`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ForSuUserProfileOutFromJSON(jsonValue));
    }

    /**
     * SU用ユーザープロフィール取得 - 必要権限: [Pm.USER_ACCOUNT_EDIT] - ユーザープロフィール取得     - is_delete == False,     - user_type == GENERAL,     - id == user_id - 取得できなければ NotFound
     * SU用ユーザプロフィール取得
     */
    async getForSuUserProfile(requestParameters: GetForSuUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ForSuUserProfileOut> {
        const response = await this.getForSuUserProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * SU用ユーザープロフィール更新 - 必要権限: [Pm.USER_ACCOUNT_EDIT] - ユーザープロフィール更新     - is_delete == False,     - user_type == GENERAL,     - id == user_id - ユーザーが取得できなければ NotFound - データがない場合は作成(upsert) - 同じusernameを持つuserがいればusernameは変更しない     - 同じusernameを持つuserがいればhas_duplicate_usernameはtrue     - 名前を変更しない場合はhas_duplicate_usernameはfalse
     * SU用ユーザプロフィール更新
     */
    async updateForSuUserProfileRaw(requestParameters: UpdateForSuUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateForSuUserProfileOut>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling updateForSuUserProfile.');
        }

        if (requestParameters.updateForSuUserProfileIn === null || requestParameters.updateForSuUserProfileIn === undefined) {
            throw new runtime.RequiredError('updateForSuUserProfileIn','Required parameter requestParameters.updateForSuUserProfileIn was null or undefined when calling updateForSuUserProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/users/{user_id}/profile`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateForSuUserProfileInToJSON(requestParameters.updateForSuUserProfileIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateForSuUserProfileOutFromJSON(jsonValue));
    }

    /**
     * SU用ユーザープロフィール更新 - 必要権限: [Pm.USER_ACCOUNT_EDIT] - ユーザープロフィール更新     - is_delete == False,     - user_type == GENERAL,     - id == user_id - ユーザーが取得できなければ NotFound - データがない場合は作成(upsert) - 同じusernameを持つuserがいればusernameは変更しない     - 同じusernameを持つuserがいればhas_duplicate_usernameはtrue     - 名前を変更しない場合はhas_duplicate_usernameはfalse
     * SU用ユーザプロフィール更新
     */
    async updateForSuUserProfile(requestParameters: UpdateForSuUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateForSuUserProfileOut> {
        const response = await this.updateForSuUserProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
