/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  AuthTokenOut,
  MoodleLinkCheckIn,
  MoodleLinkCheckOut,
  PasswordResetEmailIn,
  ResetPasswordIn,
  RevokeRefreshTokenIn,
  ValidationError,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    AuthTokenOutFromJSON,
    AuthTokenOutToJSON,
    MoodleLinkCheckInFromJSON,
    MoodleLinkCheckInToJSON,
    MoodleLinkCheckOutFromJSON,
    MoodleLinkCheckOutToJSON,
    PasswordResetEmailInFromJSON,
    PasswordResetEmailInToJSON,
    ResetPasswordInFromJSON,
    ResetPasswordInToJSON,
    RevokeRefreshTokenInFromJSON,
    RevokeRefreshTokenInToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface GetDecryptedAuthTokenRequest {
    encryptedAuthToken: string;
}

export interface GetTokenRequest {
    username: string;
    password: string;
    grantType?: string;
    scope?: string;
    clientId?: string;
    clientSecret?: string;
}

export interface MoodleLinkCheckRequest {
    moodleLinkCheckIn: MoodleLinkCheckIn;
}

export interface MoodleLoginRequest {
    username: string;
    password: string;
    encryptedJson: string;
    grantType?: string;
    scope?: string;
    clientId?: string;
    clientSecret?: string;
}

export interface RefreshTokenRequest {
    refreshToken: string;
    grantType?: string;
    scope?: string;
}

export interface ResetPasswordRequest {
    resetPasswordIn: ResetPasswordIn;
}

export interface RevokeRefreshTokenRequest {
    revokeRefreshTokenIn: RevokeRefreshTokenIn;
}

export interface SendPasswordResetEmailRequest {
    passwordResetEmailIn: PasswordResetEmailIn;
}

/**
 * 
 */
export class CommonAuthApi extends runtime.BaseAPI {

    /**
     * 暗号化されたログイントークンを復号し取得 - 例外処理     - 復号できない場合 ParameterError     - 復号に成功したがそのdictがAuthTokenOutに変換できないなら ParameterError
     * ログイントークン復号
     */
    async getDecryptedAuthTokenRaw(requestParameters: GetDecryptedAuthTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthTokenOut>> {
        if (requestParameters.encryptedAuthToken === null || requestParameters.encryptedAuthToken === undefined) {
            throw new runtime.RequiredError('encryptedAuthToken','Required parameter requestParameters.encryptedAuthToken was null or undefined when calling getDecryptedAuthToken.');
        }

        const queryParameters: any = {};

        if (requestParameters.encryptedAuthToken !== undefined) {
            queryParameters['encrypted_auth_token'] = requestParameters.encryptedAuthToken;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/auth/moodle/decrypted-auth-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthTokenOutFromJSON(jsonValue));
    }

    /**
     * 暗号化されたログイントークンを復号し取得 - 例外処理     - 復号できない場合 ParameterError     - 復号に成功したがそのdictがAuthTokenOutに変換できないなら ParameterError
     * ログイントークン復号
     */
    async getDecryptedAuthToken(requestParameters: GetDecryptedAuthTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthTokenOut> {
        const response = await this.getDecryptedAuthTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * usernameとpasswordからトークンを取得
     * トークン取得
     */
    async getTokenRaw(requestParameters: GetTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthTokenOut>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling getToken.');
        }

        if (requestParameters.password === null || requestParameters.password === undefined) {
            throw new runtime.RequiredError('password','Required parameter requestParameters.password was null or undefined when calling getToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.grantType !== undefined) {
            formParams.append('grant_type', requestParameters.grantType as any);
        }

        if (requestParameters.username !== undefined) {
            formParams.append('username', requestParameters.username as any);
        }

        if (requestParameters.password !== undefined) {
            formParams.append('password', requestParameters.password as any);
        }

        if (requestParameters.scope !== undefined) {
            formParams.append('scope', requestParameters.scope as any);
        }

        if (requestParameters.clientId !== undefined) {
            formParams.append('client_id', requestParameters.clientId as any);
        }

        if (requestParameters.clientSecret !== undefined) {
            formParams.append('client_secret', requestParameters.clientSecret as any);
        }

        const response = await this.request({
            path: `/common/auth/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthTokenOutFromJSON(jsonValue));
    }

    /**
     * usernameとpasswordからトークンを取得
     * トークン取得
     */
    async getToken(requestParameters: GetTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthTokenOut> {
        const response = await this.getTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Moodle連携確認     - このAPIはフロントではなくMoodleが叩くcloud functionの関数が叩くAPIです Moodle連携を確認し、自動ログインが可能かを確認する     - 自動ログインとはusernameとpasswordを入力せずにログインできる機能のこと     - 下記の条件を満たした時自動ログイン可能とみなす         - moodle_link_check_in.moodle_usernameを持つMoodleUserが存在する         - そのMoodleUserと紐づいているSchoolDepartmentが任意のMoodleOauthInfoと紐づいている             - MoodleOauthInfo.client_id = moodle_link_check_in.client_id を満たしていなくてもいい         - MoodleUserを紐づくUserのis_deleted = False - 処理内容     - 自動ログイン可能か確認する     - 可能なら         - moodle_link_check_out.is_auto_login = True         - moodle_link_check_out.encryption_client_id
     * Moodle連携確認
     */
    async moodleLinkCheckRaw(requestParameters: MoodleLinkCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MoodleLinkCheckOut>> {
        if (requestParameters.moodleLinkCheckIn === null || requestParameters.moodleLinkCheckIn === undefined) {
            throw new runtime.RequiredError('moodleLinkCheckIn','Required parameter requestParameters.moodleLinkCheckIn was null or undefined when calling moodleLinkCheck.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/common/auth/moodle/check`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MoodleLinkCheckInToJSON(requestParameters.moodleLinkCheckIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MoodleLinkCheckOutFromJSON(jsonValue));
    }

    /**
     * Moodle連携確認     - このAPIはフロントではなくMoodleが叩くcloud functionの関数が叩くAPIです Moodle連携を確認し、自動ログインが可能かを確認する     - 自動ログインとはusernameとpasswordを入力せずにログインできる機能のこと     - 下記の条件を満たした時自動ログイン可能とみなす         - moodle_link_check_in.moodle_usernameを持つMoodleUserが存在する         - そのMoodleUserと紐づいているSchoolDepartmentが任意のMoodleOauthInfoと紐づいている             - MoodleOauthInfo.client_id = moodle_link_check_in.client_id を満たしていなくてもいい         - MoodleUserを紐づくUserのis_deleted = False - 処理内容     - 自動ログイン可能か確認する     - 可能なら         - moodle_link_check_out.is_auto_login = True         - moodle_link_check_out.encryption_client_id
     * Moodle連携確認
     */
    async moodleLinkCheck(requestParameters: MoodleLinkCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MoodleLinkCheckOut> {
        const response = await this.moodleLinkCheckRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * moodleログイン - 処理内容     - login_in.encrypted_jsonを復号しclient_idとmoodle_usernameを取得     - client_idを持つMoodleOauthInfoを取得     - auth_token_outを取得         - ここは get_token と 同じ処理     - usernameを持つuserを特定     - MoodleUserを作成 (既に作成されていれば作成しない)         - user_id = user.id         - school_department_id = moodle_oauth_info.school_department_id         - moodle_username = moodle_username - 例外処理     - MoodleOauthInfoが存在しなければ NotFound     - userが存在しなければ NotFound     - usernameかpasswordが間違っていれば IncorrectUsernameOrPassword     - decrypted_json が 復号できない or client_idまたはmoodle_usernameが取り出せなければ DuplicateError
     * moodleログイン
     */
    async moodleLoginRaw(requestParameters: MoodleLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthTokenOut>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling moodleLogin.');
        }

        if (requestParameters.password === null || requestParameters.password === undefined) {
            throw new runtime.RequiredError('password','Required parameter requestParameters.password was null or undefined when calling moodleLogin.');
        }

        if (requestParameters.encryptedJson === null || requestParameters.encryptedJson === undefined) {
            throw new runtime.RequiredError('encryptedJson','Required parameter requestParameters.encryptedJson was null or undefined when calling moodleLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.grantType !== undefined) {
            formParams.append('grant_type', requestParameters.grantType as any);
        }

        if (requestParameters.username !== undefined) {
            formParams.append('username', requestParameters.username as any);
        }

        if (requestParameters.password !== undefined) {
            formParams.append('password', requestParameters.password as any);
        }

        if (requestParameters.scope !== undefined) {
            formParams.append('scope', requestParameters.scope as any);
        }

        if (requestParameters.clientId !== undefined) {
            formParams.append('client_id', requestParameters.clientId as any);
        }

        if (requestParameters.clientSecret !== undefined) {
            formParams.append('client_secret', requestParameters.clientSecret as any);
        }

        if (requestParameters.encryptedJson !== undefined) {
            formParams.append('encrypted_json', requestParameters.encryptedJson as any);
        }

        const response = await this.request({
            path: `/common/auth/moodle/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthTokenOutFromJSON(jsonValue));
    }

    /**
     * moodleログイン - 処理内容     - login_in.encrypted_jsonを復号しclient_idとmoodle_usernameを取得     - client_idを持つMoodleOauthInfoを取得     - auth_token_outを取得         - ここは get_token と 同じ処理     - usernameを持つuserを特定     - MoodleUserを作成 (既に作成されていれば作成しない)         - user_id = user.id         - school_department_id = moodle_oauth_info.school_department_id         - moodle_username = moodle_username - 例外処理     - MoodleOauthInfoが存在しなければ NotFound     - userが存在しなければ NotFound     - usernameかpasswordが間違っていれば IncorrectUsernameOrPassword     - decrypted_json が 復号できない or client_idまたはmoodle_usernameが取り出せなければ DuplicateError
     * moodleログイン
     */
    async moodleLogin(requestParameters: MoodleLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthTokenOut> {
        const response = await this.moodleLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * リフレッシュトークンからトークンを取得
     * トークン再取得
     */
    async refreshTokenRaw(requestParameters: RefreshTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthTokenOut>> {
        if (requestParameters.refreshToken === null || requestParameters.refreshToken === undefined) {
            throw new runtime.RequiredError('refreshToken','Required parameter requestParameters.refreshToken was null or undefined when calling refreshToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.grantType !== undefined) {
            formParams.append('grant_type', requestParameters.grantType as any);
        }

        if (requestParameters.refreshToken !== undefined) {
            formParams.append('refresh_token', requestParameters.refreshToken as any);
        }

        if (requestParameters.scope !== undefined) {
            formParams.append('scope', requestParameters.scope as any);
        }

        const response = await this.request({
            path: `/common/auth/token/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthTokenOutFromJSON(jsonValue));
    }

    /**
     * リフレッシュトークンからトークンを取得
     * トークン再取得
     */
    async refreshToken(requestParameters: RefreshTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthTokenOut> {
        const response = await this.refreshTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * パスワードリセット - パスワードリセットトークンをデコードし、payloadを取得 - payloadからユーザーを特定 - DBに保持しているトークン情報を取得   - payloadのjtiと一致し、有効期限が過ぎていないもの - 使用したDBのトークン情報を削除 - 該当ユーザーのパスワードを新しいものに更新
     * パスワードリセット
     */
    async resetPasswordRaw(requestParameters: ResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.resetPasswordIn === null || requestParameters.resetPasswordIn === undefined) {
            throw new runtime.RequiredError('resetPasswordIn','Required parameter requestParameters.resetPasswordIn was null or undefined when calling resetPassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/common/auth/password/reset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetPasswordInToJSON(requestParameters.resetPasswordIn),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * パスワードリセット - パスワードリセットトークンをデコードし、payloadを取得 - payloadからユーザーを特定 - DBに保持しているトークン情報を取得   - payloadのjtiと一致し、有効期限が過ぎていないもの - 使用したDBのトークン情報を削除 - 該当ユーザーのパスワードを新しいものに更新
     * パスワードリセット
     */
    async resetPassword(requestParameters: ResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resetPasswordRaw(requestParameters, initOverrides);
    }

    /**
     * リフレッシュトークンを失効させる - ログアウト時に使用 - 無効なトークンを指定してもエラーは返さない
     * リフレッシュトークン失効
     */
    async revokeRefreshTokenRaw(requestParameters: RevokeRefreshTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.revokeRefreshTokenIn === null || requestParameters.revokeRefreshTokenIn === undefined) {
            throw new runtime.RequiredError('revokeRefreshTokenIn','Required parameter requestParameters.revokeRefreshTokenIn was null or undefined when calling revokeRefreshToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/common/auth/token/refresh/revoke`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RevokeRefreshTokenInToJSON(requestParameters.revokeRefreshTokenIn),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * リフレッシュトークンを失効させる - ログアウト時に使用 - 無効なトークンを指定してもエラーは返さない
     * リフレッシュトークン失効
     */
    async revokeRefreshToken(requestParameters: RevokeRefreshTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.revokeRefreshTokenRaw(requestParameters, initOverrides);
    }

    /**
     * 指定emailにパスワードリセット用email送信 - 指定のemailがユーザーの`email`または`sub_email`と一致するユーザーを取得     - 該当するユーザーがいない場合はメール送信せずに成功レスポンスを返す - すべての該当ユーザーに対して以下の処理を行う - ユーザーに紐づくトークンをすべて削除 - パスワードリセットトークンを生成し、ユーザートークンとしてDBに保存 - 指定されたemailに対してメール送信     - メール本文にtokenを付与したパスワード変更のURLとusernameを含む
     * パスワードリセット用email送信
     */
    async sendPasswordResetEmailRaw(requestParameters: SendPasswordResetEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.passwordResetEmailIn === null || requestParameters.passwordResetEmailIn === undefined) {
            throw new runtime.RequiredError('passwordResetEmailIn','Required parameter requestParameters.passwordResetEmailIn was null or undefined when calling sendPasswordResetEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/common/auth/password/reset/email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasswordResetEmailInToJSON(requestParameters.passwordResetEmailIn),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 指定emailにパスワードリセット用email送信 - 指定のemailがユーザーの`email`または`sub_email`と一致するユーザーを取得     - 該当するユーザーがいない場合はメール送信せずに成功レスポンスを返す - すべての該当ユーザーに対して以下の処理を行う - ユーザーに紐づくトークンをすべて削除 - パスワードリセットトークンを生成し、ユーザートークンとしてDBに保存 - 指定されたemailに対してメール送信     - メール本文にtokenを付与したパスワード変更のURLとusernameを含む
     * パスワードリセット用email送信
     */
    async sendPasswordResetEmail(requestParameters: SendPasswordResetEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sendPasswordResetEmailRaw(requestParameters, initOverrides);
    }

}
