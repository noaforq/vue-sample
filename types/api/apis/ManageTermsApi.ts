/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  TermDetailOut,
  TermListOut,
  TermType,
  TermUpdateIn,
  ValidationError,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    TermDetailOutFromJSON,
    TermDetailOutToJSON,
    TermListOutFromJSON,
    TermListOutToJSON,
    TermTypeFromJSON,
    TermTypeToJSON,
    TermUpdateInFromJSON,
    TermUpdateInToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface GetTermRequest {
    termType: TermType;
}

export interface UpdateTermRequest {
    termType: TermType;
    termUpdateIn: TermUpdateIn;
}

/**
 * 
 */
export class ManageTermsApi extends runtime.BaseAPI {

    /**
     * 規約詳細情報取得 - 必要権限: [ASSETS_EDIT] - 指定されたterm_typeの最新versionを取得する
     * 規約詳細情報取得
     */
    async getTermRaw(requestParameters: GetTermRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TermDetailOut>> {
        if (requestParameters.termType === null || requestParameters.termType === undefined) {
            throw new runtime.RequiredError('termType','Required parameter requestParameters.termType was null or undefined when calling getTerm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/terms/{term_type}`.replace(`{${"term_type"}}`, encodeURIComponent(String(requestParameters.termType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TermDetailOutFromJSON(jsonValue));
    }

    /**
     * 規約詳細情報取得 - 必要権限: [ASSETS_EDIT] - 指定されたterm_typeの最新versionを取得する
     * 規約詳細情報取得
     */
    async getTerm(requestParameters: GetTermRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TermDetailOut> {
        const response = await this.getTermRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 利用規約一覧取得 - 必要権限: [ASSETS_EDIT] - 並び順: term_type昇順 - term_type毎にversionが最新のもののみ取得
     * 利用規約一覧取得
     */
    async getTermListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TermListOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/terms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TermListOutFromJSON));
    }

    /**
     * 利用規約一覧取得 - 必要権限: [ASSETS_EDIT] - 並び順: term_type昇順 - term_type毎にversionが最新のもののみ取得
     * 利用規約一覧取得
     */
    async getTermList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TermListOut>> {
        const response = await this.getTermListRaw(initOverrides);
        return await response.value();
    }

    /**
     * 規約を更新 - 必要権限: [ASSETS_EDIT] - 既存レコードの更新ではなく、versionをインクリメントし新規レコードとして作成する
     * 利用規約更新
     */
    async updateTermRaw(requestParameters: UpdateTermRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TermDetailOut>> {
        if (requestParameters.termType === null || requestParameters.termType === undefined) {
            throw new runtime.RequiredError('termType','Required parameter requestParameters.termType was null or undefined when calling updateTerm.');
        }

        if (requestParameters.termUpdateIn === null || requestParameters.termUpdateIn === undefined) {
            throw new runtime.RequiredError('termUpdateIn','Required parameter requestParameters.termUpdateIn was null or undefined when calling updateTerm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/terms/{term_type}`.replace(`{${"term_type"}}`, encodeURIComponent(String(requestParameters.termType))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TermUpdateInToJSON(requestParameters.termUpdateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TermDetailOutFromJSON(jsonValue));
    }

    /**
     * 規約を更新 - 必要権限: [ASSETS_EDIT] - 既存レコードの更新ではなく、versionをインクリメントし新規レコードとして作成する
     * 利用規約更新
     */
    async updateTerm(requestParameters: UpdateTermRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TermDetailOut> {
        const response = await this.updateTermRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
