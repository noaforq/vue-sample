/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  InvitationSchoolUserIn,
  InvitationSchoolUserOut,
  MoodleLinkDetailOut,
  SchoolUserCreateIn,
  SchoolUserDetailOut,
  SchoolUserListOut,
  SchoolUserUpdateIn,
  UpdateSchoolUserProfileIn,
  UpdateSchoolUserProfileOut,
  ValidationError,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    InvitationSchoolUserInFromJSON,
    InvitationSchoolUserInToJSON,
    InvitationSchoolUserOutFromJSON,
    InvitationSchoolUserOutToJSON,
    MoodleLinkDetailOutFromJSON,
    MoodleLinkDetailOutToJSON,
    SchoolUserCreateInFromJSON,
    SchoolUserCreateInToJSON,
    SchoolUserDetailOutFromJSON,
    SchoolUserDetailOutToJSON,
    SchoolUserListOutFromJSON,
    SchoolUserListOutToJSON,
    SchoolUserUpdateInFromJSON,
    SchoolUserUpdateInToJSON,
    UpdateSchoolUserProfileInFromJSON,
    UpdateSchoolUserProfileInToJSON,
    UpdateSchoolUserProfileOutFromJSON,
    UpdateSchoolUserProfileOutToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface CreateMoodleLinkRequest {
    organizationId: number;
}

export interface CreateSchoolUserRequest {
    schoolUserCreateIn: SchoolUserCreateIn;
}

export interface DeleteMoodleLinkRequest {
    organizationId: number;
}

export interface DeleteSchoolUserRequest {
    userId: number;
}

export interface GetMoodleLinkDetailRequest {
    organizationId: number;
}

export interface GetSchoolUserRequest {
    userId: number;
}

export interface GetSchoolUserListRequest {
    organizationId?: number;
    isManage?: boolean;
    isTeacher?: boolean;
}

export interface InvitationSchoolUserRequest {
    invitationSchoolUserIn: InvitationSchoolUserIn;
}

export interface UpdateSchoolUserProfileRequest {
    userId: number;
    updateSchoolUserProfileIn: UpdateSchoolUserProfileIn;
}

export interface UpdateSchoolUsersRequest {
    schoolUserUpdateIn: SchoolUserUpdateIn;
}

/**
 * 
 */
export class ManageSchoolUsersApi extends runtime.BaseAPI {

    /**
     * Moodle連携登録 - 必要権限: [ALL_ADMIN_EDIT] - 実行処理     - MoodleOauthInfo作成         - client_key = \"S\" + str(school_department.id) + \"&\" + ランダムな12桁の文字列         - client_secret=ランダムな20桁の文字列             - 上記二つの処理は現TechFUL踏襲         - school_department_id=school_department.id         - created_by=user.username - 例外処理     - 学部が存在しなければ NotFound     - 学校が削除済みなら NotFound     - 指定されだ学部が既にMoodle連携済みなら AlreadyLinkedMoodle - 補足     - レスポンスのlinked_sourceは連携している学校名学部名
     * Moodle連携登録
     */
    async createMoodleLinkRaw(requestParameters: CreateMoodleLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MoodleLinkDetailOut>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling createMoodleLink.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/school-users/moodle/{organization_id}`.replace(`{${"organization_id"}}`, encodeURIComponent(String(requestParameters.organizationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MoodleLinkDetailOutFromJSON(jsonValue));
    }

    /**
     * Moodle連携登録 - 必要権限: [ALL_ADMIN_EDIT] - 実行処理     - MoodleOauthInfo作成         - client_key = \"S\" + str(school_department.id) + \"&\" + ランダムな12桁の文字列         - client_secret=ランダムな20桁の文字列             - 上記二つの処理は現TechFUL踏襲         - school_department_id=school_department.id         - created_by=user.username - 例外処理     - 学部が存在しなければ NotFound     - 学校が削除済みなら NotFound     - 指定されだ学部が既にMoodle連携済みなら AlreadyLinkedMoodle - 補足     - レスポンスのlinked_sourceは連携している学校名学部名
     * Moodle連携登録
     */
    async createMoodleLink(requestParameters: CreateMoodleLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MoodleLinkDetailOut> {
        const response = await this.createMoodleLinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 学校管理ユーザーを作成 - 必要権限: [ALL_ADMIN_EDIT, OWN_ADMIN_EDIT] - 登録データ補足情報     - organization_id: OrganizationType.SCHOOLの組織のみ設定可能     - user_type: UserType.SCHOOL     - password: ハッシュ化して登録     - created_by: ログインユーザーのlast_name + first_name
     * 学校管理ユーザー作成
     */
    async createSchoolUserRaw(requestParameters: CreateSchoolUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchoolUserDetailOut>> {
        if (requestParameters.schoolUserCreateIn === null || requestParameters.schoolUserCreateIn === undefined) {
            throw new runtime.RequiredError('schoolUserCreateIn','Required parameter requestParameters.schoolUserCreateIn was null or undefined when calling createSchoolUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/school-users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SchoolUserCreateInToJSON(requestParameters.schoolUserCreateIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchoolUserDetailOutFromJSON(jsonValue));
    }

    /**
     * 学校管理ユーザーを作成 - 必要権限: [ALL_ADMIN_EDIT, OWN_ADMIN_EDIT] - 登録データ補足情報     - organization_id: OrganizationType.SCHOOLの組織のみ設定可能     - user_type: UserType.SCHOOL     - password: ハッシュ化して登録     - created_by: ログインユーザーのlast_name + first_name
     * 学校管理ユーザー作成
     */
    async createSchoolUser(requestParameters: CreateSchoolUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchoolUserDetailOut> {
        const response = await this.createSchoolUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Moodle連携認証情報削除 - 必要権限: [ALL_ADMIN_EDIT] - MoodleOauthInfoが存在しなければNotFound
     * Moodle連携認証情報削除
     */
    async deleteMoodleLinkRaw(requestParameters: DeleteMoodleLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling deleteMoodleLink.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/school-users/moodle/{organization_id}`.replace(`{${"organization_id"}}`, encodeURIComponent(String(requestParameters.organizationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Moodle連携認証情報削除 - 必要権限: [ALL_ADMIN_EDIT] - MoodleOauthInfoが存在しなければNotFound
     * Moodle連携認証情報削除
     */
    async deleteMoodleLink(requestParameters: DeleteMoodleLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteMoodleLinkRaw(requestParameters, initOverrides);
    }

    /**
     * 学校管理ユーザ削除 - 必要権限: [ALL_ADMIN_EDIT, OWN_ADMIN_EDIT] - 論理削除 - 以下のデータのみ削除可能     - user_type: SCHOOL     - is_deleted: False
     * 学校管理ユーザ削除
     */
    async deleteSchoolUserRaw(requestParameters: DeleteSchoolUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteSchoolUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/school-users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 学校管理ユーザ削除 - 必要権限: [ALL_ADMIN_EDIT, OWN_ADMIN_EDIT] - 論理削除 - 以下のデータのみ削除可能     - user_type: SCHOOL     - is_deleted: False
     * 学校管理ユーザ削除
     */
    async deleteSchoolUser(requestParameters: DeleteSchoolUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSchoolUserRaw(requestParameters, initOverrides);
    }

    /**
     * Moodle連携認証情報取得 - 必要権限: [ALL_ADMIN_EDIT] - MoodleOauthInfoが存在しなければNotFound
     * Moodle連携認証情報取得
     */
    async getMoodleLinkDetailRaw(requestParameters: GetMoodleLinkDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MoodleLinkDetailOut>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling getMoodleLinkDetail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/school-users/moodle/{organization_id}`.replace(`{${"organization_id"}}`, encodeURIComponent(String(requestParameters.organizationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MoodleLinkDetailOutFromJSON(jsonValue));
    }

    /**
     * Moodle連携認証情報取得 - 必要権限: [ALL_ADMIN_EDIT] - MoodleOauthInfoが存在しなければNotFound
     * Moodle連携認証情報取得
     */
    async getMoodleLinkDetail(requestParameters: GetMoodleLinkDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MoodleLinkDetailOut> {
        const response = await this.getMoodleLinkDetailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 学校ユーザー詳細取得 - 必要権限: [ALL_ADMIN_VIEW, OWN_ADMIN_VIEW]
     * 学校ユーザー詳細取得
     */
    async getSchoolUserRaw(requestParameters: GetSchoolUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchoolUserDetailOut>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getSchoolUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/school-users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchoolUserDetailOutFromJSON(jsonValue));
    }

    /**
     * 学校ユーザー詳細取得 - 必要権限: [ALL_ADMIN_VIEW, OWN_ADMIN_VIEW]
     * 学校ユーザー詳細取得
     */
    async getSchoolUser(requestParameters: GetSchoolUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchoolUserDetailOut> {
        const response = await this.getSchoolUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 学校管理ユーザ一覧取得 - 必要権限: [ALL_ADMIN_VIEW, OWN_ADMIN_VIEW] - 並び順: id昇順 - 以下のデータのみ取得     - user_type: UserType.SCHOOL     - is_deleted: False
     * 学校管理ユーザ一覧取得
     */
    async getSchoolUserListRaw(requestParameters: GetSchoolUserListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SchoolUserListOut>>> {
        const queryParameters: any = {};

        if (requestParameters.organizationId !== undefined) {
            queryParameters['organization_id'] = requestParameters.organizationId;
        }

        if (requestParameters.isManage !== undefined) {
            queryParameters['is_manage'] = requestParameters.isManage;
        }

        if (requestParameters.isTeacher !== undefined) {
            queryParameters['is_teacher'] = requestParameters.isTeacher;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manage/school-users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SchoolUserListOutFromJSON));
    }

    /**
     * 学校管理ユーザ一覧取得 - 必要権限: [ALL_ADMIN_VIEW, OWN_ADMIN_VIEW] - 並び順: id昇順 - 以下のデータのみ取得     - user_type: UserType.SCHOOL     - is_deleted: False
     * 学校管理ユーザ一覧取得
     */
    async getSchoolUserList(requestParameters: GetSchoolUserListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SchoolUserListOut>> {
        const response = await this.getSchoolUserListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 学校ユーザー招待（アカウント追加） - 必要権限：[OWN_ADMIN_EDIT] - 処置内容     -　学校ユーザを作成         - username = user.organization.school_department.slug + \"-\" + \"1\"             - もし存在したら1ではなく2             - 現と同じ処理です         - password = ランダムな8桁の文字列             - 現と同じ処理です         - school_user_type = invitation_in.school_user_type         - email = invitation_in.email     - トークンを発行     - invitation_in.email宛てにpasswordとusernameを送信 - 例外処理     - 同じemailが既に使用されていたら AlreadyExistsEmail
     * 学校ユーザー招待（アカウント追加）
     */
    async invitationSchoolUserRaw(requestParameters: InvitationSchoolUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvitationSchoolUserOut>> {
        if (requestParameters.invitationSchoolUserIn === null || requestParameters.invitationSchoolUserIn === undefined) {
            throw new runtime.RequiredError('invitationSchoolUserIn','Required parameter requestParameters.invitationSchoolUserIn was null or undefined when calling invitationSchoolUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/school-users/send-invitation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InvitationSchoolUserInToJSON(requestParameters.invitationSchoolUserIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitationSchoolUserOutFromJSON(jsonValue));
    }

    /**
     * 学校ユーザー招待（アカウント追加） - 必要権限：[OWN_ADMIN_EDIT] - 処置内容     -　学校ユーザを作成         - username = user.organization.school_department.slug + \"-\" + \"1\"             - もし存在したら1ではなく2             - 現と同じ処理です         - password = ランダムな8桁の文字列             - 現と同じ処理です         - school_user_type = invitation_in.school_user_type         - email = invitation_in.email     - トークンを発行     - invitation_in.email宛てにpasswordとusernameを送信 - 例外処理     - 同じemailが既に使用されていたら AlreadyExistsEmail
     * 学校ユーザー招待（アカウント追加）
     */
    async invitationSchoolUser(requestParameters: InvitationSchoolUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvitationSchoolUserOut> {
        const response = await this.invitationSchoolUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * (先生,TA)ユーザープロフィール情報を更新する - 必要権限：[OWN_ADMIN_EDIT] - 処理内容     - user_id で特定した User の下記パラメータを変更する         - User.user_common_info.icon = profile_in.icon         - User.user_common_info.last_name = profile_in.last_name         - User.user_common_info.first_name = profile_in.first_name     - profile_inを返却 - 例外     - user_id を持つ User が存在しなければ NotFound
     * 学校管理ユーザプロフィール更新
     */
    async updateSchoolUserProfileRaw(requestParameters: UpdateSchoolUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateSchoolUserProfileOut>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling updateSchoolUserProfile.');
        }

        if (requestParameters.updateSchoolUserProfileIn === null || requestParameters.updateSchoolUserProfileIn === undefined) {
            throw new runtime.RequiredError('updateSchoolUserProfileIn','Required parameter requestParameters.updateSchoolUserProfileIn was null or undefined when calling updateSchoolUserProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/school-users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateSchoolUserProfileInToJSON(requestParameters.updateSchoolUserProfileIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateSchoolUserProfileOutFromJSON(jsonValue));
    }

    /**
     * (先生,TA)ユーザープロフィール情報を更新する - 必要権限：[OWN_ADMIN_EDIT] - 処理内容     - user_id で特定した User の下記パラメータを変更する         - User.user_common_info.icon = profile_in.icon         - User.user_common_info.last_name = profile_in.last_name         - User.user_common_info.first_name = profile_in.first_name     - profile_inを返却 - 例外     - user_id を持つ User が存在しなければ NotFound
     * 学校管理ユーザプロフィール更新
     */
    async updateSchoolUserProfile(requestParameters: UpdateSchoolUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateSchoolUserProfileOut> {
        const response = await this.updateSchoolUserProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 学校管理者権限変更(一括) - 必要権限: [ALL_ADMIN_EDIT], [OWN_ADMIN_EDIT]     - [OWN_ADMIN_EDIT]: 自組織のみ変更可能 - リクエスト     - organization_id     - user_list         - user_id         - school_user_type
     * 学校管理者権限変更
     */
    async updateSchoolUsersRaw(requestParameters: UpdateSchoolUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.schoolUserUpdateIn === null || requestParameters.schoolUserUpdateIn === undefined) {
            throw new runtime.RequiredError('schoolUserUpdateIn','Required parameter requestParameters.schoolUserUpdateIn was null or undefined when calling updateSchoolUsers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manage/school-users`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SchoolUserUpdateInToJSON(requestParameters.schoolUserUpdateIn),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * 学校管理者権限変更(一括) - 必要権限: [ALL_ADMIN_EDIT], [OWN_ADMIN_EDIT]     - [OWN_ADMIN_EDIT]: 自組織のみ変更可能 - リクエスト     - organization_id     - user_list         - user_id         - school_user_type
     * 学校管理者権限変更
     */
    async updateSchoolUsers(requestParameters: UpdateSchoolUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updateSchoolUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
