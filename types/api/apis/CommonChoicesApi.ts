/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AnnualIncomeChoicesOut,
  CompanyChoicesOut,
  CompanyDocumentTypeChoicesOut,
  CompanyPlanStatusChoicesOut,
  CompanyPlanStatusNoTrialChoicesOut,
  CompanyScaleChoicesOut,
  ContentCategoryChoicesOut,
  ContentCategoryTypeChoicesOut,
  ContentDivisionChoicesOut,
  ContentPackageLevelChoicesOut,
  ContentTopicChoicesOut,
  CountryChoicesOut,
  CurrentJobChoicesOut,
  EducationalMaterialTypeChoicesOut,
  EmploymentManagementStatusItemChoicesOut,
  EmploymentStatusChoicesOut,
  EnglishLevelChoicesOut,
  EventPurposeChoicesOut,
  FaqCategoryChoicesOut,
  FaqTargetChoicesOut,
  FrameworkChoicesOut,
  IndustryChoicesOut,
  IndustryGroupChoicesOut,
  InformationTargetChoicesOut,
  IntentionalityChoicesOut,
  JobChangingStatusChoicesOut,
  JobDraftStatusChoicesOut,
  JobFeatureCategoryChoicesOut,
  JobFeatureChoicesOut,
  JobHuntingStatusChoicesOut,
  JobHuntingTypeChoicesOut,
  JobSelectionTypeChoicesOut,
  JudgeStatusChoicesOut,
  Locale,
  OccupationChoicesOut,
  PassiveSmokingInitiativeChoicesOut,
  PgLangChoicesOut,
  PhoneNumberTypeChoicesOut,
  PrefectureChoicesOut,
  ProbationChoicesOut,
  QuestionTypeChoicesOut,
  RecruitmentAndHiringStatusItemChoicesOut,
  SalarySystemChoicesOut,
  SchoolTypeChoicesOut,
  SchoolUserTypeChoicesOut,
  SelectionStepChoicesOut,
  SelectionTypeChoicesOut,
  SkillChoicesOut,
  SkillLevelChoicesOut,
  TermTypeChoicesOut,
  ValidationError,
  VocationalAbilityStatusItemChoicesOut,
} from '../models/index';
import {
    AnnualIncomeChoicesOutFromJSON,
    AnnualIncomeChoicesOutToJSON,
    CompanyChoicesOutFromJSON,
    CompanyChoicesOutToJSON,
    CompanyDocumentTypeChoicesOutFromJSON,
    CompanyDocumentTypeChoicesOutToJSON,
    CompanyPlanStatusChoicesOutFromJSON,
    CompanyPlanStatusChoicesOutToJSON,
    CompanyPlanStatusNoTrialChoicesOutFromJSON,
    CompanyPlanStatusNoTrialChoicesOutToJSON,
    CompanyScaleChoicesOutFromJSON,
    CompanyScaleChoicesOutToJSON,
    ContentCategoryChoicesOutFromJSON,
    ContentCategoryChoicesOutToJSON,
    ContentCategoryTypeChoicesOutFromJSON,
    ContentCategoryTypeChoicesOutToJSON,
    ContentDivisionChoicesOutFromJSON,
    ContentDivisionChoicesOutToJSON,
    ContentPackageLevelChoicesOutFromJSON,
    ContentPackageLevelChoicesOutToJSON,
    ContentTopicChoicesOutFromJSON,
    ContentTopicChoicesOutToJSON,
    CountryChoicesOutFromJSON,
    CountryChoicesOutToJSON,
    CurrentJobChoicesOutFromJSON,
    CurrentJobChoicesOutToJSON,
    EducationalMaterialTypeChoicesOutFromJSON,
    EducationalMaterialTypeChoicesOutToJSON,
    EmploymentManagementStatusItemChoicesOutFromJSON,
    EmploymentManagementStatusItemChoicesOutToJSON,
    EmploymentStatusChoicesOutFromJSON,
    EmploymentStatusChoicesOutToJSON,
    EnglishLevelChoicesOutFromJSON,
    EnglishLevelChoicesOutToJSON,
    EventPurposeChoicesOutFromJSON,
    EventPurposeChoicesOutToJSON,
    FaqCategoryChoicesOutFromJSON,
    FaqCategoryChoicesOutToJSON,
    FaqTargetChoicesOutFromJSON,
    FaqTargetChoicesOutToJSON,
    FrameworkChoicesOutFromJSON,
    FrameworkChoicesOutToJSON,
    IndustryChoicesOutFromJSON,
    IndustryChoicesOutToJSON,
    IndustryGroupChoicesOutFromJSON,
    IndustryGroupChoicesOutToJSON,
    InformationTargetChoicesOutFromJSON,
    InformationTargetChoicesOutToJSON,
    IntentionalityChoicesOutFromJSON,
    IntentionalityChoicesOutToJSON,
    JobChangingStatusChoicesOutFromJSON,
    JobChangingStatusChoicesOutToJSON,
    JobDraftStatusChoicesOutFromJSON,
    JobDraftStatusChoicesOutToJSON,
    JobFeatureCategoryChoicesOutFromJSON,
    JobFeatureCategoryChoicesOutToJSON,
    JobFeatureChoicesOutFromJSON,
    JobFeatureChoicesOutToJSON,
    JobHuntingStatusChoicesOutFromJSON,
    JobHuntingStatusChoicesOutToJSON,
    JobHuntingTypeChoicesOutFromJSON,
    JobHuntingTypeChoicesOutToJSON,
    JobSelectionTypeChoicesOutFromJSON,
    JobSelectionTypeChoicesOutToJSON,
    JudgeStatusChoicesOutFromJSON,
    JudgeStatusChoicesOutToJSON,
    LocaleFromJSON,
    LocaleToJSON,
    OccupationChoicesOutFromJSON,
    OccupationChoicesOutToJSON,
    PassiveSmokingInitiativeChoicesOutFromJSON,
    PassiveSmokingInitiativeChoicesOutToJSON,
    PgLangChoicesOutFromJSON,
    PgLangChoicesOutToJSON,
    PhoneNumberTypeChoicesOutFromJSON,
    PhoneNumberTypeChoicesOutToJSON,
    PrefectureChoicesOutFromJSON,
    PrefectureChoicesOutToJSON,
    ProbationChoicesOutFromJSON,
    ProbationChoicesOutToJSON,
    QuestionTypeChoicesOutFromJSON,
    QuestionTypeChoicesOutToJSON,
    RecruitmentAndHiringStatusItemChoicesOutFromJSON,
    RecruitmentAndHiringStatusItemChoicesOutToJSON,
    SalarySystemChoicesOutFromJSON,
    SalarySystemChoicesOutToJSON,
    SchoolTypeChoicesOutFromJSON,
    SchoolTypeChoicesOutToJSON,
    SchoolUserTypeChoicesOutFromJSON,
    SchoolUserTypeChoicesOutToJSON,
    SelectionStepChoicesOutFromJSON,
    SelectionStepChoicesOutToJSON,
    SelectionTypeChoicesOutFromJSON,
    SelectionTypeChoicesOutToJSON,
    SkillChoicesOutFromJSON,
    SkillChoicesOutToJSON,
    SkillLevelChoicesOutFromJSON,
    SkillLevelChoicesOutToJSON,
    TermTypeChoicesOutFromJSON,
    TermTypeChoicesOutToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
    VocationalAbilityStatusItemChoicesOutFromJSON,
    VocationalAbilityStatusItemChoicesOutToJSON,
} from '../models/index';

export interface GetContentCategoryChoicesRequest {
    locale?: Locale;
}

export interface GetContentTopicChoicesRequest {
    locale?: Locale;
}

export interface GetJobFeatureChoicesRequest {
    isForFullTimeStaff?: boolean;
    isForNewGraduate?: boolean;
    isForPartTimeJob?: boolean;
    isForIntern?: boolean;
}

export interface GetJobSelectionTypeChoicesRequest {
    organizationId?: number;
}

export interface GetPgLangChoicesRequest {
    isSql?: boolean;
    useForBlankQuestion?: boolean;
    useForJudgementLang?: boolean;
}

/**
 * 
 */
export class CommonChoicesApi extends runtime.BaseAPI {

    /**
     * 年収一覧を取得 - 並び順: order昇順
     * 年収一覧を取得
     */
    async getAnnualIncomeChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AnnualIncomeChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/annual-incomes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AnnualIncomeChoicesOutFromJSON));
    }

    /**
     * 年収一覧を取得 - 並び順: order昇順
     * 年収一覧を取得
     */
    async getAnnualIncomeChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AnnualIncomeChoicesOut>> {
        const response = await this.getAnnualIncomeChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 企業一覧を取得 - 並び順: id昇順
     * 企業一覧を取得
     */
    async getCompanyChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CompanyChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/companies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CompanyChoicesOutFromJSON));
    }

    /**
     * 企業一覧を取得 - 並び順: id昇順
     * 企業一覧を取得
     */
    async getCompanyChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CompanyChoicesOut>> {
        const response = await this.getCompanyChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 企業情報資料タイプ一覧を取得 - Enumのデータを返却
     * 企業情報資料タイプ一覧取得
     */
    async getCompanyDocumentTypeChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CompanyDocumentTypeChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/company-document-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CompanyDocumentTypeChoicesOutFromJSON));
    }

    /**
     * 企業情報資料タイプ一覧を取得 - Enumのデータを返却
     * 企業情報資料タイプ一覧取得
     */
    async getCompanyDocumentTypeChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CompanyDocumentTypeChoicesOut>> {
        const response = await this.getCompanyDocumentTypeChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 企業プラン加入状況選択肢一覧 - Enumのデータを返却
     * 企業プラン加入状況選択肢一覧
     */
    async getCompanyPlanStatusChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CompanyPlanStatusChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/company-plan-status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CompanyPlanStatusChoicesOutFromJSON));
    }

    /**
     * 企業プラン加入状況選択肢一覧 - Enumのデータを返却
     * 企業プラン加入状況選択肢一覧
     */
    async getCompanyPlanStatusChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CompanyPlanStatusChoicesOut>> {
        const response = await this.getCompanyPlanStatusChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 企業プラン加入状況(トライアルなし)選択肢一覧 - Enumのデータを返却
     * 企業プラン加入状況(トライアルなし)選択肢一覧
     */
    async getCompanyPlanStatusNoTrialChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CompanyPlanStatusNoTrialChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/company-plan-status-no-trials`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CompanyPlanStatusNoTrialChoicesOutFromJSON));
    }

    /**
     * 企業プラン加入状況(トライアルなし)選択肢一覧 - Enumのデータを返却
     * 企業プラン加入状況(トライアルなし)選択肢一覧
     */
    async getCompanyPlanStatusNoTrialChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CompanyPlanStatusNoTrialChoicesOut>> {
        const response = await this.getCompanyPlanStatusNoTrialChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 企業規模一覧を取得 - 並び順: order昇順
     * 企業規模一覧を取得
     */
    async getCompanyScaleChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CompanyScaleChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/company-scales`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CompanyScaleChoicesOutFromJSON));
    }

    /**
     * 企業規模一覧を取得 - 並び順: order昇順
     * 企業規模一覧を取得
     */
    async getCompanyScaleChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CompanyScaleChoicesOut>> {
        const response = await this.getCompanyScaleChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * コンテンツカテゴリ選択肢一覧を取得 - 並び順: order昇順
     * コンテンツカテゴリ選択肢一覧取得
     */
    async getContentCategoryChoicesRaw(requestParameters: GetContentCategoryChoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ContentCategoryChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.locale !== undefined && requestParameters.locale !== null) {
            headerParameters['locale'] = String(requestParameters.locale);
        }

        const response = await this.request({
            path: `/common/choices/content-categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ContentCategoryChoicesOutFromJSON));
    }

    /**
     * コンテンツカテゴリ選択肢一覧を取得 - 並び順: order昇順
     * コンテンツカテゴリ選択肢一覧取得
     */
    async getContentCategoryChoices(requestParameters: GetContentCategoryChoicesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ContentCategoryChoicesOut>> {
        const response = await this.getContentCategoryChoicesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * コンテンツカテゴリタイプ一覧を取得 - Enumのデータを返却
     * コンテンツカテゴリタイプ一覧取得
     */
    async getContentCategoryTypeChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ContentCategoryTypeChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/content-category-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ContentCategoryTypeChoicesOutFromJSON));
    }

    /**
     * コンテンツカテゴリタイプ一覧を取得 - Enumのデータを返却
     * コンテンツカテゴリタイプ一覧取得
     */
    async getContentCategoryTypeChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ContentCategoryTypeChoicesOut>> {
        const response = await this.getContentCategoryTypeChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * コンテンツ区分選択肢一覧 - Enumのデータを返却
     * コンテンツ区分選択肢一覧
     */
    async getContentDivisionChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ContentDivisionChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/content-divisions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ContentDivisionChoicesOutFromJSON));
    }

    /**
     * コンテンツ区分選択肢一覧 - Enumのデータを返却
     * コンテンツ区分選択肢一覧
     */
    async getContentDivisionChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ContentDivisionChoicesOut>> {
        const response = await this.getContentDivisionChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * コンテンツパッケージレベル選択肢一覧 - Enumのデータを返却
     * コンテンツパッケージレベル選択肢一覧
     */
    async getContentPackageLevelChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ContentPackageLevelChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/content-package-levels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ContentPackageLevelChoicesOutFromJSON));
    }

    /**
     * コンテンツパッケージレベル選択肢一覧 - Enumのデータを返却
     * コンテンツパッケージレベル選択肢一覧
     */
    async getContentPackageLevelChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ContentPackageLevelChoicesOut>> {
        const response = await this.getContentPackageLevelChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * コンテンツトピック選択肢一覧を取得 - 並び順: order昇順
     * コンテンツトピック選択肢一覧取得
     */
    async getContentTopicChoicesRaw(requestParameters: GetContentTopicChoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ContentTopicChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.locale !== undefined && requestParameters.locale !== null) {
            headerParameters['locale'] = String(requestParameters.locale);
        }

        const response = await this.request({
            path: `/common/choices/content-topics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ContentTopicChoicesOutFromJSON));
    }

    /**
     * コンテンツトピック選択肢一覧を取得 - 並び順: order昇順
     * コンテンツトピック選択肢一覧取得
     */
    async getContentTopicChoices(requestParameters: GetContentTopicChoicesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ContentTopicChoicesOut>> {
        const response = await this.getContentTopicChoicesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 国選択肢一覧を取得 - 並び順: id昇順
     * 国選択肢一覧取得
     */
    async getCountryChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CountryChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/countries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CountryChoicesOutFromJSON));
    }

    /**
     * 国選択肢一覧を取得 - 並び順: id昇順
     * 国選択肢一覧取得
     */
    async getCountryChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CountryChoicesOut>> {
        const response = await this.getCountryChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 現在の職業 選択肢一覧を取得 - Enumのデータを返却
     * 現在の職業 選択肢一覧を取得
     */
    async getCurrentJobChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CurrentJobChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/current-jobs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CurrentJobChoicesOutFromJSON));
    }

    /**
     * 現在の職業 選択肢一覧を取得 - Enumのデータを返却
     * 現在の職業 選択肢一覧を取得
     */
    async getCurrentJobChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CurrentJobChoicesOut>> {
        const response = await this.getCurrentJobChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 教材タイプ選択肢一覧 - Enumのデータを返却
     * 教材タイプ選択肢一覧
     */
    async getEducationalMaterialTypeChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EducationalMaterialTypeChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/educational-material-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EducationalMaterialTypeChoicesOutFromJSON));
    }

    /**
     * 教材タイプ選択肢一覧 - Enumのデータを返却
     * 教材タイプ選択肢一覧
     */
    async getEducationalMaterialTypeChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EducationalMaterialTypeChoicesOut>> {
        const response = await this.getEducationalMaterialTypeChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 企業における雇用管理に関する状況一覧を取得 - Enumのデータを返却
     * 企業における雇用管理に関する状況一覧取得
     */
    async getEmploymentManagementStatusItemChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EmploymentManagementStatusItemChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/employment-management-status-items`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmploymentManagementStatusItemChoicesOutFromJSON));
    }

    /**
     * 企業における雇用管理に関する状況一覧を取得 - Enumのデータを返却
     * 企業における雇用管理に関する状況一覧取得
     */
    async getEmploymentManagementStatusItemChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EmploymentManagementStatusItemChoicesOut>> {
        const response = await this.getEmploymentManagementStatusItemChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 雇用形態一覧を取得 - Enumのデータを返却
     * 雇用形態一覧取得
     */
    async getEmploymentStatusChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EmploymentStatusChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/employment-statuses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmploymentStatusChoicesOutFromJSON));
    }

    /**
     * 雇用形態一覧を取得 - Enumのデータを返却
     * 雇用形態一覧取得
     */
    async getEmploymentStatusChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EmploymentStatusChoicesOut>> {
        const response = await this.getEmploymentStatusChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 英語レベル一覧を取得 - 並び順: order昇順
     * 英語レベル一覧を取得
     */
    async getEnglishLevelChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EnglishLevelChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/english-levels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EnglishLevelChoicesOutFromJSON));
    }

    /**
     * 英語レベル一覧を取得 - 並び順: order昇順
     * 英語レベル一覧を取得
     */
    async getEnglishLevelChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EnglishLevelChoicesOut>> {
        const response = await this.getEnglishLevelChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * イベントの目的選択肢一覧 - Enumのデータを返却
     * イベントの目的選択肢一覧
     */
    async getEventPurposeChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EventPurposeChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/event-purposes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EventPurposeChoicesOutFromJSON));
    }

    /**
     * イベントの目的選択肢一覧 - Enumのデータを返却
     * イベントの目的選択肢一覧
     */
    async getEventPurposeChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EventPurposeChoicesOut>> {
        const response = await this.getEventPurposeChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * FAQカテゴリ一覧取得 - Enumのデータを返却
     * FAQカテゴリ一覧取得
     */
    async getFaqCategoryChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FaqCategoryChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/faq-categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FaqCategoryChoicesOutFromJSON));
    }

    /**
     * FAQカテゴリ一覧取得 - Enumのデータを返却
     * FAQカテゴリ一覧取得
     */
    async getFaqCategoryChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FaqCategoryChoicesOut>> {
        const response = await this.getFaqCategoryChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * FAQターゲット一覧取得 - Enumのデータを返却
     * FAQターゲット一覧取得
     */
    async getFaqTargetsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FaqTargetChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/faq-targets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FaqTargetChoicesOutFromJSON));
    }

    /**
     * FAQターゲット一覧取得 - Enumのデータを返却
     * FAQターゲット一覧取得
     */
    async getFaqTargets(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FaqTargetChoicesOut>> {
        const response = await this.getFaqTargetsRaw(initOverrides);
        return await response.value();
    }

    /**
     * フレームワーク選択肢一覧を取得 - 並び順: id昇順
     * フレームワーク選択肢一覧取得
     */
    async getFrameworkChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FrameworkChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/frameworks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FrameworkChoicesOutFromJSON));
    }

    /**
     * フレームワーク選択肢一覧を取得 - 並び順: id昇順
     * フレームワーク選択肢一覧取得
     */
    async getFrameworkChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FrameworkChoicesOut>> {
        const response = await this.getFrameworkChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 業種一覧を取得 - 並び順: order昇順
     * 業種一覧取得
     */
    async getIndustryChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IndustryChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/industries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IndustryChoicesOutFromJSON));
    }

    /**
     * 業種一覧を取得 - 並び順: order昇順
     * 業種一覧取得
     */
    async getIndustryChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IndustryChoicesOut>> {
        const response = await this.getIndustryChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 業種グループ一覧を取得 - 並び順: order昇順
     * 業種グループ一覧取得
     */
    async getIndustryGroupChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IndustryGroupChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/industry-groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IndustryGroupChoicesOutFromJSON));
    }

    /**
     * 業種グループ一覧を取得 - 並び順: order昇順
     * 業種グループ一覧取得
     */
    async getIndustryGroupChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IndustryGroupChoicesOut>> {
        const response = await this.getIndustryGroupChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * インフォターゲットenumを取得
     * インフォターゲットenum取得
     */
    async getInformationTargetChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InformationTargetChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/information-targets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InformationTargetChoicesOutFromJSON));
    }

    /**
     * インフォターゲットenumを取得
     * インフォターゲットenum取得
     */
    async getInformationTargetChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InformationTargetChoicesOut>> {
        const response = await this.getInformationTargetChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 志向性一覧を取得 - 並び順: order昇順
     * 志向性一覧を取得
     */
    async getIntentionalityChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IntentionalityChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/intentionalities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IntentionalityChoicesOutFromJSON));
    }

    /**
     * 志向性一覧を取得 - 並び順: order昇順
     * 志向性一覧を取得
     */
    async getIntentionalityChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IntentionalityChoicesOut>> {
        const response = await this.getIntentionalityChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 転職活動状況 選択肢一覧を取得 - Enumのデータを返却
     * 転職活動状況 選択肢一覧を取得
     */
    async getJobChangingStatusChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<JobChangingStatusChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/job-changing-status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(JobChangingStatusChoicesOutFromJSON));
    }

    /**
     * 転職活動状況 選択肢一覧を取得 - Enumのデータを返却
     * 転職活動状況 選択肢一覧を取得
     */
    async getJobChangingStatusChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<JobChangingStatusChoicesOut>> {
        const response = await this.getJobChangingStatusChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 求人下書ステータス一覧を取得 - Enumのデータを返却
     * 求人下書ステータス一覧取得
     */
    async getJobDraftStatusChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<JobDraftStatusChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/job-draft-statuses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(JobDraftStatusChoicesOutFromJSON));
    }

    /**
     * 求人下書ステータス一覧を取得 - Enumのデータを返却
     * 求人下書ステータス一覧取得
     */
    async getJobDraftStatusChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<JobDraftStatusChoicesOut>> {
        const response = await this.getJobDraftStatusChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 求人特徴カテゴリ一覧を取得 - Enumのデータを返却
     * 求人特徴カテゴリ一覧取得
     */
    async getJobFeatureCategoryChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<JobFeatureCategoryChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/job-feature-categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(JobFeatureCategoryChoicesOutFromJSON));
    }

    /**
     * 求人特徴カテゴリ一覧を取得 - Enumのデータを返却
     * 求人特徴カテゴリ一覧取得
     */
    async getJobFeatureCategoryChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<JobFeatureCategoryChoicesOut>> {
        const response = await this.getJobFeatureCategoryChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 求人特徴選択肢一覧を取得 - 並び順: id降順
     * 求人特徴選択肢一覧取得
     */
    async getJobFeatureChoicesRaw(requestParameters: GetJobFeatureChoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<JobFeatureChoicesOut>>> {
        const queryParameters: any = {};

        if (requestParameters.isForFullTimeStaff !== undefined) {
            queryParameters['is_for_full_time_staff'] = requestParameters.isForFullTimeStaff;
        }

        if (requestParameters.isForNewGraduate !== undefined) {
            queryParameters['is_for_new_graduate'] = requestParameters.isForNewGraduate;
        }

        if (requestParameters.isForPartTimeJob !== undefined) {
            queryParameters['is_for_part_time_job'] = requestParameters.isForPartTimeJob;
        }

        if (requestParameters.isForIntern !== undefined) {
            queryParameters['is_for_intern'] = requestParameters.isForIntern;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/job-features`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(JobFeatureChoicesOutFromJSON));
    }

    /**
     * 求人特徴選択肢一覧を取得 - 並び順: id降順
     * 求人特徴選択肢一覧取得
     */
    async getJobFeatureChoices(requestParameters: GetJobFeatureChoicesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<JobFeatureChoicesOut>> {
        const response = await this.getJobFeatureChoicesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 就職活動状況 選択肢一覧を取得 - Enumのデータを返却
     * 就職活動状況 選択肢一覧を取得
     */
    async getJobHuntingStatusChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<JobHuntingStatusChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/job-hunting-status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(JobHuntingStatusChoicesOutFromJSON));
    }

    /**
     * 就職活動状況 選択肢一覧を取得 - Enumのデータを返却
     * 就職活動状況 選択肢一覧を取得
     */
    async getJobHuntingStatusChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<JobHuntingStatusChoicesOut>> {
        const response = await this.getJobHuntingStatusChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 求職ステータス 選択肢一覧を取得 - Enumのデータを返却
     * 求職ステータス 選択肢一覧を取得
     */
    async getJobHuntingTypeChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<JobHuntingTypeChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/job-hunting-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(JobHuntingTypeChoicesOutFromJSON));
    }

    /**
     * 求職ステータス 選択肢一覧を取得 - Enumのデータを返却
     * 求職ステータス 選択肢一覧を取得
     */
    async getJobHuntingTypeChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<JobHuntingTypeChoicesOut>> {
        const response = await this.getJobHuntingTypeChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 求人選考タイプ一覧を取得 - Enumのデータを返却 - 企業(organization_id)を指定した場合のレスポンスデータ     - 人材紹介プランに加入していた場合: `1, エージェント経由` を含める     - スカウトプランに加入していた場合: `2, \"直接採用` を含める     - 指定した企業がない場合: 空のリストを返す
     * 求人選考タイプ一覧取得
     */
    async getJobSelectionTypeChoicesRaw(requestParameters: GetJobSelectionTypeChoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<JobSelectionTypeChoicesOut>>> {
        const queryParameters: any = {};

        if (requestParameters.organizationId !== undefined) {
            queryParameters['organization_id'] = requestParameters.organizationId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/job-selection-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(JobSelectionTypeChoicesOutFromJSON));
    }

    /**
     * 求人選考タイプ一覧を取得 - Enumのデータを返却 - 企業(organization_id)を指定した場合のレスポンスデータ     - 人材紹介プランに加入していた場合: `1, エージェント経由` を含める     - スカウトプランに加入していた場合: `2, \"直接採用` を含める     - 指定した企業がない場合: 空のリストを返す
     * 求人選考タイプ一覧取得
     */
    async getJobSelectionTypeChoices(requestParameters: GetJobSelectionTypeChoicesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<JobSelectionTypeChoicesOut>> {
        const response = await this.getJobSelectionTypeChoicesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ジャッジステータス選択肢一覧 - Enumのデータを返却
     * ジャッジステータス選択肢一覧
     */
    async getJudgeStatusChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<JudgeStatusChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/judge-status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(JudgeStatusChoicesOutFromJSON));
    }

    /**
     * ジャッジステータス選択肢一覧 - Enumのデータを返却
     * ジャッジステータス選択肢一覧
     */
    async getJudgeStatusChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<JudgeStatusChoicesOut>> {
        const response = await this.getJudgeStatusChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 職種選択肢一覧を取得 - 並び順: order昇順
     * 職種選択肢一覧取得
     */
    async getOccupationChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OccupationChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/occupations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OccupationChoicesOutFromJSON));
    }

    /**
     * 職種選択肢一覧を取得 - 並び順: order昇順
     * 職種選択肢一覧取得
     */
    async getOccupationChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OccupationChoicesOut>> {
        const response = await this.getOccupationChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 集合場所における受動喫煙防止の取り組み一覧を取得 - Enumのデータを返却
     * 集合場所における受動喫煙防止の取り組み一覧取得
     */
    async getPassiveSmokingInitiativeChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PassiveSmokingInitiativeChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/passive-smoking-initiatives`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PassiveSmokingInitiativeChoicesOutFromJSON));
    }

    /**
     * 集合場所における受動喫煙防止の取り組み一覧を取得 - Enumのデータを返却
     * 集合場所における受動喫煙防止の取り組み一覧取得
     */
    async getPassiveSmokingInitiativeChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PassiveSmokingInitiativeChoicesOut>> {
        const response = await this.getPassiveSmokingInitiativeChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * PG言語選択肢一覧を取得 - 並び順: id昇順
     * PG言語選択肢一覧取得
     */
    async getPgLangChoicesRaw(requestParameters: GetPgLangChoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PgLangChoicesOut>>> {
        const queryParameters: any = {};

        if (requestParameters.isSql !== undefined) {
            queryParameters['is_sql'] = requestParameters.isSql;
        }

        if (requestParameters.useForBlankQuestion !== undefined) {
            queryParameters['use_for_blank_question'] = requestParameters.useForBlankQuestion;
        }

        if (requestParameters.useForJudgementLang !== undefined) {
            queryParameters['use_for_judgement_lang'] = requestParameters.useForJudgementLang;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/pg-langs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PgLangChoicesOutFromJSON));
    }

    /**
     * PG言語選択肢一覧を取得 - 並び順: id昇順
     * PG言語選択肢一覧取得
     */
    async getPgLangChoices(requestParameters: GetPgLangChoicesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PgLangChoicesOut>> {
        const response = await this.getPgLangChoicesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 電話番号タイプ 選択肢一覧を取得 - Enumのデータを返却
     * 電話番号タイプ 選択肢一覧を取得
     */
    async getPhoneNumberTypeChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PhoneNumberTypeChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/phone-number-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PhoneNumberTypeChoicesOutFromJSON));
    }

    /**
     * 電話番号タイプ 選択肢一覧を取得 - Enumのデータを返却
     * 電話番号タイプ 選択肢一覧を取得
     */
    async getPhoneNumberTypeChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PhoneNumberTypeChoicesOut>> {
        const response = await this.getPhoneNumberTypeChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 都道府県一覧を取得 - 並び順: id昇順
     * 都道府県一覧を取得
     */
    async getPrefectureChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PrefectureChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/prefectures`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PrefectureChoicesOutFromJSON));
    }

    /**
     * 都道府県一覧を取得 - 並び順: id昇順
     * 都道府県一覧を取得
     */
    async getPrefectureChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PrefectureChoicesOut>> {
        const response = await this.getPrefectureChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 求人試用期間一覧を取得 - Enumのデータを返却
     * 求人試用期間一覧取得
     */
    async getProbationChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProbationChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/probations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProbationChoicesOutFromJSON));
    }

    /**
     * 求人試用期間一覧を取得 - Enumのデータを返却
     * 求人試用期間一覧取得
     */
    async getProbationChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProbationChoicesOut>> {
        const response = await this.getProbationChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 問題形式選択肢一覧 - Enumのデータを返却
     * 問題形式選択肢一覧
     */
    async getQuestionTypeChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<QuestionTypeChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/question-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QuestionTypeChoicesOutFromJSON));
    }

    /**
     * 問題形式選択肢一覧 - Enumのデータを返却
     * 問題形式選択肢一覧
     */
    async getQuestionTypeChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<QuestionTypeChoicesOut>> {
        const response = await this.getQuestionTypeChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 募集採用に関する状況一覧を取得 - Enumのデータを返却
     * 募集採用に関する状況一覧取得
     */
    async getRecruitmentAndHiringStatusItemChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RecruitmentAndHiringStatusItemChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/recruitment-and-hiring-status-items`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RecruitmentAndHiringStatusItemChoicesOutFromJSON));
    }

    /**
     * 募集採用に関する状況一覧を取得 - Enumのデータを返却
     * 募集採用に関する状況一覧取得
     */
    async getRecruitmentAndHiringStatusItemChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RecruitmentAndHiringStatusItemChoicesOut>> {
        const response = await this.getRecruitmentAndHiringStatusItemChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 給与形態一覧を取得 - Enumのデータを返却
     * 給与形態一覧取得
     */
    async getSalarySystemChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SalarySystemChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/salary-systems`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SalarySystemChoicesOutFromJSON));
    }

    /**
     * 給与形態一覧を取得 - Enumのデータを返却
     * 給与形態一覧取得
     */
    async getSalarySystemChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SalarySystemChoicesOut>> {
        const response = await this.getSalarySystemChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 学校の種類選択肢一覧 - Enumのデータを返却
     * 学校の種類選択肢一覧
     */
    async getSchoolTypeChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SchoolTypeChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/school-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SchoolTypeChoicesOutFromJSON));
    }

    /**
     * 学校の種類選択肢一覧 - Enumのデータを返却
     * 学校の種類選択肢一覧
     */
    async getSchoolTypeChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SchoolTypeChoicesOut>> {
        const response = await this.getSchoolTypeChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 学校管理ユーザータイプ選択肢一覧 - Enumのデータを返却
     * 学校管理ユーザータイプ選択肢一覧
     */
    async getSchoolUserTypeChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SchoolUserTypeChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/school-user-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SchoolUserTypeChoicesOutFromJSON));
    }

    /**
     * 学校管理ユーザータイプ選択肢一覧 - Enumのデータを返却
     * 学校管理ユーザータイプ選択肢一覧
     */
    async getSchoolUserTypeChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SchoolUserTypeChoicesOut>> {
        const response = await this.getSchoolUserTypeChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 選考ステップ選択肢一覧 - Enumのデータを返却
     * 選考ステップ選択肢一覧
     */
    async getSelectionStepChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SelectionStepChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/selection-steps`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SelectionStepChoicesOutFromJSON));
    }

    /**
     * 選考ステップ選択肢一覧 - Enumのデータを返却
     * 選考ステップ選択肢一覧
     */
    async getSelectionStepChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SelectionStepChoicesOut>> {
        const response = await this.getSelectionStepChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 選考タイプ一覧取得 - Enumのデータを返却
     * 選考タイプ一覧取得
     */
    async getSelectionTypeChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SelectionTypeChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/selection-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SelectionTypeChoicesOutFromJSON));
    }

    /**
     * 選考タイプ一覧取得 - Enumのデータを返却
     * 選考タイプ一覧取得
     */
    async getSelectionTypeChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SelectionTypeChoicesOut>> {
        const response = await this.getSelectionTypeChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * スキル選択肢一覧を取得 - 並び順: id昇順
     * スキル選択肢一覧取得
     */
    async getSkillChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SkillChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/skills`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SkillChoicesOutFromJSON));
    }

    /**
     * スキル選択肢一覧を取得 - 並び順: id昇順
     * スキル選択肢一覧取得
     */
    async getSkillChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SkillChoicesOut>> {
        const response = await this.getSkillChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * スキルレベル(求人)一覧取得 - Enumのデータを返却
     * スキルレベル(求人)一覧取得
     */
    async getSkillLevelChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SkillLevelChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/skill-levels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SkillLevelChoicesOutFromJSON));
    }

    /**
     * スキルレベル(求人)一覧取得 - Enumのデータを返却
     * スキルレベル(求人)一覧取得
     */
    async getSkillLevelChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SkillLevelChoicesOut>> {
        const response = await this.getSkillLevelChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 規約種別選択肢一覧 - Enumのデータを返却
     * 規約種別選択肢一覧
     */
    async getTermTypeChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TermTypeChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/term-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TermTypeChoicesOutFromJSON));
    }

    /**
     * 規約種別選択肢一覧 - Enumのデータを返却
     * 規約種別選択肢一覧
     */
    async getTermTypeChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TermTypeChoicesOut>> {
        const response = await this.getTermTypeChoicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 職業能力開発・向上に関する状況一覧を取得 - Enumのデータを返却
     * 職業能力開発・向上に関する状況一覧取得
     */
    async getVocationalAbilityStatusItemChoicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VocationalAbilityStatusItemChoicesOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common/choices/vocational-ability-status-items`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VocationalAbilityStatusItemChoicesOutFromJSON));
    }

    /**
     * 職業能力開発・向上に関する状況一覧を取得 - Enumのデータを返却
     * 職業能力開発・向上に関する状況一覧取得
     */
    async getVocationalAbilityStatusItemChoices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VocationalAbilityStatusItemChoicesOut>> {
        const response = await this.getVocationalAbilityStatusItemChoicesRaw(initOverrides);
        return await response.value();
    }

}
