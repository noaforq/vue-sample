/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AppSchemasGeneralSessionsGeneralSessionDetailOutAvailablePgLanguages } from './AppSchemasGeneralSessionsGeneralSessionDetailOutAvailablePgLanguages';
import {
    AppSchemasGeneralSessionsGeneralSessionDetailOutAvailablePgLanguagesFromJSON,
    AppSchemasGeneralSessionsGeneralSessionDetailOutAvailablePgLanguagesFromJSONTyped,
    AppSchemasGeneralSessionsGeneralSessionDetailOutAvailablePgLanguagesToJSON,
} from './AppSchemasGeneralSessionsGeneralSessionDetailOutAvailablePgLanguages';
import type { EventPurpose } from './EventPurpose';
import {
    EventPurposeFromJSON,
    EventPurposeFromJSONTyped,
    EventPurposeToJSON,
} from './EventPurpose';
import type { EventSponsorObjectOut } from './EventSponsorObjectOut';
import {
    EventSponsorObjectOutFromJSON,
    EventSponsorObjectOutFromJSONTyped,
    EventSponsorObjectOutToJSON,
} from './EventSponsorObjectOut';
import type { SessionStatus } from './SessionStatus';
import {
    SessionStatusFromJSON,
    SessionStatusFromJSONTyped,
    SessionStatusToJSON,
} from './SessionStatus';
import type { SessionType } from './SessionType';
import {
    SessionTypeFromJSON,
    SessionTypeFromJSONTyped,
    SessionTypeToJSON,
} from './SessionType';
import type { SessionUserStatus } from './SessionUserStatus';
import {
    SessionUserStatusFromJSON,
    SessionUserStatusFromJSONTyped,
    SessionUserStatusToJSON,
} from './SessionUserStatus';

/**
 * 
 * @export
 * @interface AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut
 */
export interface AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut {
    /**
     * セッションID
     * @type {number}
     * @memberof AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut
     */
    id: number;
    /**
     * セッション名
     * @type {string}
     * @memberof AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut
     */
    sessionName: string;
    /**
     * セッション開始日時
     * @type {Date}
     * @memberof AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut
     */
    startsAt: Date;
    /**
     * セッション終了日時
     * @type {Date}
     * @memberof AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut
     */
    endsAt: Date;
    /**
     * 
     * @type {SessionStatus}
     * @memberof AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut
     */
    sessionStatus: SessionStatus;
    /**
     * 開催場所
     * @type {string}
     * @memberof AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut
     */
    location: string;
    /**
     * 問題数
     * @type {number}
     * @memberof AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut
     */
    sessionContentCount: number;
    /**
     * ランダム出題数(ランダムセッションの際はこちらを表示)
     * @type {number}
     * @memberof AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut
     */
    numOfQuestionsInRandom: number | null;
    /**
     * 小テストセッションか
     * @type {boolean}
     * @memberof AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut
     */
    isShortTestSession: boolean | null;
    /**
     * ランダムセッションか
     * @type {boolean}
     * @memberof AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut
     */
    isRandomSession: boolean | null;
    /**
     * 練習用セッションか
     * @type {boolean}
     * @memberof AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut
     */
    isPracticeSession: boolean | null;
    /**
     * 公開中かどうか
     * @type {boolean}
     * @memberof AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut
     */
    isActive: boolean | null;
    /**
     * パスワードをかけるか
     * @type {boolean}
     * @memberof AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut
     */
    isLockedSession: boolean | null;
    /**
     * ユーザー向けランキング表示有無
     * @type {boolean}
     * @memberof AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut
     */
    showRankingForUser: boolean;
    /**
     * ユーザーに問題ごとの挑戦状況を表示するか
     * @type {boolean}
     * @memberof AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut
     */
    showChallengeStatus: boolean;
    /**
     * 試験時間(分)
     * @type {number}
     * @memberof AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut
     */
    timeLimit: number | null;
    /**
     * 
     * @type {SessionType}
     * @memberof AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut
     */
    sessionType: SessionType;
    /**
     * セッションコード
     * @type {string}
     * @memberof AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut
     */
    sessionCode: string;
    /**
     * パスワード
     * @type {string}
     * @memberof AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut
     */
    password: string;
    /**
     * イベントID
     * @type {number}
     * @memberof AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut
     */
    eventId: number;
    /**
     * 主催者
     * @type {string}
     * @memberof AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut
     */
    eventHostName: string;
    /**
     * 組織ID
     * @type {number}
     * @memberof AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut
     */
    eventHostId: number;
    /**
     * イベント名
     * @type {string}
     * @memberof AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut
     */
    eventName: string;
    /**
     * イベントテーマ
     * @type {string}
     * @memberof AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut
     */
    eventTheme: string;
    /**
     * 
     * @type {EventPurpose}
     * @memberof AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut
     */
    eventPurpose: EventPurpose;
    /**
     * アンケートを表示有無
     * @type {boolean}
     * @memberof AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut
     */
    hasInterview: boolean;
    /**
     * GoogleForm回答ページURL
     * @type {string}
     * @memberof AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut
     */
    answerGoogleFormLink: string | null;
    /**
     * アンケート説明文
     * @type {string}
     * @memberof AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut
     */
    interviewDescription: string | null;
    /**
     * 
     * @type {SessionUserStatus}
     * @memberof AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut
     */
    sessionUserStatus: SessionUserStatus | null;
    /**
     * スレッド未読数
     * @type {number}
     * @memberof AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut
     */
    unreadCount: number;
    /**
     * 
     * @type {Array<EventSponsorObjectOut>}
     * @memberof AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut
     */
    eventSponsors: Array<EventSponsorObjectOut>;
    /**
     * 
     * @type {Array<AppSchemasGeneralSessionsGeneralSessionDetailOutAvailablePgLanguages>}
     * @memberof AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut
     */
    availablePgLangs: Array<AppSchemasGeneralSessionsGeneralSessionDetailOutAvailablePgLanguages>;
    /**
     * タイマー開始時間(JST)
     * @type {Date}
     * @memberof AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut
     */
    userStartAt: Date | null;
}

/**
 * Check if a given object implements the AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut interface.
 */
export function instanceOfAppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "sessionName" in value;
    isInstance = isInstance && "startsAt" in value;
    isInstance = isInstance && "endsAt" in value;
    isInstance = isInstance && "sessionStatus" in value;
    isInstance = isInstance && "location" in value;
    isInstance = isInstance && "sessionContentCount" in value;
    isInstance = isInstance && "numOfQuestionsInRandom" in value;
    isInstance = isInstance && "isShortTestSession" in value;
    isInstance = isInstance && "isRandomSession" in value;
    isInstance = isInstance && "isPracticeSession" in value;
    isInstance = isInstance && "isActive" in value;
    isInstance = isInstance && "isLockedSession" in value;
    isInstance = isInstance && "showRankingForUser" in value;
    isInstance = isInstance && "showChallengeStatus" in value;
    isInstance = isInstance && "timeLimit" in value;
    isInstance = isInstance && "sessionType" in value;
    isInstance = isInstance && "sessionCode" in value;
    isInstance = isInstance && "password" in value;
    isInstance = isInstance && "eventId" in value;
    isInstance = isInstance && "eventHostName" in value;
    isInstance = isInstance && "eventHostId" in value;
    isInstance = isInstance && "eventName" in value;
    isInstance = isInstance && "eventTheme" in value;
    isInstance = isInstance && "eventPurpose" in value;
    isInstance = isInstance && "hasInterview" in value;
    isInstance = isInstance && "answerGoogleFormLink" in value;
    isInstance = isInstance && "interviewDescription" in value;
    isInstance = isInstance && "sessionUserStatus" in value;
    isInstance = isInstance && "unreadCount" in value;
    isInstance = isInstance && "eventSponsors" in value;
    isInstance = isInstance && "availablePgLangs" in value;
    isInstance = isInstance && "userStartAt" in value;

    return isInstance;
}

export function AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOutFromJSON(json: any): AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut {
    return AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOutFromJSONTyped(json, false);
}

export function AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'sessionName': json['sessionName'],
        'startsAt': (new Date(json['startsAt'])),
        'endsAt': (new Date(json['endsAt'])),
        'sessionStatus': SessionStatusFromJSON(json['sessionStatus']),
        'location': json['location'],
        'sessionContentCount': json['sessionContentCount'],
        'numOfQuestionsInRandom': json['numOfQuestionsInRandom'],
        'isShortTestSession': json['isShortTestSession'],
        'isRandomSession': json['isRandomSession'],
        'isPracticeSession': json['isPracticeSession'],
        'isActive': json['isActive'],
        'isLockedSession': json['isLockedSession'],
        'showRankingForUser': json['showRankingForUser'],
        'showChallengeStatus': json['showChallengeStatus'],
        'timeLimit': json['timeLimit'],
        'sessionType': SessionTypeFromJSON(json['sessionType']),
        'sessionCode': json['sessionCode'],
        'password': json['password'],
        'eventId': json['eventId'],
        'eventHostName': json['eventHostName'],
        'eventHostId': json['eventHostId'],
        'eventName': json['eventName'],
        'eventTheme': json['eventTheme'],
        'eventPurpose': EventPurposeFromJSON(json['eventPurpose']),
        'hasInterview': json['hasInterview'],
        'answerGoogleFormLink': json['answerGoogleFormLink'],
        'interviewDescription': json['interviewDescription'],
        'sessionUserStatus': SessionUserStatusFromJSON(json['sessionUserStatus']),
        'unreadCount': json['unreadCount'],
        'eventSponsors': ((json['eventSponsors'] as Array<any>).map(EventSponsorObjectOutFromJSON)),
        'availablePgLangs': ((json['availablePgLangs'] as Array<any>).map(AppSchemasGeneralSessionsGeneralSessionDetailOutAvailablePgLanguagesFromJSON)),
        'userStartAt': (json['userStartAt'] === null ? null : new Date(json['userStartAt'])),
    };
}

export function AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOutToJSON(value?: AppSchemasGeneralSessionsGeneralSessionDetailOutSessionDetailOut | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'sessionName': value.sessionName,
        'startsAt': (value.startsAt.toISOString()),
        'endsAt': (value.endsAt.toISOString()),
        'sessionStatus': SessionStatusToJSON(value.sessionStatus),
        'location': value.location,
        'sessionContentCount': value.sessionContentCount,
        'numOfQuestionsInRandom': value.numOfQuestionsInRandom,
        'isShortTestSession': value.isShortTestSession,
        'isRandomSession': value.isRandomSession,
        'isPracticeSession': value.isPracticeSession,
        'isActive': value.isActive,
        'isLockedSession': value.isLockedSession,
        'showRankingForUser': value.showRankingForUser,
        'showChallengeStatus': value.showChallengeStatus,
        'timeLimit': value.timeLimit,
        'sessionType': SessionTypeToJSON(value.sessionType),
        'sessionCode': value.sessionCode,
        'password': value.password,
        'eventId': value.eventId,
        'eventHostName': value.eventHostName,
        'eventHostId': value.eventHostId,
        'eventName': value.eventName,
        'eventTheme': value.eventTheme,
        'eventPurpose': EventPurposeToJSON(value.eventPurpose),
        'hasInterview': value.hasInterview,
        'answerGoogleFormLink': value.answerGoogleFormLink,
        'interviewDescription': value.interviewDescription,
        'sessionUserStatus': SessionUserStatusToJSON(value.sessionUserStatus),
        'unreadCount': value.unreadCount,
        'eventSponsors': ((value.eventSponsors as Array<any>).map(EventSponsorObjectOutToJSON)),
        'availablePgLangs': ((value.availablePgLangs as Array<any>).map(AppSchemasGeneralSessionsGeneralSessionDetailOutAvailablePgLanguagesToJSON)),
        'userStartAt': (value.userStartAt === null ? null : value.userStartAt.toISOString()),
    };
}

