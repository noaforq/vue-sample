/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { JudgeType } from './JudgeType';
import {
    JudgeTypeFromJSON,
    JudgeTypeFromJSONTyped,
    JudgeTypeToJSON,
} from './JudgeType';

/**
 * 
 * @export
 * @interface JudgeResultIn
 */
export interface JudgeResultIn {
    /**
     * 
     * @type {number}
     * @memberof JudgeResultIn
     */
    elapsedTime: number;
    /**
     * 
     * @type {string}
     * @memberof JudgeResultIn
     */
    execOutput: string;
    /**
     * 
     * @type {number}
     * @memberof JudgeResultIn
     */
    memoryUsage: number;
    /**
     * 
     * @type {Date}
     * @memberof JudgeResultIn
     */
    execDate: Date;
    /**
     * 
     * @type {string}
     * @memberof JudgeResultIn
     */
    status: string;
    /**
     * 
     * @type {number}
     * @memberof JudgeResultIn
     */
    testCaseId: number;
    /**
     * 
     * @type {JudgeType}
     * @memberof JudgeResultIn
     */
    judgeType: JudgeType;
    /**
     * 問題: question_test_result_id, 問題テンプレート: question_template_id, 問題検証: question_verification_result_id
     * @type {number}
     * @memberof JudgeResultIn
     */
    judgeCode: number;
    /**
     * オリジナルケースか
     * @type {boolean}
     * @memberof JudgeResultIn
     */
    isOriginalCase?: boolean | null;
}

/**
 * Check if a given object implements the JudgeResultIn interface.
 */
export function instanceOfJudgeResultIn(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "elapsedTime" in value;
    isInstance = isInstance && "execOutput" in value;
    isInstance = isInstance && "memoryUsage" in value;
    isInstance = isInstance && "execDate" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "testCaseId" in value;
    isInstance = isInstance && "judgeType" in value;
    isInstance = isInstance && "judgeCode" in value;

    return isInstance;
}

export function JudgeResultInFromJSON(json: any): JudgeResultIn {
    return JudgeResultInFromJSONTyped(json, false);
}

export function JudgeResultInFromJSONTyped(json: any, ignoreDiscriminator: boolean): JudgeResultIn {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'elapsedTime': json['elapsedTime'],
        'execOutput': json['execOutput'],
        'memoryUsage': json['memoryUsage'],
        'execDate': (new Date(json['execDate'])),
        'status': json['status'],
        'testCaseId': json['testCaseId'],
        'judgeType': JudgeTypeFromJSON(json['judgeType']),
        'judgeCode': json['judgeCode'],
        'isOriginalCase': !exists(json, 'isOriginalCase') ? undefined : json['isOriginalCase'],
    };
}

export function JudgeResultInToJSON(value?: JudgeResultIn | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'elapsedTime': value.elapsedTime,
        'execOutput': value.execOutput,
        'memoryUsage': value.memoryUsage,
        'execDate': (value.execDate.toISOString()),
        'status': value.status,
        'testCaseId': value.testCaseId,
        'judgeType': JudgeTypeToJSON(value.judgeType),
        'judgeCode': value.judgeCode,
        'isOriginalCase': value.isOriginalCase,
    };
}

