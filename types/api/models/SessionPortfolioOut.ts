/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AppSchemasManageSessionsSessionPortfolioOutSessionQuestionResultListOut } from './AppSchemasManageSessionsSessionPortfolioOutSessionQuestionResultListOut';
import {
    AppSchemasManageSessionsSessionPortfolioOutSessionQuestionResultListOutFromJSON,
    AppSchemasManageSessionsSessionPortfolioOutSessionQuestionResultListOutFromJSONTyped,
    AppSchemasManageSessionsSessionPortfolioOutSessionQuestionResultListOutToJSON,
} from './AppSchemasManageSessionsSessionPortfolioOutSessionQuestionResultListOut';

/**
 * 
 * @export
 * @interface SessionPortfolioOut
 */
export interface SessionPortfolioOut {
    /**
     * ユーザーアイコンURL
     * @type {string}
     * @memberof SessionPortfolioOut
     */
    icon: string;
    /**
     * 表示名
     * @type {string}
     * @memberof SessionPortfolioOut
     */
    displayName: string;
    /**
     * 道府県名
     * @type {string}
     * @memberof SessionPortfolioOut
     */
    prefectureName?: string | null;
    /**
     * 生年月日
     * @type {Date}
     * @memberof SessionPortfolioOut
     */
    birthday?: Date | null;
    /**
     * 卒業年度
     * @type {Date}
     * @memberof SessionPortfolioOut
     */
    graduationDate?: Date | null;
    /**
     * 順位
     * @type {number}
     * @memberof SessionPortfolioOut
     */
    rank: number;
    /**
     * セッション名
     * @type {string}
     * @memberof SessionPortfolioOut
     */
    sessionName: string;
    /**
     * 主催者
     * @type {string}
     * @memberof SessionPortfolioOut
     */
    eventHostName: string;
    /**
     * 開催場所
     * @type {string}
     * @memberof SessionPortfolioOut
     */
    location: string;
    /**
     * セッション開始日時
     * @type {Date}
     * @memberof SessionPortfolioOut
     */
    startsAt: Date;
    /**
     * セッション終了日時
     * @type {Date}
     * @memberof SessionPortfolioOut
     */
    endsAt: Date;
    /**
     * セッション参加人数
     * @type {number}
     * @memberof SessionPortfolioOut
     */
    sessionUserCount: number;
    /**
     * 問題数
     * @type {number}
     * @memberof SessionPortfolioOut
     */
    sessionContentCount?: number | null;
    /**
     * 評価方式
     * @type {string}
     * @memberof SessionPortfolioOut
     */
    evaluation: string;
    /**
     * ユーザーの獲得合計得点
     * @type {number}
     * @memberof SessionPortfolioOut
     */
    userScore: number;
    /**
     * 獲得合計得点の平均値
     * @type {number}
     * @memberof SessionPortfolioOut
     */
    avgScore: number;
    /**
     * 獲得合計得点の最大値
     * @type {number}
     * @memberof SessionPortfolioOut
     */
    maxScore: number;
    /**
     * ユーザーの通過問題数
     * @type {number}
     * @memberof SessionPortfolioOut
     */
    userPassed: number;
    /**
     * 通過問題数の平均値
     * @type {number}
     * @memberof SessionPortfolioOut
     */
    avgPassed: number;
    /**
     * 通過問題数の最大値
     * @type {number}
     * @memberof SessionPortfolioOut
     */
    maxPassed: number;
    /**
     * ユーザーの基礎得点
     * @type {number}
     * @memberof SessionPortfolioOut
     */
    userBase: number;
    /**
     * 基礎得点の平均値
     * @type {number}
     * @memberof SessionPortfolioOut
     */
    avgBase: number;
    /**
     * 基礎得点の最大値
     * @type {number}
     * @memberof SessionPortfolioOut
     */
    maxBase: number;
    /**
     * ユーザーのタイムボーナス得点
     * @type {number}
     * @memberof SessionPortfolioOut
     */
    userTime: number;
    /**
     * タイムボーナスの平均値
     * @type {number}
     * @memberof SessionPortfolioOut
     */
    avgTime: number;
    /**
     * タイムボーナスの最大値
     * @type {number}
     * @memberof SessionPortfolioOut
     */
    maxTime: number;
    /**
     * ユーザーの通過得点
     * @type {number}
     * @memberof SessionPortfolioOut
     */
    userPass: number;
    /**
     * 通過得点の平均値
     * @type {number}
     * @memberof SessionPortfolioOut
     */
    avgPass: number;
    /**
     * 通過得点の最大値
     * @type {number}
     * @memberof SessionPortfolioOut
     */
    maxPass: number;
    /**
     * 問題成績リスト
     * @type {Array<AppSchemasManageSessionsSessionPortfolioOutSessionQuestionResultListOut>}
     * @memberof SessionPortfolioOut
     */
    questionResultList: Array<AppSchemasManageSessionsSessionPortfolioOutSessionQuestionResultListOut>;
}

/**
 * Check if a given object implements the SessionPortfolioOut interface.
 */
export function instanceOfSessionPortfolioOut(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "icon" in value;
    isInstance = isInstance && "displayName" in value;
    isInstance = isInstance && "rank" in value;
    isInstance = isInstance && "sessionName" in value;
    isInstance = isInstance && "eventHostName" in value;
    isInstance = isInstance && "location" in value;
    isInstance = isInstance && "startsAt" in value;
    isInstance = isInstance && "endsAt" in value;
    isInstance = isInstance && "sessionUserCount" in value;
    isInstance = isInstance && "evaluation" in value;
    isInstance = isInstance && "userScore" in value;
    isInstance = isInstance && "avgScore" in value;
    isInstance = isInstance && "maxScore" in value;
    isInstance = isInstance && "userPassed" in value;
    isInstance = isInstance && "avgPassed" in value;
    isInstance = isInstance && "maxPassed" in value;
    isInstance = isInstance && "userBase" in value;
    isInstance = isInstance && "avgBase" in value;
    isInstance = isInstance && "maxBase" in value;
    isInstance = isInstance && "userTime" in value;
    isInstance = isInstance && "avgTime" in value;
    isInstance = isInstance && "maxTime" in value;
    isInstance = isInstance && "userPass" in value;
    isInstance = isInstance && "avgPass" in value;
    isInstance = isInstance && "maxPass" in value;
    isInstance = isInstance && "questionResultList" in value;

    return isInstance;
}

export function SessionPortfolioOutFromJSON(json: any): SessionPortfolioOut {
    return SessionPortfolioOutFromJSONTyped(json, false);
}

export function SessionPortfolioOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): SessionPortfolioOut {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'icon': json['icon'],
        'displayName': json['displayName'],
        'prefectureName': !exists(json, 'prefectureName') ? undefined : json['prefectureName'],
        'birthday': !exists(json, 'birthday') ? undefined : (json['birthday'] === null ? null : new Date(json['birthday'])),
        'graduationDate': !exists(json, 'graduationDate') ? undefined : (json['graduationDate'] === null ? null : new Date(json['graduationDate'])),
        'rank': json['rank'],
        'sessionName': json['sessionName'],
        'eventHostName': json['eventHostName'],
        'location': json['location'],
        'startsAt': (new Date(json['startsAt'])),
        'endsAt': (new Date(json['endsAt'])),
        'sessionUserCount': json['sessionUserCount'],
        'sessionContentCount': !exists(json, 'sessionContentCount') ? undefined : json['sessionContentCount'],
        'evaluation': json['evaluation'],
        'userScore': json['userScore'],
        'avgScore': json['avgScore'],
        'maxScore': json['maxScore'],
        'userPassed': json['userPassed'],
        'avgPassed': json['avgPassed'],
        'maxPassed': json['maxPassed'],
        'userBase': json['userBase'],
        'avgBase': json['avgBase'],
        'maxBase': json['maxBase'],
        'userTime': json['userTime'],
        'avgTime': json['avgTime'],
        'maxTime': json['maxTime'],
        'userPass': json['userPass'],
        'avgPass': json['avgPass'],
        'maxPass': json['maxPass'],
        'questionResultList': ((json['questionResultList'] as Array<any>).map(AppSchemasManageSessionsSessionPortfolioOutSessionQuestionResultListOutFromJSON)),
    };
}

export function SessionPortfolioOutToJSON(value?: SessionPortfolioOut | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'icon': value.icon,
        'displayName': value.displayName,
        'prefectureName': value.prefectureName,
        'birthday': value.birthday === undefined ? undefined : (value.birthday === null ? null : value.birthday.toISOString().substring(0,10)),
        'graduationDate': value.graduationDate === undefined ? undefined : (value.graduationDate === null ? null : value.graduationDate.toISOString().substring(0,10)),
        'rank': value.rank,
        'sessionName': value.sessionName,
        'eventHostName': value.eventHostName,
        'location': value.location,
        'startsAt': (value.startsAt.toISOString()),
        'endsAt': (value.endsAt.toISOString()),
        'sessionUserCount': value.sessionUserCount,
        'sessionContentCount': value.sessionContentCount,
        'evaluation': value.evaluation,
        'userScore': value.userScore,
        'avgScore': value.avgScore,
        'maxScore': value.maxScore,
        'userPassed': value.userPassed,
        'avgPassed': value.avgPassed,
        'maxPassed': value.maxPassed,
        'userBase': value.userBase,
        'avgBase': value.avgBase,
        'maxBase': value.maxBase,
        'userTime': value.userTime,
        'avgTime': value.avgTime,
        'maxTime': value.maxTime,
        'userPass': value.userPass,
        'avgPass': value.avgPass,
        'maxPass': value.maxPass,
        'questionResultList': ((value.questionResultList as Array<any>).map(AppSchemasManageSessionsSessionPortfolioOutSessionQuestionResultListOutToJSON)),
    };
}

