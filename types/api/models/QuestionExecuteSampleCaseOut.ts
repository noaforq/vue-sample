/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OriginalSampleCaseOut } from './OriginalSampleCaseOut';
import {
    OriginalSampleCaseOutFromJSON,
    OriginalSampleCaseOutFromJSONTyped,
    OriginalSampleCaseOutToJSON,
} from './OriginalSampleCaseOut';

/**
 * 
 * @export
 * @interface QuestionExecuteSampleCaseOut
 */
export interface QuestionExecuteSampleCaseOut {
    /**
     * テスト結果ID
     * @type {number}
     * @memberof QuestionExecuteSampleCaseOut
     */
    testResultId: number;
    /**
     * オリジナルケース
     * @type {Array<OriginalSampleCaseOut>}
     * @memberof QuestionExecuteSampleCaseOut
     */
    originalCases?: Array<OriginalSampleCaseOut>;
}

/**
 * Check if a given object implements the QuestionExecuteSampleCaseOut interface.
 */
export function instanceOfQuestionExecuteSampleCaseOut(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "testResultId" in value;

    return isInstance;
}

export function QuestionExecuteSampleCaseOutFromJSON(json: any): QuestionExecuteSampleCaseOut {
    return QuestionExecuteSampleCaseOutFromJSONTyped(json, false);
}

export function QuestionExecuteSampleCaseOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuestionExecuteSampleCaseOut {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'testResultId': json['testResultId'],
        'originalCases': !exists(json, 'originalCases') ? undefined : ((json['originalCases'] as Array<any>).map(OriginalSampleCaseOutFromJSON)),
    };
}

export function QuestionExecuteSampleCaseOutToJSON(value?: QuestionExecuteSampleCaseOut | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'testResultId': value.testResultId,
        'originalCases': value.originalCases === undefined ? undefined : ((value.originalCases as Array<any>).map(OriginalSampleCaseOutToJSON)),
    };
}

