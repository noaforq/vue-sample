/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { QuestionUserResultList } from './QuestionUserResultList';
import {
    QuestionUserResultListFromJSON,
    QuestionUserResultListFromJSONTyped,
    QuestionUserResultListToJSON,
} from './QuestionUserResultList';

/**
 * 問題成績
 * @export
 * @interface AppSchemasManageSessionsSessionQuestionResultListOutSessionQuestionResultListOut
 */
export interface AppSchemasManageSessionsSessionQuestionResultListOutSessionQuestionResultListOut {
    /**
     * セッション問題の登録順番
     * @type {number}
     * @memberof AppSchemasManageSessionsSessionQuestionResultListOutSessionQuestionResultListOut
     */
    sessionQuestionOrder: number;
    /**
     * 問題ID
     * @type {number}
     * @memberof AppSchemasManageSessionsSessionQuestionResultListOutSessionQuestionResultListOut
     */
    contentId: number;
    /**
     * 問題名
     * @type {string}
     * @memberof AppSchemasManageSessionsSessionQuestionResultListOutSessionQuestionResultListOut
     */
    questionTitle: string;
    /**
     * 
     * @type {number}
     * @memberof AppSchemasManageSessionsSessionQuestionResultListOutSessionQuestionResultListOut
     */
    questionDifficulty: number;
    /**
     * 
     * @type {string}
     * @memberof AppSchemasManageSessionsSessionQuestionResultListOutSessionQuestionResultListOut
     */
    contentCategoryName: string;
    /**
     * 
     * @type {string}
     * @memberof AppSchemasManageSessionsSessionQuestionResultListOutSessionQuestionResultListOut
     */
    contentTopicName: string;
    /**
     * 問題挑戦数
     * @type {number}
     * @memberof AppSchemasManageSessionsSessionQuestionResultListOutSessionQuestionResultListOut
     */
    questionTrialCount: number;
    /**
     * 問題合格数
     * @type {number}
     * @memberof AppSchemasManageSessionsSessionQuestionResultListOutSessionQuestionResultListOut
     */
    questionPassedCount: number;
    /**
     * 
     * @type {Array<QuestionUserResultList>}
     * @memberof AppSchemasManageSessionsSessionQuestionResultListOutSessionQuestionResultListOut
     */
    questionUserResultList: Array<QuestionUserResultList>;
}

/**
 * Check if a given object implements the AppSchemasManageSessionsSessionQuestionResultListOutSessionQuestionResultListOut interface.
 */
export function instanceOfAppSchemasManageSessionsSessionQuestionResultListOutSessionQuestionResultListOut(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "sessionQuestionOrder" in value;
    isInstance = isInstance && "contentId" in value;
    isInstance = isInstance && "questionTitle" in value;
    isInstance = isInstance && "questionDifficulty" in value;
    isInstance = isInstance && "contentCategoryName" in value;
    isInstance = isInstance && "contentTopicName" in value;
    isInstance = isInstance && "questionTrialCount" in value;
    isInstance = isInstance && "questionPassedCount" in value;
    isInstance = isInstance && "questionUserResultList" in value;

    return isInstance;
}

export function AppSchemasManageSessionsSessionQuestionResultListOutSessionQuestionResultListOutFromJSON(json: any): AppSchemasManageSessionsSessionQuestionResultListOutSessionQuestionResultListOut {
    return AppSchemasManageSessionsSessionQuestionResultListOutSessionQuestionResultListOutFromJSONTyped(json, false);
}

export function AppSchemasManageSessionsSessionQuestionResultListOutSessionQuestionResultListOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): AppSchemasManageSessionsSessionQuestionResultListOutSessionQuestionResultListOut {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'sessionQuestionOrder': json['sessionQuestionOrder'],
        'contentId': json['contentId'],
        'questionTitle': json['questionTitle'],
        'questionDifficulty': json['questionDifficulty'],
        'contentCategoryName': json['contentCategoryName'],
        'contentTopicName': json['contentTopicName'],
        'questionTrialCount': json['questionTrialCount'],
        'questionPassedCount': json['questionPassedCount'],
        'questionUserResultList': ((json['questionUserResultList'] as Array<any>).map(QuestionUserResultListFromJSON)),
    };
}

export function AppSchemasManageSessionsSessionQuestionResultListOutSessionQuestionResultListOutToJSON(value?: AppSchemasManageSessionsSessionQuestionResultListOutSessionQuestionResultListOut | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'sessionQuestionOrder': value.sessionQuestionOrder,
        'contentId': value.contentId,
        'questionTitle': value.questionTitle,
        'questionDifficulty': value.questionDifficulty,
        'contentCategoryName': value.contentCategoryName,
        'contentTopicName': value.contentTopicName,
        'questionTrialCount': value.questionTrialCount,
        'questionPassedCount': value.questionPassedCount,
        'questionUserResultList': ((value.questionUserResultList as Array<any>).map(QuestionUserResultListToJSON)),
    };
}

