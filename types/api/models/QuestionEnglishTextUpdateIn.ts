/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EnglishSampleCaseUpdateIn } from './EnglishSampleCaseUpdateIn';
import {
    EnglishSampleCaseUpdateInFromJSON,
    EnglishSampleCaseUpdateInFromJSONTyped,
    EnglishSampleCaseUpdateInToJSON,
} from './EnglishSampleCaseUpdateIn';

/**
 * 
 * @export
 * @interface QuestionEnglishTextUpdateIn
 */
export interface QuestionEnglishTextUpdateIn {
    /**
     * 英語問題文
     * @type {string}
     * @memberof QuestionEnglishTextUpdateIn
     */
    textEn?: string | null;
    /**
     * 英語問題タイトル
     * @type {string}
     * @memberof QuestionEnglishTextUpdateIn
     */
    titleEn?: string | null;
    /**
     * 
     * @type {Array<EnglishSampleCaseUpdateIn>}
     * @memberof QuestionEnglishTextUpdateIn
     */
    sampleCases?: Array<EnglishSampleCaseUpdateIn>;
}

/**
 * Check if a given object implements the QuestionEnglishTextUpdateIn interface.
 */
export function instanceOfQuestionEnglishTextUpdateIn(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function QuestionEnglishTextUpdateInFromJSON(json: any): QuestionEnglishTextUpdateIn {
    return QuestionEnglishTextUpdateInFromJSONTyped(json, false);
}

export function QuestionEnglishTextUpdateInFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuestionEnglishTextUpdateIn {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'textEn': !exists(json, 'textEn') ? undefined : json['textEn'],
        'titleEn': !exists(json, 'titleEn') ? undefined : json['titleEn'],
        'sampleCases': !exists(json, 'sampleCases') ? undefined : ((json['sampleCases'] as Array<any>).map(EnglishSampleCaseUpdateInFromJSON)),
    };
}

export function QuestionEnglishTextUpdateInToJSON(value?: QuestionEnglishTextUpdateIn | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'textEn': value.textEn,
        'titleEn': value.titleEn,
        'sampleCases': value.sampleCases === undefined ? undefined : ((value.sampleCases as Array<any>).map(EnglishSampleCaseUpdateInToJSON)),
    };
}

