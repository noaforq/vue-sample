/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ContentDivision } from './ContentDivision';
import {
    ContentDivisionFromJSON,
    ContentDivisionFromJSONTyped,
    ContentDivisionToJSON,
} from './ContentDivision';
import type { ContentOut } from './ContentOut';
import {
    ContentOutFromJSON,
    ContentOutFromJSONTyped,
    ContentOutToJSON,
} from './ContentOut';
import type { QuestionType } from './QuestionType';
import {
    QuestionTypeFromJSON,
    QuestionTypeFromJSONTyped,
    QuestionTypeToJSON,
} from './QuestionType';

/**
 * 
 * @export
 * @interface QuestionListDetailForSchoolOut
 */
export interface QuestionListDetailForSchoolOut {
    /**
     * 
     * @type {number}
     * @memberof QuestionListDetailForSchoolOut
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof QuestionListDetailForSchoolOut
     */
    contentCategoryName: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionListDetailForSchoolOut
     */
    contentTopicName: string;
    /**
     * 
     * @type {ContentDivision}
     * @memberof QuestionListDetailForSchoolOut
     */
    contentDivision: ContentDivision;
    /**
     * 
     * @type {string}
     * @memberof QuestionListDetailForSchoolOut
     */
    contentDivisionLabel: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof QuestionListDetailForSchoolOut
     */
    contentTagNames?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof QuestionListDetailForSchoolOut
     */
    title: string;
    /**
     * 
     * @type {number}
     * @memberof QuestionListDetailForSchoolOut
     */
    difficulty: number;
    /**
     * 
     * @type {string}
     * @memberof QuestionListDetailForSchoolOut
     */
    questionTypeLabel: string;
    /**
     * 
     * @type {QuestionType}
     * @memberof QuestionListDetailForSchoolOut
     */
    questionType: QuestionType;
    /**
     * 
     * @type {string}
     * @memberof QuestionListDetailForSchoolOut
     */
    templatePgLangName?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof QuestionListDetailForSchoolOut
     */
    isVerified: boolean;
    /**
     * 
     * @type {Date}
     * @memberof QuestionListDetailForSchoolOut
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof QuestionListDetailForSchoolOut
     */
    createdBy: string;
    /**
     * 
     * @type {Date}
     * @memberof QuestionListDetailForSchoolOut
     */
    updatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof QuestionListDetailForSchoolOut
     */
    updatedBy: string;
    /**
     * 
     * @type {boolean}
     * @memberof QuestionListDetailForSchoolOut
     */
    isPublished: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof QuestionListDetailForSchoolOut
     */
    isTranslated: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof QuestionListDetailForSchoolOut
     */
    isFavorite: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof QuestionListDetailForSchoolOut
     */
    isRefusedBrowsing: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof QuestionListDetailForSchoolOut
     */
    isSharedTestcase: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof QuestionListDetailForSchoolOut
     */
    showTestcaseToAnswerer: boolean;
    /**
     * 
     * @type {ContentOut}
     * @memberof QuestionListDetailForSchoolOut
     */
    content: ContentOut;
}

/**
 * Check if a given object implements the QuestionListDetailForSchoolOut interface.
 */
export function instanceOfQuestionListDetailForSchoolOut(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "contentCategoryName" in value;
    isInstance = isInstance && "contentTopicName" in value;
    isInstance = isInstance && "contentDivision" in value;
    isInstance = isInstance && "contentDivisionLabel" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "difficulty" in value;
    isInstance = isInstance && "questionTypeLabel" in value;
    isInstance = isInstance && "questionType" in value;
    isInstance = isInstance && "isVerified" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "createdBy" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "updatedBy" in value;
    isInstance = isInstance && "isPublished" in value;
    isInstance = isInstance && "isTranslated" in value;
    isInstance = isInstance && "isFavorite" in value;
    isInstance = isInstance && "isRefusedBrowsing" in value;
    isInstance = isInstance && "isSharedTestcase" in value;
    isInstance = isInstance && "showTestcaseToAnswerer" in value;
    isInstance = isInstance && "content" in value;

    return isInstance;
}

export function QuestionListDetailForSchoolOutFromJSON(json: any): QuestionListDetailForSchoolOut {
    return QuestionListDetailForSchoolOutFromJSONTyped(json, false);
}

export function QuestionListDetailForSchoolOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuestionListDetailForSchoolOut {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'contentCategoryName': json['contentCategoryName'],
        'contentTopicName': json['contentTopicName'],
        'contentDivision': ContentDivisionFromJSON(json['contentDivision']),
        'contentDivisionLabel': json['contentDivisionLabel'],
        'contentTagNames': !exists(json, 'contentTagNames') ? undefined : json['contentTagNames'],
        'title': json['title'],
        'difficulty': json['difficulty'],
        'questionTypeLabel': json['questionTypeLabel'],
        'questionType': QuestionTypeFromJSON(json['questionType']),
        'templatePgLangName': !exists(json, 'templatePgLangName') ? undefined : json['templatePgLangName'],
        'isVerified': json['isVerified'],
        'createdAt': (new Date(json['createdAt'])),
        'createdBy': json['createdBy'],
        'updatedAt': (new Date(json['updatedAt'])),
        'updatedBy': json['updatedBy'],
        'isPublished': json['isPublished'],
        'isTranslated': json['isTranslated'],
        'isFavorite': json['isFavorite'],
        'isRefusedBrowsing': json['isRefusedBrowsing'],
        'isSharedTestcase': json['isSharedTestcase'],
        'showTestcaseToAnswerer': json['showTestcaseToAnswerer'],
        'content': ContentOutFromJSON(json['content']),
    };
}

export function QuestionListDetailForSchoolOutToJSON(value?: QuestionListDetailForSchoolOut | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'contentCategoryName': value.contentCategoryName,
        'contentTopicName': value.contentTopicName,
        'contentDivision': ContentDivisionToJSON(value.contentDivision),
        'contentDivisionLabel': value.contentDivisionLabel,
        'contentTagNames': value.contentTagNames,
        'title': value.title,
        'difficulty': value.difficulty,
        'questionTypeLabel': value.questionTypeLabel,
        'questionType': QuestionTypeToJSON(value.questionType),
        'templatePgLangName': value.templatePgLangName,
        'isVerified': value.isVerified,
        'createdAt': (value.createdAt.toISOString()),
        'createdBy': value.createdBy,
        'updatedAt': (value.updatedAt.toISOString()),
        'updatedBy': value.updatedBy,
        'isPublished': value.isPublished,
        'isTranslated': value.isTranslated,
        'isFavorite': value.isFavorite,
        'isRefusedBrowsing': value.isRefusedBrowsing,
        'isSharedTestcase': value.isSharedTestcase,
        'showTestcaseToAnswerer': value.showTestcaseToAnswerer,
        'content': ContentOutToJSON(value.content),
    };
}

