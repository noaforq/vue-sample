/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AppSchemasGeneralSessionsTechthonTechthonPortfolioOutTechthonPortfolioOut
 */
export interface AppSchemasGeneralSessionsTechthonTechthonPortfolioOutTechthonPortfolioOut {
    /**
     * アカウント名
     * @type {string}
     * @memberof AppSchemasGeneralSessionsTechthonTechthonPortfolioOutTechthonPortfolioOut
     */
    username: string;
    /**
     * 表示名
     * @type {string}
     * @memberof AppSchemasGeneralSessionsTechthonTechthonPortfolioOutTechthonPortfolioOut
     */
    displayName: string;
    /**
     * チーム名(チーム戦の場合のみ)
     * @type {string}
     * @memberof AppSchemasGeneralSessionsTechthonTechthonPortfolioOutTechthonPortfolioOut
     */
    teamName: string | null;
    /**
     * ユーザコメント
     * @type {string}
     * @memberof AppSchemasGeneralSessionsTechthonTechthonPortfolioOutTechthonPortfolioOut
     */
    comment: string;
    /**
     * 使用pg言語の名前
     * @type {Array<string>}
     * @memberof AppSchemasGeneralSessionsTechthonTechthonPortfolioOutTechthonPortfolioOut
     */
    usedPgLangs: Array<string>;
    /**
     * 使用フレームワークの名前
     * @type {Array<string>}
     * @memberof AppSchemasGeneralSessionsTechthonTechthonPortfolioOutTechthonPortfolioOut
     */
    usedFrameworks: Array<string>;
    /**
     * 合計ミドルウェアスコア
     * @type {number}
     * @memberof AppSchemasGeneralSessionsTechthonTechthonPortfolioOutTechthonPortfolioOut
     */
    totalMiddleWareScore: number;
    /**
     * 合計OSスコア
     * @type {number}
     * @memberof AppSchemasGeneralSessionsTechthonTechthonPortfolioOutTechthonPortfolioOut
     */
    totalOsScore: number;
    /**
     * 合計ネットワークスコア
     * @type {number}
     * @memberof AppSchemasGeneralSessionsTechthonTechthonPortfolioOutTechthonPortfolioOut
     */
    totalNetworkScore: number;
    /**
     * 合計セキュリティスコア
     * @type {number}
     * @memberof AppSchemasGeneralSessionsTechthonTechthonPortfolioOutTechthonPortfolioOut
     */
    totalSecurityScore: number;
    /**
     * 合計スコア
     * @type {number}
     * @memberof AppSchemasGeneralSessionsTechthonTechthonPortfolioOutTechthonPortfolioOut
     */
    totalScore: number;
    /**
     * 最大合計ミドルウェアスコア
     * @type {number}
     * @memberof AppSchemasGeneralSessionsTechthonTechthonPortfolioOutTechthonPortfolioOut
     */
    maxTotalMiddleWareScore: number;
    /**
     * 最大合計OSスコア
     * @type {number}
     * @memberof AppSchemasGeneralSessionsTechthonTechthonPortfolioOutTechthonPortfolioOut
     */
    maxTotalOsScore: number;
    /**
     * 最大合計ネットワークスコア
     * @type {number}
     * @memberof AppSchemasGeneralSessionsTechthonTechthonPortfolioOutTechthonPortfolioOut
     */
    maxTotalNetworkScore: number;
    /**
     * 最大合計セキュリティスコア
     * @type {number}
     * @memberof AppSchemasGeneralSessionsTechthonTechthonPortfolioOutTechthonPortfolioOut
     */
    maxTotalSecurityScore: number;
    /**
     * 最大合計スコア
     * @type {number}
     * @memberof AppSchemasGeneralSessionsTechthonTechthonPortfolioOutTechthonPortfolioOut
     */
    maxTotalScore: number;
}

/**
 * Check if a given object implements the AppSchemasGeneralSessionsTechthonTechthonPortfolioOutTechthonPortfolioOut interface.
 */
export function instanceOfAppSchemasGeneralSessionsTechthonTechthonPortfolioOutTechthonPortfolioOut(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "username" in value;
    isInstance = isInstance && "displayName" in value;
    isInstance = isInstance && "teamName" in value;
    isInstance = isInstance && "comment" in value;
    isInstance = isInstance && "usedPgLangs" in value;
    isInstance = isInstance && "usedFrameworks" in value;
    isInstance = isInstance && "totalMiddleWareScore" in value;
    isInstance = isInstance && "totalOsScore" in value;
    isInstance = isInstance && "totalNetworkScore" in value;
    isInstance = isInstance && "totalSecurityScore" in value;
    isInstance = isInstance && "totalScore" in value;
    isInstance = isInstance && "maxTotalMiddleWareScore" in value;
    isInstance = isInstance && "maxTotalOsScore" in value;
    isInstance = isInstance && "maxTotalNetworkScore" in value;
    isInstance = isInstance && "maxTotalSecurityScore" in value;
    isInstance = isInstance && "maxTotalScore" in value;

    return isInstance;
}

export function AppSchemasGeneralSessionsTechthonTechthonPortfolioOutTechthonPortfolioOutFromJSON(json: any): AppSchemasGeneralSessionsTechthonTechthonPortfolioOutTechthonPortfolioOut {
    return AppSchemasGeneralSessionsTechthonTechthonPortfolioOutTechthonPortfolioOutFromJSONTyped(json, false);
}

export function AppSchemasGeneralSessionsTechthonTechthonPortfolioOutTechthonPortfolioOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): AppSchemasGeneralSessionsTechthonTechthonPortfolioOutTechthonPortfolioOut {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'username': json['username'],
        'displayName': json['displayName'],
        'teamName': json['teamName'],
        'comment': json['comment'],
        'usedPgLangs': json['usedPgLangs'],
        'usedFrameworks': json['usedFrameworks'],
        'totalMiddleWareScore': json['totalMiddleWareScore'],
        'totalOsScore': json['totalOsScore'],
        'totalNetworkScore': json['totalNetworkScore'],
        'totalSecurityScore': json['totalSecurityScore'],
        'totalScore': json['totalScore'],
        'maxTotalMiddleWareScore': json['maxTotalMiddleWareScore'],
        'maxTotalOsScore': json['maxTotalOsScore'],
        'maxTotalNetworkScore': json['maxTotalNetworkScore'],
        'maxTotalSecurityScore': json['maxTotalSecurityScore'],
        'maxTotalScore': json['maxTotalScore'],
    };
}

export function AppSchemasGeneralSessionsTechthonTechthonPortfolioOutTechthonPortfolioOutToJSON(value?: AppSchemasGeneralSessionsTechthonTechthonPortfolioOutTechthonPortfolioOut | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'username': value.username,
        'displayName': value.displayName,
        'teamName': value.teamName,
        'comment': value.comment,
        'usedPgLangs': value.usedPgLangs,
        'usedFrameworks': value.usedFrameworks,
        'totalMiddleWareScore': value.totalMiddleWareScore,
        'totalOsScore': value.totalOsScore,
        'totalNetworkScore': value.totalNetworkScore,
        'totalSecurityScore': value.totalSecurityScore,
        'totalScore': value.totalScore,
        'maxTotalMiddleWareScore': value.maxTotalMiddleWareScore,
        'maxTotalOsScore': value.maxTotalOsScore,
        'maxTotalNetworkScore': value.maxTotalNetworkScore,
        'maxTotalSecurityScore': value.maxTotalSecurityScore,
        'maxTotalScore': value.maxTotalScore,
    };
}

