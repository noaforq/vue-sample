/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ContentPackageDetailContentOut } from './ContentPackageDetailContentOut';
import {
    ContentPackageDetailContentOutFromJSON,
    ContentPackageDetailContentOutFromJSONTyped,
    ContentPackageDetailContentOutToJSON,
} from './ContentPackageDetailContentOut';
import type { ContentPackageLevel } from './ContentPackageLevel';
import {
    ContentPackageLevelFromJSON,
    ContentPackageLevelFromJSONTyped,
    ContentPackageLevelToJSON,
} from './ContentPackageLevel';

/**
 * 
 * @export
 * @interface ContentPackageDetailOut
 */
export interface ContentPackageDetailOut {
    /**
     * 
     * @type {number}
     * @memberof ContentPackageDetailOut
     */
    id: number;
    /**
     * 
     * @type {Date}
     * @memberof ContentPackageDetailOut
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof ContentPackageDetailOut
     */
    updatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof ContentPackageDetailOut
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof ContentPackageDetailOut
     */
    description: string;
    /**
     * 
     * @type {ContentPackageLevel}
     * @memberof ContentPackageDetailOut
     */
    contentPackageLevel: ContentPackageLevel;
    /**
     * 
     * @type {string}
     * @memberof ContentPackageDetailOut
     */
    contentPackageLevelLabel: string;
    /**
     * 
     * @type {string}
     * @memberof ContentPackageDetailOut
     */
    memo: string;
    /**
     * 
     * @type {boolean}
     * @memberof ContentPackageDetailOut
     */
    isCompanyPackage: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ContentPackageDetailOut
     */
    isSchoolPackage: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ContentPackageDetailOut
     */
    isPublished: boolean;
    /**
     * 
     * @type {Array<ContentPackageDetailContentOut>}
     * @memberof ContentPackageDetailOut
     */
    questions: Array<ContentPackageDetailContentOut>;
}

/**
 * Check if a given object implements the ContentPackageDetailOut interface.
 */
export function instanceOfContentPackageDetailOut(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "contentPackageLevel" in value;
    isInstance = isInstance && "contentPackageLevelLabel" in value;
    isInstance = isInstance && "memo" in value;
    isInstance = isInstance && "isCompanyPackage" in value;
    isInstance = isInstance && "isSchoolPackage" in value;
    isInstance = isInstance && "isPublished" in value;
    isInstance = isInstance && "questions" in value;

    return isInstance;
}

export function ContentPackageDetailOutFromJSON(json: any): ContentPackageDetailOut {
    return ContentPackageDetailOutFromJSONTyped(json, false);
}

export function ContentPackageDetailOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContentPackageDetailOut {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'title': json['title'],
        'description': json['description'],
        'contentPackageLevel': ContentPackageLevelFromJSON(json['contentPackageLevel']),
        'contentPackageLevelLabel': json['contentPackageLevelLabel'],
        'memo': json['memo'],
        'isCompanyPackage': json['isCompanyPackage'],
        'isSchoolPackage': json['isSchoolPackage'],
        'isPublished': json['isPublished'],
        'questions': ((json['questions'] as Array<any>).map(ContentPackageDetailContentOutFromJSON)),
    };
}

export function ContentPackageDetailOutToJSON(value?: ContentPackageDetailOut | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': (value.updatedAt.toISOString()),
        'title': value.title,
        'description': value.description,
        'contentPackageLevel': ContentPackageLevelToJSON(value.contentPackageLevel),
        'contentPackageLevelLabel': value.contentPackageLevelLabel,
        'memo': value.memo,
        'isCompanyPackage': value.isCompanyPackage,
        'isSchoolPackage': value.isSchoolPackage,
        'isPublished': value.isPublished,
        'questions': ((value.questions as Array<any>).map(ContentPackageDetailContentOutToJSON)),
    };
}

