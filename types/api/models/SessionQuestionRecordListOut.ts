/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { QuestionResultStatus } from './QuestionResultStatus';
import {
    QuestionResultStatusFromJSON,
    QuestionResultStatusFromJSONTyped,
    QuestionResultStatusToJSON,
} from './QuestionResultStatus';
import type { QuestionType } from './QuestionType';
import {
    QuestionTypeFromJSON,
    QuestionTypeFromJSONTyped,
    QuestionTypeToJSON,
} from './QuestionType';

/**
 * 問題毎のセッション成績
 * - 表示条件
 *     PG   : 選択式問題のみの場合非表示
 *     S    : 選択式問題のみの場合非表示
 *     CE   : 選択式問題のみの場合非表示
 *     AT(s): スタッフ、企業主催イベント
 *     APT  : スタッフ、企業主催イベント
 *     T    : 学校イベント
 *     E    : 学校イベント
 *     PT   : 学校イベント
 *     PTR  : 選択式問題のみの場合非表示
 * @export
 * @interface SessionQuestionRecordListOut
 */
export interface SessionQuestionRecordListOut {
    /**
     * ユーザーID
     * @type {number}
     * @memberof SessionQuestionRecordListOut
     */
    userId: number;
    /**
     * ユーザー名(アカウント名)
     * @type {string}
     * @memberof SessionQuestionRecordListOut
     */
    userName: string;
    /**
     * ユーザー表示名
     * @type {string}
     * @memberof SessionQuestionRecordListOut
     */
    userDisplayName?: string | null;
    /**
     * ユーザー本名
     * @type {string}
     * @memberof SessionQuestionRecordListOut
     */
    userRealName?: string | null;
    /**
     * 補足情報
     * @type {string}
     * @memberof SessionQuestionRecordListOut
     */
    extraInfo?: string | null;
    /**
     * 所属名
     * @type {string}
     * @memberof SessionQuestionRecordListOut
     */
    organizationName?: string | null;
    /**
     * 学籍番号
     * @type {string}
     * @memberof SessionQuestionRecordListOut
     */
    studentNumber?: string | null;
    /**
     * 順位
     * @type {number}
     * @memberof SessionQuestionRecordListOut
     */
    order: number;
    /**
     * 問題回答成績ID
     * @type {number}
     * @memberof SessionQuestionRecordListOut
     */
    questionResultId: number;
    /**
     * 問題ID
     * @type {number}
     * @memberof SessionQuestionRecordListOut
     */
    questionId: number;
    /**
     * 問題名
     * @type {string}
     * @memberof SessionQuestionRecordListOut
     */
    questionName: string;
    /**
     * 
     * @type {QuestionType}
     * @memberof SessionQuestionRecordListOut
     */
    questionType: QuestionType;
    /**
     * セッション名
     * @type {string}
     * @memberof SessionQuestionRecordListOut
     */
    sessionName: string;
    /**
     * 
     * @type {QuestionResultStatus}
     * @memberof SessionQuestionRecordListOut
     */
    status: QuestionResultStatus;
    /**
     * PG:プログラミング言語：成績使用提出の言語
     * @type {number}
     * @memberof SessionQuestionRecordListOut
     */
    pgLang?: number | null;
    /**
     * S : スコア
     * @type {number}
     * @memberof SessionQuestionRecordListOut
     */
    score?: number | null;
    /**
     * C : コード提出回数 : 成績使用提出に至るまでのコード提出数
     * @type {number}
     * @memberof SessionQuestionRecordListOut
     */
    submissionCodeCount: number;
    /**
     * CE : 成績使用提出に至るまでのコンパイルエラー数
     * @type {number}
     * @memberof SessionQuestionRecordListOut
     */
    compileErrorCount?: number | null;
    /**
     * AT : 成績使用提出の実行秒数 スタッフ・企業主催イベントのみ表示
     * @type {number}
     * @memberof SessionQuestionRecordListOut
     */
    averageExecutionTime?: number | null;
    /**
     * APT : 成績使用提出に至るまでの経過時間
     * @type {Date}
     * @memberof SessionQuestionRecordListOut
     */
    averagePassedTime?: Date | null;
    /**
     * T : 解答開始時間
     * @type {Date}
     * @memberof SessionQuestionRecordListOut
     */
    answerStartedAt?: Date | null;
    /**
     * E : 解答終了時間
     * @type {Date}
     * @memberof SessionQuestionRecordListOut
     */
    answerFinishedAt?: Date | null;
    /**
     * PT : 解答経過時間
     * @type {Date}
     * @memberof SessionQuestionRecordListOut
     */
    answerPassedTime?: Date | null;
    /**
     * PTRで使用: 成績使用提出の合格テストケース数
     * @type {number}
     * @memberof SessionQuestionRecordListOut
     */
    passedTestCaseCount?: number | null;
    /**
     * PTRで使用: その問題のテストケース数
     * @type {number}
     * @memberof SessionQuestionRecordListOut
     */
    allTestCaseCount?: number | null;
}

/**
 * Check if a given object implements the SessionQuestionRecordListOut interface.
 */
export function instanceOfSessionQuestionRecordListOut(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "userId" in value;
    isInstance = isInstance && "userName" in value;
    isInstance = isInstance && "order" in value;
    isInstance = isInstance && "questionResultId" in value;
    isInstance = isInstance && "questionId" in value;
    isInstance = isInstance && "questionName" in value;
    isInstance = isInstance && "questionType" in value;
    isInstance = isInstance && "sessionName" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "submissionCodeCount" in value;

    return isInstance;
}

export function SessionQuestionRecordListOutFromJSON(json: any): SessionQuestionRecordListOut {
    return SessionQuestionRecordListOutFromJSONTyped(json, false);
}

export function SessionQuestionRecordListOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): SessionQuestionRecordListOut {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'userId': json['userId'],
        'userName': json['userName'],
        'userDisplayName': !exists(json, 'userDisplayName') ? undefined : json['userDisplayName'],
        'userRealName': !exists(json, 'userRealName') ? undefined : json['userRealName'],
        'extraInfo': !exists(json, 'extraInfo') ? undefined : json['extraInfo'],
        'organizationName': !exists(json, 'organizationName') ? undefined : json['organizationName'],
        'studentNumber': !exists(json, 'studentNumber') ? undefined : json['studentNumber'],
        'order': json['order'],
        'questionResultId': json['questionResultId'],
        'questionId': json['questionId'],
        'questionName': json['questionName'],
        'questionType': QuestionTypeFromJSON(json['questionType']),
        'sessionName': json['sessionName'],
        'status': QuestionResultStatusFromJSON(json['status']),
        'pgLang': !exists(json, 'pgLang') ? undefined : json['pgLang'],
        'score': !exists(json, 'score') ? undefined : json['score'],
        'submissionCodeCount': json['submissionCodeCount'],
        'compileErrorCount': !exists(json, 'compileErrorCount') ? undefined : json['compileErrorCount'],
        'averageExecutionTime': !exists(json, 'averageExecutionTime') ? undefined : json['averageExecutionTime'],
        'averagePassedTime': !exists(json, 'averagePassedTime') ? undefined : (json['averagePassedTime'] === null ? null : new Date(json['averagePassedTime'])),
        'answerStartedAt': !exists(json, 'answerStartedAt') ? undefined : (json['answerStartedAt'] === null ? null : new Date(json['answerStartedAt'])),
        'answerFinishedAt': !exists(json, 'answerFinishedAt') ? undefined : (json['answerFinishedAt'] === null ? null : new Date(json['answerFinishedAt'])),
        'answerPassedTime': !exists(json, 'answerPassedTime') ? undefined : (json['answerPassedTime'] === null ? null : new Date(json['answerPassedTime'])),
        'passedTestCaseCount': !exists(json, 'passedTestCaseCount') ? undefined : json['passedTestCaseCount'],
        'allTestCaseCount': !exists(json, 'allTestCaseCount') ? undefined : json['allTestCaseCount'],
    };
}

export function SessionQuestionRecordListOutToJSON(value?: SessionQuestionRecordListOut | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'userId': value.userId,
        'userName': value.userName,
        'userDisplayName': value.userDisplayName,
        'userRealName': value.userRealName,
        'extraInfo': value.extraInfo,
        'organizationName': value.organizationName,
        'studentNumber': value.studentNumber,
        'order': value.order,
        'questionResultId': value.questionResultId,
        'questionId': value.questionId,
        'questionName': value.questionName,
        'questionType': QuestionTypeToJSON(value.questionType),
        'sessionName': value.sessionName,
        'status': QuestionResultStatusToJSON(value.status),
        'pgLang': value.pgLang,
        'score': value.score,
        'submissionCodeCount': value.submissionCodeCount,
        'compileErrorCount': value.compileErrorCount,
        'averageExecutionTime': value.averageExecutionTime,
        'averagePassedTime': value.averagePassedTime === undefined ? undefined : (value.averagePassedTime === null ? null : value.averagePassedTime.toISOString()),
        'answerStartedAt': value.answerStartedAt === undefined ? undefined : (value.answerStartedAt === null ? null : value.answerStartedAt.toISOString()),
        'answerFinishedAt': value.answerFinishedAt === undefined ? undefined : (value.answerFinishedAt === null ? null : value.answerFinishedAt.toISOString()),
        'answerPassedTime': value.answerPassedTime === undefined ? undefined : (value.answerPassedTime === null ? null : value.answerPassedTime.toISOString()),
        'passedTestCaseCount': value.passedTestCaseCount,
        'allTestCaseCount': value.allTestCaseCount,
    };
}

