/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Codingquestionresult } from './Codingquestionresult';
import {
    CodingquestionresultFromJSON,
    CodingquestionresultFromJSONTyped,
    CodingquestionresultToJSON,
} from './Codingquestionresult';
import type { QuestionBlankResultOut } from './QuestionBlankResultOut';
import {
    QuestionBlankResultOutFromJSON,
    QuestionBlankResultOutFromJSONTyped,
    QuestionBlankResultOutToJSON,
} from './QuestionBlankResultOut';
import type { QuestionChoiceResultOut } from './QuestionChoiceResultOut';
import {
    QuestionChoiceResultOutFromJSON,
    QuestionChoiceResultOutFromJSONTyped,
    QuestionChoiceResultOutToJSON,
} from './QuestionChoiceResultOut';
import type { QuestionDetail } from './QuestionDetail';
import {
    QuestionDetailFromJSON,
    QuestionDetailFromJSONTyped,
    QuestionDetailToJSON,
} from './QuestionDetail';
import type { Sessioninfo } from './Sessioninfo';
import {
    SessioninfoFromJSON,
    SessioninfoFromJSONTyped,
    SessioninfoToJSON,
} from './Sessioninfo';
import type { UserInfo } from './UserInfo';
import {
    UserInfoFromJSON,
    UserInfoFromJSONTyped,
    UserInfoToJSON,
} from './UserInfo';

/**
 * 
 * @export
 * @interface UserPortFolioCodeOut
 */
export interface UserPortFolioCodeOut {
    /**
     * 
     * @type {Codingquestionresult}
     * @memberof UserPortFolioCodeOut
     */
    codingQuestionResult?: Codingquestionresult | null;
    /**
     * 空欄問題の合格結果
     * @type {Array<QuestionBlankResultOut>}
     * @memberof UserPortFolioCodeOut
     */
    blankQuestionResult?: Array<QuestionBlankResultOut>;
    /**
     * 選択問題の合格結果
     * @type {Array<QuestionChoiceResultOut>}
     * @memberof UserPortFolioCodeOut
     */
    choiceQuestionResult?: Array<QuestionChoiceResultOut>;
    /**
     * 
     * @type {QuestionDetail}
     * @memberof UserPortFolioCodeOut
     */
    questionDetail: QuestionDetail;
    /**
     * 
     * @type {UserInfo}
     * @memberof UserPortFolioCodeOut
     */
    userInfo: UserInfo;
    /**
     * 
     * @type {Sessioninfo}
     * @memberof UserPortFolioCodeOut
     */
    sessionInfo?: Sessioninfo | null;
}

/**
 * Check if a given object implements the UserPortFolioCodeOut interface.
 */
export function instanceOfUserPortFolioCodeOut(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "questionDetail" in value;
    isInstance = isInstance && "userInfo" in value;

    return isInstance;
}

export function UserPortFolioCodeOutFromJSON(json: any): UserPortFolioCodeOut {
    return UserPortFolioCodeOutFromJSONTyped(json, false);
}

export function UserPortFolioCodeOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserPortFolioCodeOut {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'codingQuestionResult': !exists(json, 'codingQuestionResult') ? undefined : CodingquestionresultFromJSON(json['codingQuestionResult']),
        'blankQuestionResult': !exists(json, 'blankQuestionResult') ? undefined : ((json['blankQuestionResult'] as Array<any>).map(QuestionBlankResultOutFromJSON)),
        'choiceQuestionResult': !exists(json, 'choiceQuestionResult') ? undefined : ((json['choiceQuestionResult'] as Array<any>).map(QuestionChoiceResultOutFromJSON)),
        'questionDetail': QuestionDetailFromJSON(json['questionDetail']),
        'userInfo': UserInfoFromJSON(json['userInfo']),
        'sessionInfo': !exists(json, 'sessionInfo') ? undefined : SessioninfoFromJSON(json['sessionInfo']),
    };
}

export function UserPortFolioCodeOutToJSON(value?: UserPortFolioCodeOut | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'codingQuestionResult': CodingquestionresultToJSON(value.codingQuestionResult),
        'blankQuestionResult': value.blankQuestionResult === undefined ? undefined : ((value.blankQuestionResult as Array<any>).map(QuestionBlankResultOutToJSON)),
        'choiceQuestionResult': value.choiceQuestionResult === undefined ? undefined : ((value.choiceQuestionResult as Array<any>).map(QuestionChoiceResultOutToJSON)),
        'questionDetail': QuestionDetailToJSON(value.questionDetail),
        'userInfo': UserInfoToJSON(value.userInfo),
        'sessionInfo': SessioninfoToJSON(value.sessionInfo),
    };
}

