/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SessionSubmitCodeHistoryOut
 */
export interface SessionSubmitCodeHistoryOut {
    /**
     * セッション問題ID
     * @type {number}
     * @memberof SessionSubmitCodeHistoryOut
     */
    contentId: number;
    /**
     * 問題名
     * @type {string}
     * @memberof SessionSubmitCodeHistoryOut
     */
    questionTitle: string;
    /**
     * 解答プログラミング言語
     * @type {string}
     * @memberof SessionSubmitCodeHistoryOut
     */
    pgLangName: string;
    /**
     * 最長実行時間(ms)
     * @type {number}
     * @memberof SessionSubmitCodeHistoryOut
     */
    elapsedTimeForExecution: number;
    /**
     * 通過したテストケース数
     * @type {number}
     * @memberof SessionSubmitCodeHistoryOut
     */
    passedTestCaseCount: number;
    /**
     * 総テストケース数
     * @type {number}
     * @memberof SessionSubmitCodeHistoryOut
     */
    totalTestCaseCount: number;
    /**
     * 全ケース通過か
     * @type {boolean}
     * @memberof SessionSubmitCodeHistoryOut
     */
    isPassedTotalCases: boolean;
    /**
     * 合計得点
     * @type {number}
     * @memberof SessionSubmitCodeHistoryOut
     */
    totalScore: number;
    /**
     * 基礎点
     * @type {number}
     * @memberof SessionSubmitCodeHistoryOut
     */
    basicScore: number;
    /**
     * 合格ボーナス点
     * @type {number}
     * @memberof SessionSubmitCodeHistoryOut
     */
    passBonusScore: number;
    /**
     * タイムボーナス点
     * @type {number}
     * @memberof SessionSubmitCodeHistoryOut
     */
    timeBonusScore: number;
    /**
     * 解答所要時間
     * @type {string}
     * @memberof SessionSubmitCodeHistoryOut
     */
    requiredTimeToAnswer: string;
    /**
     * 成績使用提出か
     * @type {boolean}
     * @memberof SessionSubmitCodeHistoryOut
     */
    isUsedForResult: boolean;
    /**
     * 問題テスト実行結果ID
     * @type {number}
     * @memberof SessionSubmitCodeHistoryOut
     */
    questionTestResultId: number;
}

/**
 * Check if a given object implements the SessionSubmitCodeHistoryOut interface.
 */
export function instanceOfSessionSubmitCodeHistoryOut(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "contentId" in value;
    isInstance = isInstance && "questionTitle" in value;
    isInstance = isInstance && "pgLangName" in value;
    isInstance = isInstance && "elapsedTimeForExecution" in value;
    isInstance = isInstance && "passedTestCaseCount" in value;
    isInstance = isInstance && "totalTestCaseCount" in value;
    isInstance = isInstance && "isPassedTotalCases" in value;
    isInstance = isInstance && "totalScore" in value;
    isInstance = isInstance && "basicScore" in value;
    isInstance = isInstance && "passBonusScore" in value;
    isInstance = isInstance && "timeBonusScore" in value;
    isInstance = isInstance && "requiredTimeToAnswer" in value;
    isInstance = isInstance && "isUsedForResult" in value;
    isInstance = isInstance && "questionTestResultId" in value;

    return isInstance;
}

export function SessionSubmitCodeHistoryOutFromJSON(json: any): SessionSubmitCodeHistoryOut {
    return SessionSubmitCodeHistoryOutFromJSONTyped(json, false);
}

export function SessionSubmitCodeHistoryOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): SessionSubmitCodeHistoryOut {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'contentId': json['contentId'],
        'questionTitle': json['questionTitle'],
        'pgLangName': json['pgLangName'],
        'elapsedTimeForExecution': json['elapsedTimeForExecution'],
        'passedTestCaseCount': json['passedTestCaseCount'],
        'totalTestCaseCount': json['totalTestCaseCount'],
        'isPassedTotalCases': json['isPassedTotalCases'],
        'totalScore': json['totalScore'],
        'basicScore': json['basicScore'],
        'passBonusScore': json['passBonusScore'],
        'timeBonusScore': json['timeBonusScore'],
        'requiredTimeToAnswer': json['requiredTimeToAnswer'],
        'isUsedForResult': json['isUsedForResult'],
        'questionTestResultId': json['questionTestResultId'],
    };
}

export function SessionSubmitCodeHistoryOutToJSON(value?: SessionSubmitCodeHistoryOut | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'contentId': value.contentId,
        'questionTitle': value.questionTitle,
        'pgLangName': value.pgLangName,
        'elapsedTimeForExecution': value.elapsedTimeForExecution,
        'passedTestCaseCount': value.passedTestCaseCount,
        'totalTestCaseCount': value.totalTestCaseCount,
        'isPassedTotalCases': value.isPassedTotalCases,
        'totalScore': value.totalScore,
        'basicScore': value.basicScore,
        'passBonusScore': value.passBonusScore,
        'timeBonusScore': value.timeBonusScore,
        'requiredTimeToAnswer': value.requiredTimeToAnswer,
        'isUsedForResult': value.isUsedForResult,
        'questionTestResultId': value.questionTestResultId,
    };
}

