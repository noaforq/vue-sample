/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MeOrganizationOut } from './MeOrganizationOut';
import {
    MeOrganizationOutFromJSON,
    MeOrganizationOutFromJSONTyped,
    MeOrganizationOutToJSON,
} from './MeOrganizationOut';
import type { Permission } from './Permission';
import {
    PermissionFromJSON,
    PermissionFromJSONTyped,
    PermissionToJSON,
} from './Permission';
import type { UserType } from './UserType';
import {
    UserTypeFromJSON,
    UserTypeFromJSONTyped,
    UserTypeToJSON,
} from './UserType';

/**
 * 
 * @export
 * @interface MeOut
 */
export interface MeOut {
    /**
     * ユーザーID
     * @type {number}
     * @memberof MeOut
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof MeOut
     */
    username: string;
    /**
     * 姓
     * @type {string}
     * @memberof MeOut
     */
    lastName: string;
    /**
     * 名
     * @type {string}
     * @memberof MeOut
     */
    firstName: string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof MeOut
     */
    email: string;
    /**
     * アイコンURL
     * @type {string}
     * @memberof MeOut
     */
    icon: string;
    /**
     * 
     * @type {UserType}
     * @memberof MeOut
     */
    userType: UserType;
    /**
     * チャット未読件数
     * @type {number}
     * @memberof MeOut
     */
    unreadChatCount: number;
    /**
     * 一般ユーザープロフィール必須項目入力済みか
     * @type {boolean}
     * @memberof MeOut
     */
    isEnteredRequiredItems: boolean | null;
    /**
     * 
     * @type {MeOrganizationOut}
     * @memberof MeOut
     */
    organization?: MeOrganizationOut | null;
    /**
     * ユーザー権限
     * @type {Array<Permission>}
     * @memberof MeOut
     */
    permissions: Array<Permission>;
    /**
     * ユーザーロール
     * @type {Array<string>}
     * @memberof MeOut
     */
    userRoles: Array<string>;
}

/**
 * Check if a given object implements the MeOut interface.
 */
export function instanceOfMeOut(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "username" in value;
    isInstance = isInstance && "lastName" in value;
    isInstance = isInstance && "firstName" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "icon" in value;
    isInstance = isInstance && "userType" in value;
    isInstance = isInstance && "unreadChatCount" in value;
    isInstance = isInstance && "isEnteredRequiredItems" in value;
    isInstance = isInstance && "permissions" in value;
    isInstance = isInstance && "userRoles" in value;

    return isInstance;
}

export function MeOutFromJSON(json: any): MeOut {
    return MeOutFromJSONTyped(json, false);
}

export function MeOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): MeOut {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'username': json['username'],
        'lastName': json['lastName'],
        'firstName': json['firstName'],
        'email': json['email'],
        'icon': json['icon'],
        'userType': UserTypeFromJSON(json['userType']),
        'unreadChatCount': json['unreadChatCount'],
        'isEnteredRequiredItems': json['isEnteredRequiredItems'],
        'organization': !exists(json, 'organization') ? undefined : MeOrganizationOutFromJSON(json['organization']),
        'permissions': ((json['permissions'] as Array<any>).map(PermissionFromJSON)),
        'userRoles': json['userRoles'],
    };
}

export function MeOutToJSON(value?: MeOut | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'username': value.username,
        'lastName': value.lastName,
        'firstName': value.firstName,
        'email': value.email,
        'icon': value.icon,
        'userType': UserTypeToJSON(value.userType),
        'unreadChatCount': value.unreadChatCount,
        'isEnteredRequiredItems': value.isEnteredRequiredItems,
        'organization': MeOrganizationOutToJSON(value.organization),
        'permissions': ((value.permissions as Array<any>).map(PermissionToJSON)),
        'userRoles': value.userRoles,
    };
}

