/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProJudgeStatus } from './ProJudgeStatus';
import {
    ProJudgeStatusFromJSON,
    ProJudgeStatusFromJSONTyped,
    ProJudgeStatusToJSON,
} from './ProJudgeStatus';

/**
 * 
 * @export
 * @interface ScoringProOut
 */
export interface ScoringProOut {
    /**
     * スコア
     * @type {number}
     * @memberof ScoringProOut
     */
    score: number;
    /**
     * 
     * @type {ProJudgeStatus}
     * @memberof ScoringProOut
     */
    status: ProJudgeStatus;
    /**
     * エラーメッセージ
     * @type {string}
     * @memberof ScoringProOut
     */
    errorMessage: string;
    /**
     * 送信側識別用文字列
     * @type {string}
     * @memberof ScoringProOut
     */
    judgeType: string;
    /**
     * 送信側識別用数値
     * @type {string}
     * @memberof ScoringProOut
     */
    judgeCode: string;
}

/**
 * Check if a given object implements the ScoringProOut interface.
 */
export function instanceOfScoringProOut(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "score" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "errorMessage" in value;
    isInstance = isInstance && "judgeType" in value;
    isInstance = isInstance && "judgeCode" in value;

    return isInstance;
}

export function ScoringProOutFromJSON(json: any): ScoringProOut {
    return ScoringProOutFromJSONTyped(json, false);
}

export function ScoringProOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScoringProOut {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'score': json['score'],
        'status': ProJudgeStatusFromJSON(json['status']),
        'errorMessage': json['errorMessage'],
        'judgeType': json['judgeType'],
        'judgeCode': json['judgeCode'],
    };
}

export function ScoringProOutToJSON(value?: ScoringProOut | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'score': value.score,
        'status': ProJudgeStatusToJSON(value.status),
        'errorMessage': value.errorMessage,
        'judgeType': value.judgeType,
        'judgeCode': value.judgeCode,
    };
}

