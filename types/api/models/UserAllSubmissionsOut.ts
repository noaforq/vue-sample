/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UserQuestionResultOut } from './UserQuestionResultOut';
import {
    UserQuestionResultOutFromJSON,
    UserQuestionResultOutFromJSONTyped,
    UserQuestionResultOutToJSON,
} from './UserQuestionResultOut';

/**
 * 
 * @export
 * @interface UserAllSubmissionsOut
 */
export interface UserAllSubmissionsOut {
    /**
     * 総提出数
     * @type {number}
     * @memberof UserAllSubmissionsOut
     */
    totalCount: number;
    /**
     * 次のページがあるか
     * @type {boolean}
     * @memberof UserAllSubmissionsOut
     */
    hasNext: boolean;
    /**
     * 前のページがあるか
     * @type {boolean}
     * @memberof UserAllSubmissionsOut
     */
    hasPrevious: boolean;
    /**
     * ユーザーID
     * @type {number}
     * @memberof UserAllSubmissionsOut
     */
    userId: number;
    /**
     * ユーザー名
     * @type {string}
     * @memberof UserAllSubmissionsOut
     */
    username: string;
    /**
     * 提出履歴
     * @type {Array<UserQuestionResultOut>}
     * @memberof UserAllSubmissionsOut
     */
    submissionList: Array<UserQuestionResultOut>;
}

/**
 * Check if a given object implements the UserAllSubmissionsOut interface.
 */
export function instanceOfUserAllSubmissionsOut(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "totalCount" in value;
    isInstance = isInstance && "hasNext" in value;
    isInstance = isInstance && "hasPrevious" in value;
    isInstance = isInstance && "userId" in value;
    isInstance = isInstance && "username" in value;
    isInstance = isInstance && "submissionList" in value;

    return isInstance;
}

export function UserAllSubmissionsOutFromJSON(json: any): UserAllSubmissionsOut {
    return UserAllSubmissionsOutFromJSONTyped(json, false);
}

export function UserAllSubmissionsOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserAllSubmissionsOut {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'totalCount': json['totalCount'],
        'hasNext': json['hasNext'],
        'hasPrevious': json['hasPrevious'],
        'userId': json['userId'],
        'username': json['username'],
        'submissionList': ((json['submissionList'] as Array<any>).map(UserQuestionResultOutFromJSON)),
    };
}

export function UserAllSubmissionsOutToJSON(value?: UserAllSubmissionsOut | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'totalCount': value.totalCount,
        'hasNext': value.hasNext,
        'hasPrevious': value.hasPrevious,
        'userId': value.userId,
        'username': value.username,
        'submissionList': ((value.submissionList as Array<any>).map(UserQuestionResultOutToJSON)),
    };
}

