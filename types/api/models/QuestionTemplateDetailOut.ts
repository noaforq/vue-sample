/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { QuestionTemplateInvalidLineDetailOut } from './QuestionTemplateInvalidLineDetailOut';
import {
    QuestionTemplateInvalidLineDetailOutFromJSON,
    QuestionTemplateInvalidLineDetailOutFromJSONTyped,
    QuestionTemplateInvalidLineDetailOutToJSON,
} from './QuestionTemplateInvalidLineDetailOut';

/**
 * 
 * @export
 * @interface QuestionTemplateDetailOut
 */
export interface QuestionTemplateDetailOut {
    /**
     * ソースコード
     * @type {string}
     * @memberof QuestionTemplateDetailOut
     */
    sourceCode: string;
    /**
     * エラー出力
     * @type {string}
     * @memberof QuestionTemplateDetailOut
     */
    errorOutput: string;
    /**
     * ジャッジステータス
     * @type {number}
     * @memberof QuestionTemplateDetailOut
     */
    judgeStatus?: number | null;
    /**
     * 
     * @type {number}
     * @memberof QuestionTemplateDetailOut
     */
    pgLangId: number;
    /**
     * 
     * @type {Array<QuestionTemplateInvalidLineDetailOut>}
     * @memberof QuestionTemplateDetailOut
     */
    questionTemplateInvalidLines: Array<QuestionTemplateInvalidLineDetailOut>;
}

/**
 * Check if a given object implements the QuestionTemplateDetailOut interface.
 */
export function instanceOfQuestionTemplateDetailOut(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "sourceCode" in value;
    isInstance = isInstance && "errorOutput" in value;
    isInstance = isInstance && "pgLangId" in value;
    isInstance = isInstance && "questionTemplateInvalidLines" in value;

    return isInstance;
}

export function QuestionTemplateDetailOutFromJSON(json: any): QuestionTemplateDetailOut {
    return QuestionTemplateDetailOutFromJSONTyped(json, false);
}

export function QuestionTemplateDetailOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuestionTemplateDetailOut {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'sourceCode': json['sourceCode'],
        'errorOutput': json['errorOutput'],
        'judgeStatus': !exists(json, 'judgeStatus') ? undefined : json['judgeStatus'],
        'pgLangId': json['pgLangId'],
        'questionTemplateInvalidLines': ((json['questionTemplateInvalidLines'] as Array<any>).map(QuestionTemplateInvalidLineDetailOutFromJSON)),
    };
}

export function QuestionTemplateDetailOutToJSON(value?: QuestionTemplateDetailOut | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'sourceCode': value.sourceCode,
        'errorOutput': value.errorOutput,
        'judgeStatus': value.judgeStatus,
        'pgLangId': value.pgLangId,
        'questionTemplateInvalidLines': ((value.questionTemplateInvalidLines as Array<any>).map(QuestionTemplateInvalidLineDetailOutToJSON)),
    };
}

