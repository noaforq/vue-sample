/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { QuestionAnswerResult } from './QuestionAnswerResult';
import {
    QuestionAnswerResultFromJSON,
    QuestionAnswerResultFromJSONTyped,
    QuestionAnswerResultToJSON,
} from './QuestionAnswerResult';

/**
 * 
 * @export
 * @interface UserCodeCheckSubmissionOut
 */
export interface UserCodeCheckSubmissionOut {
    /**
     * QuestionTestResult ID
     * @type {number}
     * @memberof UserCodeCheckSubmissionOut
     */
    id: number;
    /**
     * 
     * @type {QuestionAnswerResult}
     * @memberof UserCodeCheckSubmissionOut
     */
    questionAnswerResult: QuestionAnswerResult;
    /**
     * 使用言語(name)
     * @type {string}
     * @memberof UserCodeCheckSubmissionOut
     */
    pgLang: string;
    /**
     * スコア
     * @type {number}
     * @memberof UserCodeCheckSubmissionOut
     */
    totalScore: number;
    /**
     * ソースコード
     * @type {string}
     * @memberof UserCodeCheckSubmissionOut
     */
    sourceCode: string;
    /**
     * 解答日時(QuestionTestResult作成日時)
     * @type {Date}
     * @memberof UserCodeCheckSubmissionOut
     */
    submissionDatetime: Date;
}

/**
 * Check if a given object implements the UserCodeCheckSubmissionOut interface.
 */
export function instanceOfUserCodeCheckSubmissionOut(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "questionAnswerResult" in value;
    isInstance = isInstance && "pgLang" in value;
    isInstance = isInstance && "totalScore" in value;
    isInstance = isInstance && "sourceCode" in value;
    isInstance = isInstance && "submissionDatetime" in value;

    return isInstance;
}

export function UserCodeCheckSubmissionOutFromJSON(json: any): UserCodeCheckSubmissionOut {
    return UserCodeCheckSubmissionOutFromJSONTyped(json, false);
}

export function UserCodeCheckSubmissionOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserCodeCheckSubmissionOut {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'questionAnswerResult': QuestionAnswerResultFromJSON(json['questionAnswerResult']),
        'pgLang': json['pgLang'],
        'totalScore': json['totalScore'],
        'sourceCode': json['sourceCode'],
        'submissionDatetime': (new Date(json['submissionDatetime'])),
    };
}

export function UserCodeCheckSubmissionOutToJSON(value?: UserCodeCheckSubmissionOut | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'questionAnswerResult': QuestionAnswerResultToJSON(value.questionAnswerResult),
        'pgLang': value.pgLang,
        'totalScore': value.totalScore,
        'sourceCode': value.sourceCode,
        'submissionDatetime': (value.submissionDatetime.toISOString()),
    };
}

