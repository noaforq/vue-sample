/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ChatRoomType } from './ChatRoomType';
import {
    ChatRoomTypeFromJSON,
    ChatRoomTypeFromJSONTyped,
    ChatRoomTypeToJSON,
} from './ChatRoomType';

/**
 * 
 * @export
 * @interface GeneralChatRoomListDetailOut
 */
export interface GeneralChatRoomListDetailOut {
    /**
     * チャットルームID
     * @type {number}
     * @memberof GeneralChatRoomListDetailOut
     */
    id: number;
    /**
     * ユーザーアイコン画像URL
     * @type {string}
     * @memberof GeneralChatRoomListDetailOut
     */
    icon: string;
    /**
     * チャットルーム名
     * @type {string}
     * @memberof GeneralChatRoomListDetailOut
     */
    roomName: string;
    /**
     * サブチャットルーム名
     * @type {string}
     * @memberof GeneralChatRoomListDetailOut
     */
    subRoomName: string;
    /**
     * チャット相手の種類
     * @type {string}
     * @memberof GeneralChatRoomListDetailOut
     */
    chatPartnerType: string;
    /**
     * 未読数
     * @type {number}
     * @memberof GeneralChatRoomListDetailOut
     */
    unreadCount: number;
    /**
     * 最終更新日時
     * @type {Date}
     * @memberof GeneralChatRoomListDetailOut
     */
    lastSendTime: Date;
    /**
     * 
     * @type {ChatRoomType}
     * @memberof GeneralChatRoomListDetailOut
     */
    chatRoomType: ChatRoomType;
    /**
     * スカウトを受け取るユーザーか
     * @type {boolean}
     * @memberof GeneralChatRoomListDetailOut
     */
    receiveScouts?: boolean | null;
    /**
     * チャットルーム組織ID
     * @type {number}
     * @memberof GeneralChatRoomListDetailOut
     */
    organizationId: number;
}

/**
 * Check if a given object implements the GeneralChatRoomListDetailOut interface.
 */
export function instanceOfGeneralChatRoomListDetailOut(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "icon" in value;
    isInstance = isInstance && "roomName" in value;
    isInstance = isInstance && "subRoomName" in value;
    isInstance = isInstance && "chatPartnerType" in value;
    isInstance = isInstance && "unreadCount" in value;
    isInstance = isInstance && "lastSendTime" in value;
    isInstance = isInstance && "chatRoomType" in value;
    isInstance = isInstance && "organizationId" in value;

    return isInstance;
}

export function GeneralChatRoomListDetailOutFromJSON(json: any): GeneralChatRoomListDetailOut {
    return GeneralChatRoomListDetailOutFromJSONTyped(json, false);
}

export function GeneralChatRoomListDetailOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): GeneralChatRoomListDetailOut {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'icon': json['icon'],
        'roomName': json['roomName'],
        'subRoomName': json['subRoomName'],
        'chatPartnerType': json['chatPartnerType'],
        'unreadCount': json['unreadCount'],
        'lastSendTime': (new Date(json['lastSendTime'])),
        'chatRoomType': ChatRoomTypeFromJSON(json['chatRoomType']),
        'receiveScouts': !exists(json, 'receiveScouts') ? undefined : json['receiveScouts'],
        'organizationId': json['organizationId'],
    };
}

export function GeneralChatRoomListDetailOutToJSON(value?: GeneralChatRoomListDetailOut | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'icon': value.icon,
        'roomName': value.roomName,
        'subRoomName': value.subRoomName,
        'chatPartnerType': value.chatPartnerType,
        'unreadCount': value.unreadCount,
        'lastSendTime': (value.lastSendTime.toISOString()),
        'chatRoomType': ChatRoomTypeToJSON(value.chatRoomType),
        'receiveScouts': value.receiveScouts,
        'organizationId': value.organizationId,
    };
}

