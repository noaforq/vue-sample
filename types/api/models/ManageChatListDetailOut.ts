/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ChatType } from './ChatType';
import {
    ChatTypeFromJSON,
    ChatTypeFromJSONTyped,
    ChatTypeToJSON,
} from './ChatType';
import type { ManageChatListFileOut } from './ManageChatListFileOut';
import {
    ManageChatListFileOutFromJSON,
    ManageChatListFileOutFromJSONTyped,
    ManageChatListFileOutToJSON,
} from './ManageChatListFileOut';

/**
 * 
 * @export
 * @interface ManageChatListDetailOut
 */
export interface ManageChatListDetailOut {
    /**
     * チャットID
     * @type {number}
     * @memberof ManageChatListDetailOut
     */
    id: number;
    /**
     * 作成日時
     * @type {Date}
     * @memberof ManageChatListDetailOut
     */
    createdAt: Date;
    /**
     * 
     * @type {ChatType}
     * @memberof ManageChatListDetailOut
     */
    chatType: ChatType;
    /**
     * メッセージ
     * @type {string}
     * @memberof ManageChatListDetailOut
     */
    message: string;
    /**
     * 既読
     * @type {boolean}
     * @memberof ManageChatListDetailOut
     */
    isRead: boolean;
    /**
     * 自身のチャットか
     * @type {boolean}
     * @memberof ManageChatListDetailOut
     */
    isOwn: boolean;
    /**
     * チャット送信者の名前
     * @type {string}
     * @memberof ManageChatListDetailOut
     */
    sender: string;
    /**
     * チャット送信者のアイコン
     * @type {string}
     * @memberof ManageChatListDetailOut
     */
    icon: string;
    /**
     * 
     * @type {ManageChatListFileOut}
     * @memberof ManageChatListDetailOut
     */
    file?: ManageChatListFileOut | null;
}

/**
 * Check if a given object implements the ManageChatListDetailOut interface.
 */
export function instanceOfManageChatListDetailOut(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "chatType" in value;
    isInstance = isInstance && "message" in value;
    isInstance = isInstance && "isRead" in value;
    isInstance = isInstance && "isOwn" in value;
    isInstance = isInstance && "sender" in value;
    isInstance = isInstance && "icon" in value;

    return isInstance;
}

export function ManageChatListDetailOutFromJSON(json: any): ManageChatListDetailOut {
    return ManageChatListDetailOutFromJSONTyped(json, false);
}

export function ManageChatListDetailOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): ManageChatListDetailOut {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['createdAt'])),
        'chatType': ChatTypeFromJSON(json['chatType']),
        'message': json['message'],
        'isRead': json['isRead'],
        'isOwn': json['isOwn'],
        'sender': json['sender'],
        'icon': json['icon'],
        'file': !exists(json, 'file') ? undefined : ManageChatListFileOutFromJSON(json['file']),
    };
}

export function ManageChatListDetailOutToJSON(value?: ManageChatListDetailOut | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'createdAt': (value.createdAt.toISOString()),
        'chatType': ChatTypeToJSON(value.chatType),
        'message': value.message,
        'isRead': value.isRead,
        'isOwn': value.isOwn,
        'sender': value.sender,
        'icon': value.icon,
        'file': ManageChatListFileOutToJSON(value.file),
    };
}

