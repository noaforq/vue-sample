/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { QuestionType } from './QuestionType';
import {
    QuestionTypeFromJSON,
    QuestionTypeFromJSONTyped,
    QuestionTypeToJSON,
} from './QuestionType';

/**
 * ユーザー毎のセッション成績
 * - 表示条件
 *     S    : 選択式問題のみの場合非表示
 *     AS    : 選択式問題のみの場合非表示
 *     CE   : 選択式問題のみの場合非表示
 *     AT(s): スタッフ、企業主催イベント
 *     APT  : スタッフ、企業主催イベント
 *     T    : 学校イベント
 *     E    : 学校イベント
 *     PT   : 学校イベント
 *     PTR  : 選択式問題のみの場合非表示
 * @export
 * @interface SessionQuestionRecordPerUserListOut
 */
export interface SessionQuestionRecordPerUserListOut {
    /**
     * 順位
     * @type {number}
     * @memberof SessionQuestionRecordPerUserListOut
     */
    order: number;
    /**
     * 学籍番号
     * @type {string}
     * @memberof SessionQuestionRecordPerUserListOut
     */
    studentNumber: string;
    /**
     * ユーザーID
     * @type {number}
     * @memberof SessionQuestionRecordPerUserListOut
     */
    userId: number;
    /**
     * ユーザー名(アカウント名)
     * @type {string}
     * @memberof SessionQuestionRecordPerUserListOut
     */
    userName: string;
    /**
     * ユーザー本名
     * @type {string}
     * @memberof SessionQuestionRecordPerUserListOut
     */
    userRealName: string;
    /**
     * 補足情報
     * @type {string}
     * @memberof SessionQuestionRecordPerUserListOut
     */
    extraInfo: string;
    /**
     * 所属名
     * @type {string}
     * @memberof SessionQuestionRecordPerUserListOut
     */
    organizationName: string;
    /**
     * セッション名
     * @type {string}
     * @memberof SessionQuestionRecordPerUserListOut
     */
    sessionName: string;
    /**
     * 
     * @type {QuestionType}
     * @memberof SessionQuestionRecordPerUserListOut
     */
    questionType: QuestionType;
    /**
     * S : スコア
     * @type {number}
     * @memberof SessionQuestionRecordPerUserListOut
     */
    score?: number | null;
    /**
     * AS 問題ごと平均スコア
     * @type {number}
     * @memberof SessionQuestionRecordPerUserListOut
     */
    averageScore?: number | null;
    /**
     * C : 問題挑戦回数 : 成績使用提出に至るまでのコード提出数
     * @type {number}
     * @memberof SessionQuestionRecordPerUserListOut
     */
    submissionCodeCount: number;
    /**
     * P : 問題正解回数
     * @type {number}
     * @memberof SessionQuestionRecordPerUserListOut
     */
    passedCount?: number | null;
    /**
     * CE : 成績使用提出に至るまでのコンパイルエラー数
     * @type {number}
     * @memberof SessionQuestionRecordPerUserListOut
     */
    compileErrorCount?: number | null;
    /**
     * AT : 成績使用提出の実行秒数 スタッフ・企業主催イベントのみ表示
     * @type {number}
     * @memberof SessionQuestionRecordPerUserListOut
     */
    averageExecutionTime?: number | null;
    /**
     * APT : 成績使用提出に至るまでの経過時間
     * @type {string}
     * @memberof SessionQuestionRecordPerUserListOut
     */
    averagePassedTime?: string | null;
    /**
     * T : 解答開始時間
     * @type {Date}
     * @memberof SessionQuestionRecordPerUserListOut
     */
    answerStartedAt?: Date | null;
    /**
     * E : 解答終了時間
     * @type {Date}
     * @memberof SessionQuestionRecordPerUserListOut
     */
    answerFinishedAt?: Date | null;
    /**
     * PR: 正解率
     * @type {string}
     * @memberof SessionQuestionRecordPerUserListOut
     */
    passedAnswerRate?: string | null;
    /**
     * PTRで使用: 成績使用提出の合格テストケース数
     * @type {number}
     * @memberof SessionQuestionRecordPerUserListOut
     */
    passedTestCaseCount?: number | null;
    /**
     * PTRで使用: その問題のテストケース数
     * @type {number}
     * @memberof SessionQuestionRecordPerUserListOut
     */
    allTestCaseCount?: number | null;
}

/**
 * Check if a given object implements the SessionQuestionRecordPerUserListOut interface.
 */
export function instanceOfSessionQuestionRecordPerUserListOut(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "order" in value;
    isInstance = isInstance && "studentNumber" in value;
    isInstance = isInstance && "userId" in value;
    isInstance = isInstance && "userName" in value;
    isInstance = isInstance && "userRealName" in value;
    isInstance = isInstance && "extraInfo" in value;
    isInstance = isInstance && "organizationName" in value;
    isInstance = isInstance && "sessionName" in value;
    isInstance = isInstance && "questionType" in value;
    isInstance = isInstance && "submissionCodeCount" in value;

    return isInstance;
}

export function SessionQuestionRecordPerUserListOutFromJSON(json: any): SessionQuestionRecordPerUserListOut {
    return SessionQuestionRecordPerUserListOutFromJSONTyped(json, false);
}

export function SessionQuestionRecordPerUserListOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): SessionQuestionRecordPerUserListOut {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'order': json['order'],
        'studentNumber': json['studentNumber'],
        'userId': json['userId'],
        'userName': json['userName'],
        'userRealName': json['userRealName'],
        'extraInfo': json['extraInfo'],
        'organizationName': json['organizationName'],
        'sessionName': json['sessionName'],
        'questionType': QuestionTypeFromJSON(json['questionType']),
        'score': !exists(json, 'score') ? undefined : json['score'],
        'averageScore': !exists(json, 'averageScore') ? undefined : json['averageScore'],
        'submissionCodeCount': json['submissionCodeCount'],
        'passedCount': !exists(json, 'passedCount') ? undefined : json['passedCount'],
        'compileErrorCount': !exists(json, 'compileErrorCount') ? undefined : json['compileErrorCount'],
        'averageExecutionTime': !exists(json, 'averageExecutionTime') ? undefined : json['averageExecutionTime'],
        'averagePassedTime': !exists(json, 'averagePassedTime') ? undefined : json['averagePassedTime'],
        'answerStartedAt': !exists(json, 'answerStartedAt') ? undefined : (json['answerStartedAt'] === null ? null : new Date(json['answerStartedAt'])),
        'answerFinishedAt': !exists(json, 'answerFinishedAt') ? undefined : (json['answerFinishedAt'] === null ? null : new Date(json['answerFinishedAt'])),
        'passedAnswerRate': !exists(json, 'passedAnswerRate') ? undefined : json['passedAnswerRate'],
        'passedTestCaseCount': !exists(json, 'passedTestCaseCount') ? undefined : json['passedTestCaseCount'],
        'allTestCaseCount': !exists(json, 'allTestCaseCount') ? undefined : json['allTestCaseCount'],
    };
}

export function SessionQuestionRecordPerUserListOutToJSON(value?: SessionQuestionRecordPerUserListOut | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'order': value.order,
        'studentNumber': value.studentNumber,
        'userId': value.userId,
        'userName': value.userName,
        'userRealName': value.userRealName,
        'extraInfo': value.extraInfo,
        'organizationName': value.organizationName,
        'sessionName': value.sessionName,
        'questionType': QuestionTypeToJSON(value.questionType),
        'score': value.score,
        'averageScore': value.averageScore,
        'submissionCodeCount': value.submissionCodeCount,
        'passedCount': value.passedCount,
        'compileErrorCount': value.compileErrorCount,
        'averageExecutionTime': value.averageExecutionTime,
        'averagePassedTime': value.averagePassedTime,
        'answerStartedAt': value.answerStartedAt === undefined ? undefined : (value.answerStartedAt === null ? null : value.answerStartedAt.toISOString()),
        'answerFinishedAt': value.answerFinishedAt === undefined ? undefined : (value.answerFinishedAt === null ? null : value.answerFinishedAt.toISOString()),
        'passedAnswerRate': value.passedAnswerRate,
        'passedTestCaseCount': value.passedTestCaseCount,
        'allTestCaseCount': value.allTestCaseCount,
    };
}

