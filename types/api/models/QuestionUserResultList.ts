/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * ユーザー毎の成績一覧(問題成績詳細)
 * @export
 * @interface QuestionUserResultList
 */
export interface QuestionUserResultList {
    /**
     * 参加者ユーザーID
     * @type {number}
     * @memberof QuestionUserResultList
     */
    id: number;
    /**
     * 参加者アカウント名
     * @type {string}
     * @memberof QuestionUserResultList
     */
    userName: string;
    /**
     * 学籍番号
     * @type {string}
     * @memberof QuestionUserResultList
     */
    studentNumber?: string;
    /**
     * 参加者本名
     * @type {string}
     * @memberof QuestionUserResultList
     */
    userRealName?: string;
    /**
     * 参加者表示名
     * @type {string}
     * @memberof QuestionUserResultList
     */
    displayName?: string;
    /**
     * 補足情報
     * @type {string}
     * @memberof QuestionUserResultList
     */
    extraInfo?: string;
    /**
     * スコア
     * @type {number}
     * @memberof QuestionUserResultList
     */
    score: number;
    /**
     * 提出回数
     * @type {number}
     * @memberof QuestionUserResultList
     */
    submitCount: number;
    /**
     * エラー回数
     * @type {number}
     * @memberof QuestionUserResultList
     */
    failedCount: number;
    /**
     * 目標時間内に合格
     * @type {boolean}
     * @memberof QuestionUserResultList
     */
    isPassedInTime: boolean;
    /**
     * 合格したか
     * @type {boolean}
     * @memberof QuestionUserResultList
     */
    isPassed: boolean;
    /**
     * 解答開始日時,問題解答成績の作成日時(created_at)
     * @type {Date}
     * @memberof QuestionUserResultList
     */
    answerStartAt: Date;
}

/**
 * Check if a given object implements the QuestionUserResultList interface.
 */
export function instanceOfQuestionUserResultList(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "userName" in value;
    isInstance = isInstance && "score" in value;
    isInstance = isInstance && "submitCount" in value;
    isInstance = isInstance && "failedCount" in value;
    isInstance = isInstance && "isPassedInTime" in value;
    isInstance = isInstance && "isPassed" in value;
    isInstance = isInstance && "answerStartAt" in value;

    return isInstance;
}

export function QuestionUserResultListFromJSON(json: any): QuestionUserResultList {
    return QuestionUserResultListFromJSONTyped(json, false);
}

export function QuestionUserResultListFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuestionUserResultList {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'userName': json['userName'],
        'studentNumber': !exists(json, 'studentNumber') ? undefined : json['studentNumber'],
        'userRealName': !exists(json, 'userRealName') ? undefined : json['userRealName'],
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
        'extraInfo': !exists(json, 'extraInfo') ? undefined : json['extraInfo'],
        'score': json['score'],
        'submitCount': json['submitCount'],
        'failedCount': json['failedCount'],
        'isPassedInTime': json['isPassedInTime'],
        'isPassed': json['isPassed'],
        'answerStartAt': (new Date(json['answerStartAt'])),
    };
}

export function QuestionUserResultListToJSON(value?: QuestionUserResultList | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'userName': value.userName,
        'studentNumber': value.studentNumber,
        'userRealName': value.userRealName,
        'displayName': value.displayName,
        'extraInfo': value.extraInfo,
        'score': value.score,
        'submitCount': value.submitCount,
        'failedCount': value.failedCount,
        'isPassedInTime': value.isPassedInTime,
        'isPassed': value.isPassed,
        'answerStartAt': (value.answerStartAt.toISOString()),
    };
}

