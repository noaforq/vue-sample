/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SessionStatus } from './SessionStatus';
import {
    SessionStatusFromJSON,
    SessionStatusFromJSONTyped,
    SessionStatusToJSON,
} from './SessionStatus';

/**
 * 
 * @export
 * @interface SessionListOut
 */
export interface SessionListOut {
    /**
     * セッションID
     * @type {number}
     * @memberof SessionListOut
     */
    id: number;
    /**
     * セッション名
     * @type {string}
     * @memberof SessionListOut
     */
    name: string;
    /**
     * セッション開始日時
     * @type {Date}
     * @memberof SessionListOut
     */
    startsAt: Date;
    /**
     * セッション終了日時
     * @type {Date}
     * @memberof SessionListOut
     */
    endsAt: Date;
    /**
     * 
     * @type {SessionStatus}
     * @memberof SessionListOut
     */
    sessionStatus: SessionStatus;
    /**
     * 
     * @type {string}
     * @memberof SessionListOut
     */
    sessionStatusLabel: string;
    /**
     * セッション参加人数
     * @type {number}
     * @memberof SessionListOut
     */
    sessionUserCount: number;
    /**
     * セッションがアクティブか
     * @type {boolean}
     * @memberof SessionListOut
     */
    isActive: boolean;
    /**
     * セッションが練習用セッションか
     * @type {boolean}
     * @memberof SessionListOut
     */
    isPracticeSession: boolean;
    /**
     * セッションが小テストセッションか
     * @type {boolean}
     * @memberof SessionListOut
     */
    isShortTestSession: boolean;
    /**
     * イベントID
     * @type {number}
     * @memberof SessionListOut
     */
    eventId: number;
    /**
     * イベント名
     * @type {string}
     * @memberof SessionListOut
     */
    eventName: string;
    /**
     * 作成組織名
     * @type {string}
     * @memberof SessionListOut
     */
    createdByOrg: string;
    /**
     * 作成日時
     * @type {Date}
     * @memberof SessionListOut
     */
    createdAt: Date;
    /**
     * 作成者
     * @type {string}
     * @memberof SessionListOut
     */
    createdBy: string;
}

/**
 * Check if a given object implements the SessionListOut interface.
 */
export function instanceOfSessionListOut(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "startsAt" in value;
    isInstance = isInstance && "endsAt" in value;
    isInstance = isInstance && "sessionStatus" in value;
    isInstance = isInstance && "sessionStatusLabel" in value;
    isInstance = isInstance && "sessionUserCount" in value;
    isInstance = isInstance && "isActive" in value;
    isInstance = isInstance && "isPracticeSession" in value;
    isInstance = isInstance && "isShortTestSession" in value;
    isInstance = isInstance && "eventId" in value;
    isInstance = isInstance && "eventName" in value;
    isInstance = isInstance && "createdByOrg" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "createdBy" in value;

    return isInstance;
}

export function SessionListOutFromJSON(json: any): SessionListOut {
    return SessionListOutFromJSONTyped(json, false);
}

export function SessionListOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): SessionListOut {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'startsAt': (new Date(json['startsAt'])),
        'endsAt': (new Date(json['endsAt'])),
        'sessionStatus': SessionStatusFromJSON(json['sessionStatus']),
        'sessionStatusLabel': json['sessionStatusLabel'],
        'sessionUserCount': json['sessionUserCount'],
        'isActive': json['isActive'],
        'isPracticeSession': json['isPracticeSession'],
        'isShortTestSession': json['isShortTestSession'],
        'eventId': json['eventId'],
        'eventName': json['eventName'],
        'createdByOrg': json['createdByOrg'],
        'createdAt': (new Date(json['createdAt'])),
        'createdBy': json['createdBy'],
    };
}

export function SessionListOutToJSON(value?: SessionListOut | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'startsAt': (value.startsAt.toISOString()),
        'endsAt': (value.endsAt.toISOString()),
        'sessionStatus': SessionStatusToJSON(value.sessionStatus),
        'sessionStatusLabel': value.sessionStatusLabel,
        'sessionUserCount': value.sessionUserCount,
        'isActive': value.isActive,
        'isPracticeSession': value.isPracticeSession,
        'isShortTestSession': value.isShortTestSession,
        'eventId': value.eventId,
        'eventName': value.eventName,
        'createdByOrg': value.createdByOrg,
        'createdAt': (value.createdAt.toISOString()),
        'createdBy': value.createdBy,
    };
}

