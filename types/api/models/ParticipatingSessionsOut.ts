/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ParticipatingSessionsOut
 */
export interface ParticipatingSessionsOut {
    /**
     * セッションID
     * @type {number}
     * @memberof ParticipatingSessionsOut
     */
    id: number;
    /**
     * セッション名
     * @type {string}
     * @memberof ParticipatingSessionsOut
     */
    name: string;
    /**
     * セッション名(英語)
     * @type {string}
     * @memberof ParticipatingSessionsOut
     */
    nameEn?: string;
    /**
     * 開始日時
     * @type {Date}
     * @memberof ParticipatingSessionsOut
     */
    startsAt: Date;
    /**
     * 終了日時
     * @type {Date}
     * @memberof ParticipatingSessionsOut
     */
    endsAt: Date;
    /**
     * 企業名
     * @type {string}
     * @memberof ParticipatingSessionsOut
     */
    companyName: string;
    /**
     * イベントイメージ
     * @type {string}
     * @memberof ParticipatingSessionsOut
     */
    eventImage: string;
    /**
     * セッションコード
     * @type {string}
     * @memberof ParticipatingSessionsOut
     */
    sessionCode: string;
}

/**
 * Check if a given object implements the ParticipatingSessionsOut interface.
 */
export function instanceOfParticipatingSessionsOut(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "startsAt" in value;
    isInstance = isInstance && "endsAt" in value;
    isInstance = isInstance && "companyName" in value;
    isInstance = isInstance && "eventImage" in value;
    isInstance = isInstance && "sessionCode" in value;

    return isInstance;
}

export function ParticipatingSessionsOutFromJSON(json: any): ParticipatingSessionsOut {
    return ParticipatingSessionsOutFromJSONTyped(json, false);
}

export function ParticipatingSessionsOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): ParticipatingSessionsOut {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'nameEn': !exists(json, 'nameEn') ? undefined : json['nameEn'],
        'startsAt': (new Date(json['startsAt'])),
        'endsAt': (new Date(json['endsAt'])),
        'companyName': json['companyName'],
        'eventImage': json['eventImage'],
        'sessionCode': json['sessionCode'],
    };
}

export function ParticipatingSessionsOutToJSON(value?: ParticipatingSessionsOut | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'nameEn': value.nameEn,
        'startsAt': (value.startsAt.toISOString()),
        'endsAt': (value.endsAt.toISOString()),
        'companyName': value.companyName,
        'eventImage': value.eventImage,
        'sessionCode': value.sessionCode,
    };
}

