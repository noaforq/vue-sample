/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TermType } from './TermType';
import {
    TermTypeFromJSON,
    TermTypeFromJSONTyped,
    TermTypeToJSON,
} from './TermType';

/**
 * 
 * @export
 * @interface TermCommonDetailOut
 */
export interface TermCommonDetailOut {
    /**
     * 
     * @type {number}
     * @memberof TermCommonDetailOut
     */
    id: number;
    /**
     * 
     * @type {Date}
     * @memberof TermCommonDetailOut
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof TermCommonDetailOut
     */
    updatedAt: Date;
    /**
     * 
     * @type {TermType}
     * @memberof TermCommonDetailOut
     */
    termType: TermType;
    /**
     * 
     * @type {string}
     * @memberof TermCommonDetailOut
     */
    contentLc: string;
    /**
     * 
     * @type {number}
     * @memberof TermCommonDetailOut
     */
    version: number;
}

/**
 * Check if a given object implements the TermCommonDetailOut interface.
 */
export function instanceOfTermCommonDetailOut(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "termType" in value;
    isInstance = isInstance && "contentLc" in value;
    isInstance = isInstance && "version" in value;

    return isInstance;
}

export function TermCommonDetailOutFromJSON(json: any): TermCommonDetailOut {
    return TermCommonDetailOutFromJSONTyped(json, false);
}

export function TermCommonDetailOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): TermCommonDetailOut {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'termType': TermTypeFromJSON(json['termType']),
        'contentLc': json['contentLc'],
        'version': json['version'],
    };
}

export function TermCommonDetailOutToJSON(value?: TermCommonDetailOut | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': (value.updatedAt.toISOString()),
        'termType': TermTypeToJSON(value.termType),
        'contentLc': value.contentLc,
        'version': value.version,
    };
}

