/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SessionType } from './SessionType';
import {
    SessionTypeFromJSON,
    SessionTypeFromJSONTyped,
    SessionTypeToJSON,
} from './SessionType';

/**
 * 
 * @export
 * @interface TechthonSessionIn
 */
export interface TechthonSessionIn {
    /**
     * セッション名
     * @type {string}
     * @memberof TechthonSessionIn
     */
    name: string;
    /**
     * セッション開始日時
     * @type {Date}
     * @memberof TechthonSessionIn
     */
    startsAt: Date;
    /**
     * セッション終了日時
     * @type {Date}
     * @memberof TechthonSessionIn
     */
    endsAt: Date;
    /**
     * 開催場所
     * @type {string}
     * @memberof TechthonSessionIn
     */
    location?: string;
    /**
     * 
     * @type {SessionType}
     * @memberof TechthonSessionIn
     */
    sessionType: SessionType;
    /**
     * パスワード付きセッションか
     * @type {boolean}
     * @memberof TechthonSessionIn
     */
    isLockedSession?: boolean;
    /**
     * 練習用セッションか
     * @type {boolean}
     * @memberof TechthonSessionIn
     */
    isPracticeSession?: boolean;
    /**
     * 小テストセッション
     * @type {boolean}
     * @memberof TechthonSessionIn
     */
    isShortTestSession?: boolean;
    /**
     * 何位までランキング表示するか
     * @type {number}
     * @memberof TechthonSessionIn
     */
    maxNumOfRanking?: number | null;
    /**
     * 制限対象の卒業年度(最小値)
     * @type {number}
     * @memberof TechthonSessionIn
     */
    minGraduationYearOfRestriction?: number | null;
    /**
     * 制限対象の卒業年度(最大値)
     * @type {number}
     * @memberof TechthonSessionIn
     */
    maxGraduationYearOfRestriction?: number | null;
    /**
     * ユーザー向けランキング表示有無
     * @type {boolean}
     * @memberof TechthonSessionIn
     */
    showRankingForUser?: boolean;
    /**
     * アンケートを表示有無
     * @type {boolean}
     * @memberof TechthonSessionIn
     */
    hasInterview?: boolean;
    /**
     * GoogleForm編集ページURL
     * @type {string}
     * @memberof TechthonSessionIn
     */
    editGoogleFormLink?: string;
    /**
     * アンケート説明文
     * @type {string}
     * @memberof TechthonSessionIn
     */
    interviewDescription?: string;
    /**
     * GoogleForm回答ページURL
     * @type {string}
     * @memberof TechthonSessionIn
     */
    answerGoogleFormLink?: string;
    /**
     * 求人紹介規約に同意させるか
     * @type {boolean}
     * @memberof TechthonSessionIn
     */
    isAgreeRecruitRule?: boolean;
    /**
     * チーム制度の有無
     * @type {boolean}
     * @memberof TechthonSessionIn
     */
    isTeamed?: boolean;
}

/**
 * Check if a given object implements the TechthonSessionIn interface.
 */
export function instanceOfTechthonSessionIn(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "startsAt" in value;
    isInstance = isInstance && "endsAt" in value;
    isInstance = isInstance && "sessionType" in value;

    return isInstance;
}

export function TechthonSessionInFromJSON(json: any): TechthonSessionIn {
    return TechthonSessionInFromJSONTyped(json, false);
}

export function TechthonSessionInFromJSONTyped(json: any, ignoreDiscriminator: boolean): TechthonSessionIn {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'startsAt': (new Date(json['startsAt'])),
        'endsAt': (new Date(json['endsAt'])),
        'location': !exists(json, 'location') ? undefined : json['location'],
        'sessionType': SessionTypeFromJSON(json['sessionType']),
        'isLockedSession': !exists(json, 'isLockedSession') ? undefined : json['isLockedSession'],
        'isPracticeSession': !exists(json, 'isPracticeSession') ? undefined : json['isPracticeSession'],
        'isShortTestSession': !exists(json, 'isShortTestSession') ? undefined : json['isShortTestSession'],
        'maxNumOfRanking': !exists(json, 'maxNumOfRanking') ? undefined : json['maxNumOfRanking'],
        'minGraduationYearOfRestriction': !exists(json, 'minGraduationYearOfRestriction') ? undefined : json['minGraduationYearOfRestriction'],
        'maxGraduationYearOfRestriction': !exists(json, 'maxGraduationYearOfRestriction') ? undefined : json['maxGraduationYearOfRestriction'],
        'showRankingForUser': !exists(json, 'showRankingForUser') ? undefined : json['showRankingForUser'],
        'hasInterview': !exists(json, 'hasInterview') ? undefined : json['hasInterview'],
        'editGoogleFormLink': !exists(json, 'editGoogleFormLink') ? undefined : json['editGoogleFormLink'],
        'interviewDescription': !exists(json, 'interviewDescription') ? undefined : json['interviewDescription'],
        'answerGoogleFormLink': !exists(json, 'answerGoogleFormLink') ? undefined : json['answerGoogleFormLink'],
        'isAgreeRecruitRule': !exists(json, 'isAgreeRecruitRule') ? undefined : json['isAgreeRecruitRule'],
        'isTeamed': !exists(json, 'isTeamed') ? undefined : json['isTeamed'],
    };
}

export function TechthonSessionInToJSON(value?: TechthonSessionIn | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'startsAt': (value.startsAt.toISOString()),
        'endsAt': (value.endsAt.toISOString()),
        'location': value.location,
        'sessionType': SessionTypeToJSON(value.sessionType),
        'isLockedSession': value.isLockedSession,
        'isPracticeSession': value.isPracticeSession,
        'isShortTestSession': value.isShortTestSession,
        'maxNumOfRanking': value.maxNumOfRanking,
        'minGraduationYearOfRestriction': value.minGraduationYearOfRestriction,
        'maxGraduationYearOfRestriction': value.maxGraduationYearOfRestriction,
        'showRankingForUser': value.showRankingForUser,
        'hasInterview': value.hasInterview,
        'editGoogleFormLink': value.editGoogleFormLink,
        'interviewDescription': value.interviewDescription,
        'answerGoogleFormLink': value.answerGoogleFormLink,
        'isAgreeRecruitRule': value.isAgreeRecruitRule,
        'isTeamed': value.isTeamed,
    };
}

