/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PgLangUpdateIn
 */
export interface PgLangUpdateIn {
    /**
     * 
     * @type {string}
     * @memberof PgLangUpdateIn
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PgLangUpdateIn
     */
    monacoName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PgLangUpdateIn
     */
    langCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PgLangUpdateIn
     */
    template?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PgLangUpdateIn
     */
    extension?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof PgLangUpdateIn
     */
    isSql?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof PgLangUpdateIn
     */
    useForBlankQuestion?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof PgLangUpdateIn
     */
    useForJudgementLang?: boolean | null;
}

/**
 * Check if a given object implements the PgLangUpdateIn interface.
 */
export function instanceOfPgLangUpdateIn(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PgLangUpdateInFromJSON(json: any): PgLangUpdateIn {
    return PgLangUpdateInFromJSONTyped(json, false);
}

export function PgLangUpdateInFromJSONTyped(json: any, ignoreDiscriminator: boolean): PgLangUpdateIn {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'monacoName': !exists(json, 'monacoName') ? undefined : json['monacoName'],
        'langCode': !exists(json, 'langCode') ? undefined : json['langCode'],
        'template': !exists(json, 'template') ? undefined : json['template'],
        'extension': !exists(json, 'extension') ? undefined : json['extension'],
        'isSql': !exists(json, 'isSql') ? undefined : json['isSql'],
        'useForBlankQuestion': !exists(json, 'useForBlankQuestion') ? undefined : json['useForBlankQuestion'],
        'useForJudgementLang': !exists(json, 'useForJudgementLang') ? undefined : json['useForJudgementLang'],
    };
}

export function PgLangUpdateInToJSON(value?: PgLangUpdateIn | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'monacoName': value.monacoName,
        'langCode': value.langCode,
        'template': value.template,
        'extension': value.extension,
        'isSql': value.isSql,
        'useForBlankQuestion': value.useForBlankQuestion,
        'useForJudgementLang': value.useForJudgementLang,
    };
}

