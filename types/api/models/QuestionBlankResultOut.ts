/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { QuestionBlankEachResult } from './QuestionBlankEachResult';
import {
    QuestionBlankEachResultFromJSON,
    QuestionBlankEachResultFromJSONTyped,
    QuestionBlankEachResultToJSON,
} from './QuestionBlankEachResult';

/**
 * 
 * @export
 * @interface QuestionBlankResultOut
 */
export interface QuestionBlankResultOut {
    /**
     * 空欄解答ID
     * @type {number}
     * @memberof QuestionBlankResultOut
     */
    id: number;
    /**
     * 正解かどうか
     * @type {boolean}
     * @memberof QuestionBlankResultOut
     */
    isCorrect: boolean;
    /**
     * スコア
     * @type {number}
     * @memberof QuestionBlankResultOut
     */
    score: number;
    /**
     * 空欄テストケース結果
     * @type {Array<QuestionBlankEachResult>}
     * @memberof QuestionBlankResultOut
     */
    questionBlankEachResults?: Array<QuestionBlankEachResult>;
    /**
     * 提出日時
     * @type {Date}
     * @memberof QuestionBlankResultOut
     */
    submissionDatetime: Date;
}

/**
 * Check if a given object implements the QuestionBlankResultOut interface.
 */
export function instanceOfQuestionBlankResultOut(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "isCorrect" in value;
    isInstance = isInstance && "score" in value;
    isInstance = isInstance && "submissionDatetime" in value;

    return isInstance;
}

export function QuestionBlankResultOutFromJSON(json: any): QuestionBlankResultOut {
    return QuestionBlankResultOutFromJSONTyped(json, false);
}

export function QuestionBlankResultOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuestionBlankResultOut {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'isCorrect': json['isCorrect'],
        'score': json['score'],
        'questionBlankEachResults': !exists(json, 'questionBlankEachResults') ? undefined : ((json['questionBlankEachResults'] as Array<any>).map(QuestionBlankEachResultFromJSON)),
        'submissionDatetime': (new Date(json['submissionDatetime'])),
    };
}

export function QuestionBlankResultOutToJSON(value?: QuestionBlankResultOut | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'isCorrect': value.isCorrect,
        'score': value.score,
        'questionBlankEachResults': value.questionBlankEachResults === undefined ? undefined : ((value.questionBlankEachResults as Array<any>).map(QuestionBlankEachResultToJSON)),
        'submissionDatetime': (value.submissionDatetime.toISOString()),
    };
}

