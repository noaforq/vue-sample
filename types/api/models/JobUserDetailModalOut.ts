/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrentJob } from './CurrentJob';
import {
    CurrentJobFromJSON,
    CurrentJobFromJSONTyped,
    CurrentJobToJSON,
} from './CurrentJob';
import type { JobHuntingType } from './JobHuntingType';
import {
    JobHuntingTypeFromJSON,
    JobHuntingTypeFromJSONTyped,
    JobHuntingTypeToJSON,
} from './JobHuntingType';
import type { MajorCourse } from './MajorCourse';
import {
    MajorCourseFromJSON,
    MajorCourseFromJSONTyped,
    MajorCourseToJSON,
} from './MajorCourse';
import type { NativeLanguage } from './NativeLanguage';
import {
    NativeLanguageFromJSON,
    NativeLanguageFromJSONTyped,
    NativeLanguageToJSON,
} from './NativeLanguage';

/**
 * ユーザー詳細モーダル
 * スカウト承諾済みユーザーのみ表示
 * @export
 * @interface JobUserDetailModalOut
 */
export interface JobUserDetailModalOut {
    /**
     * ユーザー名
     * @type {string}
     * @memberof JobUserDetailModalOut
     */
    username: string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof JobUserDetailModalOut
     */
    email: string;
    /**
     * サブメールアドレス
     * @type {string}
     * @memberof JobUserDetailModalOut
     */
    subEmail?: string;
    /**
     * 名
     * @type {string}
     * @memberof JobUserDetailModalOut
     */
    firstName: string;
    /**
     * 姓
     * @type {string}
     * @memberof JobUserDetailModalOut
     */
    lastName: string;
    /**
     * 名カナ
     * @type {string}
     * @memberof JobUserDetailModalOut
     */
    firstNameKana: string;
    /**
     * 姓カナ
     * @type {string}
     * @memberof JobUserDetailModalOut
     */
    lastNameKana: string;
    /**
     * 生年月日
     * @type {Date}
     * @memberof JobUserDetailModalOut
     */
    birthday: Date | null;
    /**
     * 
     * @type {CurrentJob}
     * @memberof JobUserDetailModalOut
     */
    currentJob?: CurrentJob | null;
    /**
     * 
     * @type {JobHuntingType}
     * @memberof JobUserDetailModalOut
     */
    jobHuntingType: JobHuntingType;
    /**
     * 
     * @type {NativeLanguage}
     * @memberof JobUserDetailModalOut
     */
    nativeLanguage: NativeLanguage | null;
    /**
     * 最終学歴の学校種類
     * @type {string}
     * @memberof JobUserDetailModalOut
     */
    schoolDivisionName?: string;
    /**
     * 最終学歴の学校名
     * @type {string}
     * @memberof JobUserDetailModalOut
     */
    schoolName?: string;
    /**
     * 最終学歴の学部名
     * @type {string}
     * @memberof JobUserDetailModalOut
     */
    schoolFacultyName?: string;
    /**
     * 最終学歴の学科名
     * @type {string}
     * @memberof JobUserDetailModalOut
     */
    schoolDepartmentName?: string;
    /**
     * 最終学歴の学科系統名(専攻)
     * @type {string}
     * @memberof JobUserDetailModalOut
     */
    schoolDepartmentSystemName?: string | null;
    /**
     * 卒業年
     * @type {Date}
     * @memberof JobUserDetailModalOut
     */
    graduationDate?: Date | null;
    /**
     * 
     * @type {MajorCourse}
     * @memberof JobUserDetailModalOut
     */
    majorCourse?: MajorCourse | null;
    /**
     * 希望職種
     * @type {Array<string>}
     * @memberof JobUserDetailModalOut
     */
    desiredOccupationNames: Array<string>;
    /**
     * 希望勤務地
     * @type {Array<string>}
     * @memberof JobUserDetailModalOut
     */
    desiredPrefectureNames: Array<string>;
    /**
     * 郵便番号
     * @type {string}
     * @memberof JobUserDetailModalOut
     */
    currentPostalCode?: string;
    /**
     * 現住所都道府県
     * @type {string}
     * @memberof JobUserDetailModalOut
     */
    currentPrefecture?: string;
    /**
     * 現住所都道府県･市区町村
     * @type {string}
     * @memberof JobUserDetailModalOut
     */
    currentPrefectureCity?: string;
    /**
     * 現住所市区町村以降の住所
     * @type {string}
     * @memberof JobUserDetailModalOut
     */
    currentAddress1?: string;
    /**
     * 現住所建物名･部屋番号
     * @type {string}
     * @memberof JobUserDetailModalOut
     */
    currentAddress2?: string;
    /**
     * 電話番号
     * @type {string}
     * @memberof JobUserDetailModalOut
     */
    phoneNumber?: string;
    /**
     * 自宅電話番号
     * @type {string}
     * @memberof JobUserDetailModalOut
     */
    homePhoneNumber?: string;
    /**
     * 郵便番号
     * @type {string}
     * @memberof JobUserDetailModalOut
     */
    postalCodeOnVacation?: string;
    /**
     * 休暇中都道府県･市区町村
     * @type {string}
     * @memberof JobUserDetailModalOut
     */
    prefectureCityOnVacation?: string;
    /**
     * 休暇中市区町村以降の住所
     * @type {string}
     * @memberof JobUserDetailModalOut
     */
    address1OnVacation?: string;
    /**
     * 休暇中建物名･部屋番号
     * @type {string}
     * @memberof JobUserDetailModalOut
     */
    address2OnVacation?: string;
    /**
     * 休暇中は同じ連絡先か
     * @type {boolean}
     * @memberof JobUserDetailModalOut
     */
    isSameContactOnVacation?: boolean;
    /**
     * 自己PR
     * @type {string}
     * @memberof JobUserDetailModalOut
     */
    selfPr?: string;
}

/**
 * Check if a given object implements the JobUserDetailModalOut interface.
 */
export function instanceOfJobUserDetailModalOut(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "username" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "firstName" in value;
    isInstance = isInstance && "lastName" in value;
    isInstance = isInstance && "firstNameKana" in value;
    isInstance = isInstance && "lastNameKana" in value;
    isInstance = isInstance && "birthday" in value;
    isInstance = isInstance && "jobHuntingType" in value;
    isInstance = isInstance && "nativeLanguage" in value;
    isInstance = isInstance && "desiredOccupationNames" in value;
    isInstance = isInstance && "desiredPrefectureNames" in value;

    return isInstance;
}

export function JobUserDetailModalOutFromJSON(json: any): JobUserDetailModalOut {
    return JobUserDetailModalOutFromJSONTyped(json, false);
}

export function JobUserDetailModalOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): JobUserDetailModalOut {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'username': json['username'],
        'email': json['email'],
        'subEmail': !exists(json, 'subEmail') ? undefined : json['subEmail'],
        'firstName': json['firstName'],
        'lastName': json['lastName'],
        'firstNameKana': json['firstNameKana'],
        'lastNameKana': json['lastNameKana'],
        'birthday': (json['birthday'] === null ? null : new Date(json['birthday'])),
        'currentJob': !exists(json, 'currentJob') ? undefined : CurrentJobFromJSON(json['currentJob']),
        'jobHuntingType': JobHuntingTypeFromJSON(json['jobHuntingType']),
        'nativeLanguage': NativeLanguageFromJSON(json['nativeLanguage']),
        'schoolDivisionName': !exists(json, 'schoolDivisionName') ? undefined : json['schoolDivisionName'],
        'schoolName': !exists(json, 'schoolName') ? undefined : json['schoolName'],
        'schoolFacultyName': !exists(json, 'schoolFacultyName') ? undefined : json['schoolFacultyName'],
        'schoolDepartmentName': !exists(json, 'schoolDepartmentName') ? undefined : json['schoolDepartmentName'],
        'schoolDepartmentSystemName': !exists(json, 'schoolDepartmentSystemName') ? undefined : json['schoolDepartmentSystemName'],
        'graduationDate': !exists(json, 'graduationDate') ? undefined : (json['graduationDate'] === null ? null : new Date(json['graduationDate'])),
        'majorCourse': !exists(json, 'majorCourse') ? undefined : MajorCourseFromJSON(json['majorCourse']),
        'desiredOccupationNames': json['desiredOccupationNames'],
        'desiredPrefectureNames': json['desiredPrefectureNames'],
        'currentPostalCode': !exists(json, 'currentPostalCode') ? undefined : json['currentPostalCode'],
        'currentPrefecture': !exists(json, 'currentPrefecture') ? undefined : json['currentPrefecture'],
        'currentPrefectureCity': !exists(json, 'currentPrefectureCity') ? undefined : json['currentPrefectureCity'],
        'currentAddress1': !exists(json, 'currentAddress1') ? undefined : json['currentAddress1'],
        'currentAddress2': !exists(json, 'currentAddress2') ? undefined : json['currentAddress2'],
        'phoneNumber': !exists(json, 'phoneNumber') ? undefined : json['phoneNumber'],
        'homePhoneNumber': !exists(json, 'homePhoneNumber') ? undefined : json['homePhoneNumber'],
        'postalCodeOnVacation': !exists(json, 'postalCodeOnVacation') ? undefined : json['postalCodeOnVacation'],
        'prefectureCityOnVacation': !exists(json, 'prefectureCityOnVacation') ? undefined : json['prefectureCityOnVacation'],
        'address1OnVacation': !exists(json, 'address1OnVacation') ? undefined : json['address1OnVacation'],
        'address2OnVacation': !exists(json, 'address2OnVacation') ? undefined : json['address2OnVacation'],
        'isSameContactOnVacation': !exists(json, 'isSameContactOnVacation') ? undefined : json['isSameContactOnVacation'],
        'selfPr': !exists(json, 'selfPr') ? undefined : json['selfPr'],
    };
}

export function JobUserDetailModalOutToJSON(value?: JobUserDetailModalOut | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'username': value.username,
        'email': value.email,
        'subEmail': value.subEmail,
        'firstName': value.firstName,
        'lastName': value.lastName,
        'firstNameKana': value.firstNameKana,
        'lastNameKana': value.lastNameKana,
        'birthday': (value.birthday === null ? null : value.birthday.toISOString().substring(0,10)),
        'currentJob': CurrentJobToJSON(value.currentJob),
        'jobHuntingType': JobHuntingTypeToJSON(value.jobHuntingType),
        'nativeLanguage': NativeLanguageToJSON(value.nativeLanguage),
        'schoolDivisionName': value.schoolDivisionName,
        'schoolName': value.schoolName,
        'schoolFacultyName': value.schoolFacultyName,
        'schoolDepartmentName': value.schoolDepartmentName,
        'schoolDepartmentSystemName': value.schoolDepartmentSystemName,
        'graduationDate': value.graduationDate === undefined ? undefined : (value.graduationDate === null ? null : value.graduationDate.toISOString().substring(0,10)),
        'majorCourse': MajorCourseToJSON(value.majorCourse),
        'desiredOccupationNames': value.desiredOccupationNames,
        'desiredPrefectureNames': value.desiredPrefectureNames,
        'currentPostalCode': value.currentPostalCode,
        'currentPrefecture': value.currentPrefecture,
        'currentPrefectureCity': value.currentPrefectureCity,
        'currentAddress1': value.currentAddress1,
        'currentAddress2': value.currentAddress2,
        'phoneNumber': value.phoneNumber,
        'homePhoneNumber': value.homePhoneNumber,
        'postalCodeOnVacation': value.postalCodeOnVacation,
        'prefectureCityOnVacation': value.prefectureCityOnVacation,
        'address1OnVacation': value.address1OnVacation,
        'address2OnVacation': value.address2OnVacation,
        'isSameContactOnVacation': value.isSameContactOnVacation,
        'selfPr': value.selfPr,
    };
}

