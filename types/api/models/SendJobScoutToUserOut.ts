/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { JobPgLangsList } from './JobPgLangsList';
import {
    JobPgLangsListFromJSON,
    JobPgLangsListFromJSONTyped,
    JobPgLangsListToJSON,
} from './JobPgLangsList';

/**
 * 
 * @export
 * @interface SendJobScoutToUserOut
 */
export interface SendJobScoutToUserOut {
    /**
     * 求人ID
     * @type {number}
     * @memberof SendJobScoutToUserOut
     */
    jobId: number;
    /**
     * 企業名
     * @type {string}
     * @memberof SendJobScoutToUserOut
     */
    companyName: string;
    /**
     * 職種名
     * @type {string}
     * @memberof SendJobScoutToUserOut
     */
    occupationName: string;
    /**
     * 求人タイトル
     * @type {string}
     * @memberof SendJobScoutToUserOut
     */
    jobTitle: string;
    /**
     * 勤務地都道府県名
     * @type {string}
     * @memberof SendJobScoutToUserOut
     */
    jobPrefectureName: string;
    /**
     * 必須スキルレベル
     * @type {string}
     * @memberof SendJobScoutToUserOut
     */
    requiredSkillLevel: string;
    /**
     * 必須言語
     * @type {Array<JobPgLangsList>}
     * @memberof SendJobScoutToUserOut
     */
    requiredPgLangs: Array<JobPgLangsList>;
    /**
     * 雇用形態
     * @type {string}
     * @memberof SendJobScoutToUserOut
     */
    employmentStatus: string;
    /**
     * 求人更新日(yyyy-mm-dd)
     * @type {Date}
     * @memberof SendJobScoutToUserOut
     */
    jobUpdatedAt: Date;
    /**
     * お気に入り数
     * @type {number}
     * @memberof SendJobScoutToUserOut
     */
    jobFavoriteCount: number;
    /**
     * 紹介ユーザー数
     * @type {number}
     * @memberof SendJobScoutToUserOut
     */
    jobScoutCount: number;
    /**
     * 選考中ユーザー数
     * @type {number}
     * @memberof SendJobScoutToUserOut
     */
    inSelectionCount: number;
    /**
     * 内定ユーザー数
     * @type {number}
     * @memberof SendJobScoutToUserOut
     */
    offeredCount: number;
    /**
     * 応募済か
     * @type {boolean}
     * @memberof SendJobScoutToUserOut
     */
    isInApplying: boolean;
}

/**
 * Check if a given object implements the SendJobScoutToUserOut interface.
 */
export function instanceOfSendJobScoutToUserOut(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "jobId" in value;
    isInstance = isInstance && "companyName" in value;
    isInstance = isInstance && "occupationName" in value;
    isInstance = isInstance && "jobTitle" in value;
    isInstance = isInstance && "jobPrefectureName" in value;
    isInstance = isInstance && "requiredSkillLevel" in value;
    isInstance = isInstance && "requiredPgLangs" in value;
    isInstance = isInstance && "employmentStatus" in value;
    isInstance = isInstance && "jobUpdatedAt" in value;
    isInstance = isInstance && "jobFavoriteCount" in value;
    isInstance = isInstance && "jobScoutCount" in value;
    isInstance = isInstance && "inSelectionCount" in value;
    isInstance = isInstance && "offeredCount" in value;
    isInstance = isInstance && "isInApplying" in value;

    return isInstance;
}

export function SendJobScoutToUserOutFromJSON(json: any): SendJobScoutToUserOut {
    return SendJobScoutToUserOutFromJSONTyped(json, false);
}

export function SendJobScoutToUserOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): SendJobScoutToUserOut {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'jobId': json['jobId'],
        'companyName': json['companyName'],
        'occupationName': json['occupationName'],
        'jobTitle': json['jobTitle'],
        'jobPrefectureName': json['jobPrefectureName'],
        'requiredSkillLevel': json['requiredSkillLevel'],
        'requiredPgLangs': ((json['requiredPgLangs'] as Array<any>).map(JobPgLangsListFromJSON)),
        'employmentStatus': json['employmentStatus'],
        'jobUpdatedAt': (new Date(json['jobUpdatedAt'])),
        'jobFavoriteCount': json['jobFavoriteCount'],
        'jobScoutCount': json['jobScoutCount'],
        'inSelectionCount': json['inSelectionCount'],
        'offeredCount': json['offeredCount'],
        'isInApplying': json['isInApplying'],
    };
}

export function SendJobScoutToUserOutToJSON(value?: SendJobScoutToUserOut | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'jobId': value.jobId,
        'companyName': value.companyName,
        'occupationName': value.occupationName,
        'jobTitle': value.jobTitle,
        'jobPrefectureName': value.jobPrefectureName,
        'requiredSkillLevel': value.requiredSkillLevel,
        'requiredPgLangs': ((value.requiredPgLangs as Array<any>).map(JobPgLangsListToJSON)),
        'employmentStatus': value.employmentStatus,
        'jobUpdatedAt': (value.jobUpdatedAt.toISOString()),
        'jobFavoriteCount': value.jobFavoriteCount,
        'jobScoutCount': value.jobScoutCount,
        'inSelectionCount': value.inSelectionCount,
        'offeredCount': value.offeredCount,
        'isInApplying': value.isInApplying,
    };
}

