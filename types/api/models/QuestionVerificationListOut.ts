/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface QuestionVerificationListOut
 */
export interface QuestionVerificationListOut {
    /**
     * 
     * @type {number}
     * @memberof QuestionVerificationListOut
     */
    id: number;
    /**
     * 検証日時
     * @type {Date}
     * @memberof QuestionVerificationListOut
     */
    createdAt: Date;
    /**
     * ユーザー名
     * @type {string}
     * @memberof QuestionVerificationListOut
     */
    username: string;
    /**
     * ユーザが所属している企業名,学校名+組織名(学部/研究室等)
     * @type {string}
     * @memberof QuestionVerificationListOut
     */
    organizationName: string;
    /**
     * 結果
     * @type {boolean}
     * @memberof QuestionVerificationListOut
     */
    isPassed: boolean;
    /**
     * プログラミング言語名
     * @type {string}
     * @memberof QuestionVerificationListOut
     */
    pgLangName: string;
    /**
     * 検証ソースコード
     * @type {string}
     * @memberof QuestionVerificationListOut
     */
    verificationSourceCode: string;
    /**
     * モナコ言語名
     * @type {string}
     * @memberof QuestionVerificationListOut
     */
    monacoName: string;
}

/**
 * Check if a given object implements the QuestionVerificationListOut interface.
 */
export function instanceOfQuestionVerificationListOut(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "username" in value;
    isInstance = isInstance && "organizationName" in value;
    isInstance = isInstance && "isPassed" in value;
    isInstance = isInstance && "pgLangName" in value;
    isInstance = isInstance && "verificationSourceCode" in value;
    isInstance = isInstance && "monacoName" in value;

    return isInstance;
}

export function QuestionVerificationListOutFromJSON(json: any): QuestionVerificationListOut {
    return QuestionVerificationListOutFromJSONTyped(json, false);
}

export function QuestionVerificationListOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuestionVerificationListOut {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['createdAt'])),
        'username': json['username'],
        'organizationName': json['organizationName'],
        'isPassed': json['isPassed'],
        'pgLangName': json['pgLangName'],
        'verificationSourceCode': json['verificationSourceCode'],
        'monacoName': json['monacoName'],
    };
}

export function QuestionVerificationListOutToJSON(value?: QuestionVerificationListOut | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'createdAt': (value.createdAt.toISOString()),
        'username': value.username,
        'organizationName': value.organizationName,
        'isPassed': value.isPassed,
        'pgLangName': value.pgLangName,
        'verificationSourceCode': value.verificationSourceCode,
        'monacoName': value.monacoName,
    };
}

