/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EventPurpose } from './EventPurpose';
import {
    EventPurposeFromJSON,
    EventPurposeFromJSONTyped,
    EventPurposeToJSON,
} from './EventPurpose';

/**
 * 
 * @export
 * @interface StaffEventListDetailOut
 */
export interface StaffEventListDetailOut {
    /**
     * 
     * @type {number}
     * @memberof StaffEventListDetailOut
     */
    id: number;
    /**
     * 
     * @type {Date}
     * @memberof StaffEventListDetailOut
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof StaffEventListDetailOut
     */
    createdBy: string;
    /**
     * 
     * @type {string}
     * @memberof StaffEventListDetailOut
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof StaffEventListDetailOut
     */
    hostName: string;
    /**
     * 自組織のイベントか
     * @type {boolean}
     * @memberof StaffEventListDetailOut
     */
    isHost: boolean;
    /**
     * イベントに紐づくセッション数
     * @type {number}
     * @memberof StaffEventListDetailOut
     */
    sessionCount: number;
    /**
     * イベント参加人数
     * @type {number}
     * @memberof StaffEventListDetailOut
     */
    eventUserCount: number;
    /**
     * 
     * @type {EventPurpose}
     * @memberof StaffEventListDetailOut
     */
    purpose: EventPurpose;
    /**
     * 
     * @type {string}
     * @memberof StaffEventListDetailOut
     */
    purposeLabel: string;
}

/**
 * Check if a given object implements the StaffEventListDetailOut interface.
 */
export function instanceOfStaffEventListDetailOut(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "createdBy" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "hostName" in value;
    isInstance = isInstance && "isHost" in value;
    isInstance = isInstance && "sessionCount" in value;
    isInstance = isInstance && "eventUserCount" in value;
    isInstance = isInstance && "purpose" in value;
    isInstance = isInstance && "purposeLabel" in value;

    return isInstance;
}

export function StaffEventListDetailOutFromJSON(json: any): StaffEventListDetailOut {
    return StaffEventListDetailOutFromJSONTyped(json, false);
}

export function StaffEventListDetailOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): StaffEventListDetailOut {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['createdAt'])),
        'createdBy': json['createdBy'],
        'name': json['name'],
        'hostName': json['hostName'],
        'isHost': json['isHost'],
        'sessionCount': json['sessionCount'],
        'eventUserCount': json['eventUserCount'],
        'purpose': EventPurposeFromJSON(json['purpose']),
        'purposeLabel': json['purposeLabel'],
    };
}

export function StaffEventListDetailOutToJSON(value?: StaffEventListDetailOut | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'createdAt': (value.createdAt.toISOString()),
        'createdBy': value.createdBy,
        'name': value.name,
        'hostName': value.hostName,
        'isHost': value.isHost,
        'sessionCount': value.sessionCount,
        'eventUserCount': value.eventUserCount,
        'purpose': EventPurposeToJSON(value.purpose),
        'purposeLabel': value.purposeLabel,
    };
}

