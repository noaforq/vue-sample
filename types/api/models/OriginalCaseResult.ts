/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { JudgeStatus } from './JudgeStatus';
import {
    JudgeStatusFromJSON,
    JudgeStatusFromJSONTyped,
    JudgeStatusToJSON,
} from './JudgeStatus';

/**
 * 
 * @export
 * @interface OriginalCaseResult
 */
export interface OriginalCaseResult {
    /**
     * オリジナルケースの順番
     * @type {number}
     * @memberof OriginalCaseResult
     */
    order: number;
    /**
     * 標準入力
     * @type {string}
     * @memberof OriginalCaseResult
     */
    stdin: string;
    /**
     * 期待される標準出力
     * @type {string}
     * @memberof OriginalCaseResult
     */
    expectedStdout: string;
    /**
     * ユーザー出力/エラー出力
     * @type {string}
     * @memberof OriginalCaseResult
     */
    stdout: string;
    /**
     * 
     * @type {JudgeStatus}
     * @memberof OriginalCaseResult
     */
    judgeStatus: JudgeStatus;
    /**
     * 実行時間(s)
     * @type {number}
     * @memberof OriginalCaseResult
     */
    elapsedTime: number;
    /**
     * メモリ使用量(KB)
     * @type {number}
     * @memberof OriginalCaseResult
     */
    memoryUsage: number;
}

/**
 * Check if a given object implements the OriginalCaseResult interface.
 */
export function instanceOfOriginalCaseResult(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "order" in value;
    isInstance = isInstance && "stdin" in value;
    isInstance = isInstance && "expectedStdout" in value;
    isInstance = isInstance && "stdout" in value;
    isInstance = isInstance && "judgeStatus" in value;
    isInstance = isInstance && "elapsedTime" in value;
    isInstance = isInstance && "memoryUsage" in value;

    return isInstance;
}

export function OriginalCaseResultFromJSON(json: any): OriginalCaseResult {
    return OriginalCaseResultFromJSONTyped(json, false);
}

export function OriginalCaseResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): OriginalCaseResult {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'order': json['order'],
        'stdin': json['stdin'],
        'expectedStdout': json['expectedStdout'],
        'stdout': json['stdout'],
        'judgeStatus': JudgeStatusFromJSON(json['judgeStatus']),
        'elapsedTime': json['elapsedTime'],
        'memoryUsage': json['memoryUsage'],
    };
}

export function OriginalCaseResultToJSON(value?: OriginalCaseResult | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'order': value.order,
        'stdin': value.stdin,
        'expectedStdout': value.expectedStdout,
        'stdout': value.stdout,
        'judgeStatus': JudgeStatusToJSON(value.judgeStatus),
        'elapsedTime': value.elapsedTime,
        'memoryUsage': value.memoryUsage,
    };
}

