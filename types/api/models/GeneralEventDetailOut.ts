/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EventPurpose } from './EventPurpose';
import {
    EventPurposeFromJSON,
    EventPurposeFromJSONTyped,
    EventPurposeToJSON,
} from './EventPurpose';
import type { OrganizationType } from './OrganizationType';
import {
    OrganizationTypeFromJSON,
    OrganizationTypeFromJSONTyped,
    OrganizationTypeToJSON,
} from './OrganizationType';

/**
 * 
 * @export
 * @interface GeneralEventDetailOut
 */
export interface GeneralEventDetailOut {
    /**
     * 
     * @type {number}
     * @memberof GeneralEventDetailOut
     */
    id: number;
    /**
     * 
     * @type {Date}
     * @memberof GeneralEventDetailOut
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof GeneralEventDetailOut
     */
    updatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof GeneralEventDetailOut
     */
    createdBy: string;
    /**
     * 
     * @type {string}
     * @memberof GeneralEventDetailOut
     */
    updatedBy: string;
    /**
     * 
     * @type {string}
     * @memberof GeneralEventDetailOut
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof GeneralEventDetailOut
     */
    theme: string;
    /**
     * 
     * @type {string}
     * @memberof GeneralEventDetailOut
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof GeneralEventDetailOut
     */
    image: string;
    /**
     * 
     * @type {EventPurpose}
     * @memberof GeneralEventDetailOut
     */
    purpose: EventPurpose;
    /**
     * 
     * @type {string}
     * @memberof GeneralEventDetailOut
     */
    purposeLabel: string;
    /**
     * 
     * @type {number}
     * @memberof GeneralEventDetailOut
     */
    hostId: number;
    /**
     * 
     * @type {string}
     * @memberof GeneralEventDetailOut
     */
    hostName: string;
    /**
     * 
     * @type {boolean}
     * @memberof GeneralEventDetailOut
     */
    isPublic: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GeneralEventDetailOut
     */
    showRanking: boolean;
    /**
     * 
     * @type {OrganizationType}
     * @memberof GeneralEventDetailOut
     */
    organizationType: OrganizationType;
}

/**
 * Check if a given object implements the GeneralEventDetailOut interface.
 */
export function instanceOfGeneralEventDetailOut(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "createdBy" in value;
    isInstance = isInstance && "updatedBy" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "theme" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "image" in value;
    isInstance = isInstance && "purpose" in value;
    isInstance = isInstance && "purposeLabel" in value;
    isInstance = isInstance && "hostId" in value;
    isInstance = isInstance && "hostName" in value;
    isInstance = isInstance && "isPublic" in value;
    isInstance = isInstance && "showRanking" in value;
    isInstance = isInstance && "organizationType" in value;

    return isInstance;
}

export function GeneralEventDetailOutFromJSON(json: any): GeneralEventDetailOut {
    return GeneralEventDetailOutFromJSONTyped(json, false);
}

export function GeneralEventDetailOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): GeneralEventDetailOut {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'createdBy': json['createdBy'],
        'updatedBy': json['updatedBy'],
        'name': json['name'],
        'theme': json['theme'],
        'description': json['description'],
        'image': json['image'],
        'purpose': EventPurposeFromJSON(json['purpose']),
        'purposeLabel': json['purposeLabel'],
        'hostId': json['hostId'],
        'hostName': json['hostName'],
        'isPublic': json['isPublic'],
        'showRanking': json['showRanking'],
        'organizationType': OrganizationTypeFromJSON(json['organizationType']),
    };
}

export function GeneralEventDetailOutToJSON(value?: GeneralEventDetailOut | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': (value.updatedAt.toISOString()),
        'createdBy': value.createdBy,
        'updatedBy': value.updatedBy,
        'name': value.name,
        'theme': value.theme,
        'description': value.description,
        'image': value.image,
        'purpose': EventPurposeToJSON(value.purpose),
        'purposeLabel': value.purposeLabel,
        'hostId': value.hostId,
        'hostName': value.hostName,
        'isPublic': value.isPublic,
        'showRanking': value.showRanking,
        'organizationType': OrganizationTypeToJSON(value.organizationType),
    };
}

