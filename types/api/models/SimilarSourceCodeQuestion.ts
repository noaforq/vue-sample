/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SimilarSourceCodeUser } from './SimilarSourceCodeUser';
import {
    SimilarSourceCodeUserFromJSON,
    SimilarSourceCodeUserFromJSONTyped,
    SimilarSourceCodeUserToJSON,
} from './SimilarSourceCodeUser';

/**
 * 類似ソースコード 問題・PG
 * @export
 * @interface SimilarSourceCodeQuestion
 */
export interface SimilarSourceCodeQuestion {
    /**
     * 問題ID
     * @type {number}
     * @memberof SimilarSourceCodeQuestion
     */
    contentId: number;
    /**
     * 問題タイトル
     * @type {string}
     * @memberof SimilarSourceCodeQuestion
     */
    questionTitle: string;
    /**
     * 
     * @type {number}
     * @memberof SimilarSourceCodeQuestion
     */
    pgLangId: number;
    /**
     * 
     * @type {string}
     * @memberof SimilarSourceCodeQuestion
     */
    pgLangName: string;
    /**
     * 
     * @type {Array<SimilarSourceCodeUser>}
     * @memberof SimilarSourceCodeQuestion
     */
    similarSourceCodeUsers: Array<SimilarSourceCodeUser>;
}

/**
 * Check if a given object implements the SimilarSourceCodeQuestion interface.
 */
export function instanceOfSimilarSourceCodeQuestion(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "contentId" in value;
    isInstance = isInstance && "questionTitle" in value;
    isInstance = isInstance && "pgLangId" in value;
    isInstance = isInstance && "pgLangName" in value;
    isInstance = isInstance && "similarSourceCodeUsers" in value;

    return isInstance;
}

export function SimilarSourceCodeQuestionFromJSON(json: any): SimilarSourceCodeQuestion {
    return SimilarSourceCodeQuestionFromJSONTyped(json, false);
}

export function SimilarSourceCodeQuestionFromJSONTyped(json: any, ignoreDiscriminator: boolean): SimilarSourceCodeQuestion {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'contentId': json['contentId'],
        'questionTitle': json['questionTitle'],
        'pgLangId': json['pgLangId'],
        'pgLangName': json['pgLangName'],
        'similarSourceCodeUsers': ((json['similarSourceCodeUsers'] as Array<any>).map(SimilarSourceCodeUserFromJSON)),
    };
}

export function SimilarSourceCodeQuestionToJSON(value?: SimilarSourceCodeQuestion | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'contentId': value.contentId,
        'questionTitle': value.questionTitle,
        'pgLangId': value.pgLangId,
        'pgLangName': value.pgLangName,
        'similarSourceCodeUsers': ((value.similarSourceCodeUsers as Array<any>).map(SimilarSourceCodeUserToJSON)),
    };
}

