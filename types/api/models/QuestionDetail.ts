/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ContentOrganizationDivision } from './ContentOrganizationDivision';
import {
    ContentOrganizationDivisionFromJSON,
    ContentOrganizationDivisionFromJSONTyped,
    ContentOrganizationDivisionToJSON,
} from './ContentOrganizationDivision';
import type { QuestionBlankDetail } from './QuestionBlankDetail';
import {
    QuestionBlankDetailFromJSON,
    QuestionBlankDetailFromJSONTyped,
    QuestionBlankDetailToJSON,
} from './QuestionBlankDetail';
import type { QuestionChoiceDetail } from './QuestionChoiceDetail';
import {
    QuestionChoiceDetailFromJSON,
    QuestionChoiceDetailFromJSONTyped,
    QuestionChoiceDetailToJSON,
} from './QuestionChoiceDetail';
import type { QuestionSampleCaseDetail } from './QuestionSampleCaseDetail';
import {
    QuestionSampleCaseDetailFromJSON,
    QuestionSampleCaseDetailFromJSONTyped,
    QuestionSampleCaseDetailToJSON,
} from './QuestionSampleCaseDetail';
import type { QuestionType } from './QuestionType';
import {
    QuestionTypeFromJSON,
    QuestionTypeFromJSONTyped,
    QuestionTypeToJSON,
} from './QuestionType';

/**
 * 
 * @export
 * @interface QuestionDetail
 */
export interface QuestionDetail {
    /**
     * 問題ID
     * @type {number}
     * @memberof QuestionDetail
     */
    questionId: number;
    /**
     * タイトル
     * @type {string}
     * @memberof QuestionDetail
     */
    title: string;
    /**
     * トピック
     * @type {string}
     * @memberof QuestionDetail
     */
    topic: string;
    /**
     * カテゴリ
     * @type {string}
     * @memberof QuestionDetail
     */
    category: string;
    /**
     * 難易度
     * @type {number}
     * @memberof QuestionDetail
     */
    difficulty: number;
    /**
     * 
     * @type {QuestionType}
     * @memberof QuestionDetail
     */
    questionType: QuestionType;
    /**
     * 解説
     * @type {string}
     * @memberof QuestionDetail
     */
    answer?: string;
    /**
     * 目標時間
     * @type {number}
     * @memberof QuestionDetail
     */
    targetTime?: number | null;
    /**
     * 問題文
     * @type {string}
     * @memberof QuestionDetail
     */
    text: string;
    /**
     * 
     * @type {ContentOrganizationDivision}
     * @memberof QuestionDetail
     */
    contentOrganizationDivision: ContentOrganizationDivision;
    /**
     * 問題サンプルケース
     * @type {Array<QuestionSampleCaseDetail>}
     * @memberof QuestionDetail
     */
    questionSampleCases?: Array<QuestionSampleCaseDetail>;
    /**
     * 選択肢詳細
     * @type {Array<QuestionChoiceDetail>}
     * @memberof QuestionDetail
     */
    questionChoices?: Array<QuestionChoiceDetail>;
    /**
     * 空欄問題の詳細
     * @type {Array<QuestionBlankDetail>}
     * @memberof QuestionDetail
     */
    questionBlanks?: Array<QuestionBlankDetail>;
}

/**
 * Check if a given object implements the QuestionDetail interface.
 */
export function instanceOfQuestionDetail(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "questionId" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "topic" in value;
    isInstance = isInstance && "category" in value;
    isInstance = isInstance && "difficulty" in value;
    isInstance = isInstance && "questionType" in value;
    isInstance = isInstance && "text" in value;
    isInstance = isInstance && "contentOrganizationDivision" in value;

    return isInstance;
}

export function QuestionDetailFromJSON(json: any): QuestionDetail {
    return QuestionDetailFromJSONTyped(json, false);
}

export function QuestionDetailFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuestionDetail {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'questionId': json['questionId'],
        'title': json['title'],
        'topic': json['topic'],
        'category': json['category'],
        'difficulty': json['difficulty'],
        'questionType': QuestionTypeFromJSON(json['questionType']),
        'answer': !exists(json, 'answer') ? undefined : json['answer'],
        'targetTime': !exists(json, 'targetTime') ? undefined : json['targetTime'],
        'text': json['text'],
        'contentOrganizationDivision': ContentOrganizationDivisionFromJSON(json['contentOrganizationDivision']),
        'questionSampleCases': !exists(json, 'questionSampleCases') ? undefined : ((json['questionSampleCases'] as Array<any>).map(QuestionSampleCaseDetailFromJSON)),
        'questionChoices': !exists(json, 'questionChoices') ? undefined : ((json['questionChoices'] as Array<any>).map(QuestionChoiceDetailFromJSON)),
        'questionBlanks': !exists(json, 'questionBlanks') ? undefined : ((json['questionBlanks'] as Array<any>).map(QuestionBlankDetailFromJSON)),
    };
}

export function QuestionDetailToJSON(value?: QuestionDetail | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'questionId': value.questionId,
        'title': value.title,
        'topic': value.topic,
        'category': value.category,
        'difficulty': value.difficulty,
        'questionType': QuestionTypeToJSON(value.questionType),
        'answer': value.answer,
        'targetTime': value.targetTime,
        'text': value.text,
        'contentOrganizationDivision': ContentOrganizationDivisionToJSON(value.contentOrganizationDivision),
        'questionSampleCases': value.questionSampleCases === undefined ? undefined : ((value.questionSampleCases as Array<any>).map(QuestionSampleCaseDetailToJSON)),
        'questionChoices': value.questionChoices === undefined ? undefined : ((value.questionChoices as Array<any>).map(QuestionChoiceDetailToJSON)),
        'questionBlanks': value.questionBlanks === undefined ? undefined : ((value.questionBlanks as Array<any>).map(QuestionBlankDetailToJSON)),
    };
}

