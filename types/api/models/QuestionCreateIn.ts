/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AppSchemasManageQuestionsQuastionCreateInQuestionBlankIn } from './AppSchemasManageQuestionsQuastionCreateInQuestionBlankIn';
import {
    AppSchemasManageQuestionsQuastionCreateInQuestionBlankInFromJSON,
    AppSchemasManageQuestionsQuastionCreateInQuestionBlankInFromJSONTyped,
    AppSchemasManageQuestionsQuastionCreateInQuestionBlankInToJSON,
} from './AppSchemasManageQuestionsQuastionCreateInQuestionBlankIn';
import type { AppSchemasManageQuestionsQuastionCreateInQuestionChoiceIn } from './AppSchemasManageQuestionsQuastionCreateInQuestionChoiceIn';
import {
    AppSchemasManageQuestionsQuastionCreateInQuestionChoiceInFromJSON,
    AppSchemasManageQuestionsQuastionCreateInQuestionChoiceInFromJSONTyped,
    AppSchemasManageQuestionsQuastionCreateInQuestionChoiceInToJSON,
} from './AppSchemasManageQuestionsQuastionCreateInQuestionChoiceIn';
import type { AppSchemasManageQuestionsQuastionCreateInQuestionFileIn } from './AppSchemasManageQuestionsQuastionCreateInQuestionFileIn';
import {
    AppSchemasManageQuestionsQuastionCreateInQuestionFileInFromJSON,
    AppSchemasManageQuestionsQuastionCreateInQuestionFileInFromJSONTyped,
    AppSchemasManageQuestionsQuastionCreateInQuestionFileInToJSON,
} from './AppSchemasManageQuestionsQuastionCreateInQuestionFileIn';
import type { AppSchemasManageQuestionsQuastionCreateInQuestionTemplateIn } from './AppSchemasManageQuestionsQuastionCreateInQuestionTemplateIn';
import {
    AppSchemasManageQuestionsQuastionCreateInQuestionTemplateInFromJSON,
    AppSchemasManageQuestionsQuastionCreateInQuestionTemplateInFromJSONTyped,
    AppSchemasManageQuestionsQuastionCreateInQuestionTemplateInToJSON,
} from './AppSchemasManageQuestionsQuastionCreateInQuestionTemplateIn';
import type { AppSchemasManageQuestionsQuastionCreateInTestCaseIn } from './AppSchemasManageQuestionsQuastionCreateInTestCaseIn';
import {
    AppSchemasManageQuestionsQuastionCreateInTestCaseInFromJSON,
    AppSchemasManageQuestionsQuastionCreateInTestCaseInFromJSONTyped,
    AppSchemasManageQuestionsQuastionCreateInTestCaseInToJSON,
} from './AppSchemasManageQuestionsQuastionCreateInTestCaseIn';
import type { ContentDivision } from './ContentDivision';
import {
    ContentDivisionFromJSON,
    ContentDivisionFromJSONTyped,
    ContentDivisionToJSON,
} from './ContentDivision';
import type { QuestionType } from './QuestionType';
import {
    QuestionTypeFromJSON,
    QuestionTypeFromJSONTyped,
    QuestionTypeToJSON,
} from './QuestionType';

/**
 * 
 * @export
 * @interface QuestionCreateIn
 */
export interface QuestionCreateIn {
    /**
     * 問題タイトル
     * @type {string}
     * @memberof QuestionCreateIn
     */
    title: string;
    /**
     * 問題タイトル英語
     * @type {string}
     * @memberof QuestionCreateIn
     */
    titleEn?: string;
    /**
     * 問題文
     * @type {string}
     * @memberof QuestionCreateIn
     */
    text: string;
    /**
     * 問題文英語
     * @type {string}
     * @memberof QuestionCreateIn
     */
    textEn?: string;
    /**
     * 目標回答時間
     * @type {number}
     * @memberof QuestionCreateIn
     */
    targetTime: number;
    /**
     * 
     * @type {QuestionType}
     * @memberof QuestionCreateIn
     */
    questionType: QuestionType;
    /**
     * 難易度
     * @type {number}
     * @memberof QuestionCreateIn
     */
    difficulty: number;
    /**
     * 問題概要
     * @type {string}
     * @memberof QuestionCreateIn
     */
    summary?: string;
    /**
     * SQL問題の初期実行コード
     * @type {string}
     * @memberof QuestionCreateIn
     */
    sqlSetup?: string;
    /**
     * 問題画像URL
     * @type {string}
     * @memberof QuestionCreateIn
     */
    image?: string;
    /**
     * 
     * @type {number}
     * @memberof QuestionCreateIn
     */
    contentTopicId: number;
    /**
     * 
     * @type {ContentDivision}
     * @memberof QuestionCreateIn
     */
    contentDivision: ContentDivision;
    /**
     * タグ
     * @type {Array<string>}
     * @memberof QuestionCreateIn
     */
    contentTagNames: Array<string>;
    /**
     * 企業に閲覧許可
     * @type {boolean}
     * @memberof QuestionCreateIn
     */
    isRefusedBrowsing?: boolean;
    /**
     * 他学校に問題公開
     * @type {boolean}
     * @memberof QuestionCreateIn
     */
    isSharedBetweenSchools?: boolean;
    /**
     * 解答者にテストケース公開
     * @type {boolean}
     * @memberof QuestionCreateIn
     */
    showTestcaseToAnswerer?: boolean;
    /**
     * 他学校にテストケースを公開するか
     * @type {boolean}
     * @memberof QuestionCreateIn
     */
    isSharedTestcase?: boolean;
    /**
     * 
     * @type {Array<AppSchemasManageQuestionsQuastionCreateInTestCaseIn>}
     * @memberof QuestionCreateIn
     */
    questionTestCases?: Array<AppSchemasManageQuestionsQuastionCreateInTestCaseIn> | null;
    /**
     * 
     * @type {Array<AppSchemasManageQuestionsQuastionCreateInQuestionFileIn>}
     * @memberof QuestionCreateIn
     */
    questionFiles?: Array<AppSchemasManageQuestionsQuastionCreateInQuestionFileIn> | null;
    /**
     * 
     * @type {AppSchemasManageQuestionsQuastionCreateInQuestionTemplateIn}
     * @memberof QuestionCreateIn
     */
    questionTemplate?: AppSchemasManageQuestionsQuastionCreateInQuestionTemplateIn | null;
    /**
     * 
     * @type {Array<AppSchemasManageQuestionsQuastionCreateInQuestionChoiceIn>}
     * @memberof QuestionCreateIn
     */
    questionChoices?: Array<AppSchemasManageQuestionsQuastionCreateInQuestionChoiceIn> | null;
    /**
     * 
     * @type {Array<AppSchemasManageQuestionsQuastionCreateInQuestionBlankIn>}
     * @memberof QuestionCreateIn
     */
    questionBlanks?: Array<AppSchemasManageQuestionsQuastionCreateInQuestionBlankIn> | null;
    /**
     * 答えの解説
     * @type {string}
     * @memberof QuestionCreateIn
     */
    answer?: string;
}

/**
 * Check if a given object implements the QuestionCreateIn interface.
 */
export function instanceOfQuestionCreateIn(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "text" in value;
    isInstance = isInstance && "targetTime" in value;
    isInstance = isInstance && "questionType" in value;
    isInstance = isInstance && "difficulty" in value;
    isInstance = isInstance && "contentTopicId" in value;
    isInstance = isInstance && "contentDivision" in value;
    isInstance = isInstance && "contentTagNames" in value;

    return isInstance;
}

export function QuestionCreateInFromJSON(json: any): QuestionCreateIn {
    return QuestionCreateInFromJSONTyped(json, false);
}

export function QuestionCreateInFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuestionCreateIn {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'title': json['title'],
        'titleEn': !exists(json, 'titleEn') ? undefined : json['titleEn'],
        'text': json['text'],
        'textEn': !exists(json, 'textEn') ? undefined : json['textEn'],
        'targetTime': json['targetTime'],
        'questionType': QuestionTypeFromJSON(json['questionType']),
        'difficulty': json['difficulty'],
        'summary': !exists(json, 'summary') ? undefined : json['summary'],
        'sqlSetup': !exists(json, 'sqlSetup') ? undefined : json['sqlSetup'],
        'image': !exists(json, 'image') ? undefined : json['image'],
        'contentTopicId': json['contentTopicId'],
        'contentDivision': ContentDivisionFromJSON(json['contentDivision']),
        'contentTagNames': json['contentTagNames'],
        'isRefusedBrowsing': !exists(json, 'isRefusedBrowsing') ? undefined : json['isRefusedBrowsing'],
        'isSharedBetweenSchools': !exists(json, 'isSharedBetweenSchools') ? undefined : json['isSharedBetweenSchools'],
        'showTestcaseToAnswerer': !exists(json, 'showTestcaseToAnswerer') ? undefined : json['showTestcaseToAnswerer'],
        'isSharedTestcase': !exists(json, 'isSharedTestcase') ? undefined : json['isSharedTestcase'],
        'questionTestCases': !exists(json, 'questionTestCases') ? undefined : (json['questionTestCases'] === null ? null : (json['questionTestCases'] as Array<any>).map(AppSchemasManageQuestionsQuastionCreateInTestCaseInFromJSON)),
        'questionFiles': !exists(json, 'questionFiles') ? undefined : (json['questionFiles'] === null ? null : (json['questionFiles'] as Array<any>).map(AppSchemasManageQuestionsQuastionCreateInQuestionFileInFromJSON)),
        'questionTemplate': !exists(json, 'questionTemplate') ? undefined : AppSchemasManageQuestionsQuastionCreateInQuestionTemplateInFromJSON(json['questionTemplate']),
        'questionChoices': !exists(json, 'questionChoices') ? undefined : (json['questionChoices'] === null ? null : (json['questionChoices'] as Array<any>).map(AppSchemasManageQuestionsQuastionCreateInQuestionChoiceInFromJSON)),
        'questionBlanks': !exists(json, 'questionBlanks') ? undefined : (json['questionBlanks'] === null ? null : (json['questionBlanks'] as Array<any>).map(AppSchemasManageQuestionsQuastionCreateInQuestionBlankInFromJSON)),
        'answer': !exists(json, 'answer') ? undefined : json['answer'],
    };
}

export function QuestionCreateInToJSON(value?: QuestionCreateIn | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'title': value.title,
        'titleEn': value.titleEn,
        'text': value.text,
        'textEn': value.textEn,
        'targetTime': value.targetTime,
        'questionType': QuestionTypeToJSON(value.questionType),
        'difficulty': value.difficulty,
        'summary': value.summary,
        'sqlSetup': value.sqlSetup,
        'image': value.image,
        'contentTopicId': value.contentTopicId,
        'contentDivision': ContentDivisionToJSON(value.contentDivision),
        'contentTagNames': value.contentTagNames,
        'isRefusedBrowsing': value.isRefusedBrowsing,
        'isSharedBetweenSchools': value.isSharedBetweenSchools,
        'showTestcaseToAnswerer': value.showTestcaseToAnswerer,
        'isSharedTestcase': value.isSharedTestcase,
        'questionTestCases': value.questionTestCases === undefined ? undefined : (value.questionTestCases === null ? null : (value.questionTestCases as Array<any>).map(AppSchemasManageQuestionsQuastionCreateInTestCaseInToJSON)),
        'questionFiles': value.questionFiles === undefined ? undefined : (value.questionFiles === null ? null : (value.questionFiles as Array<any>).map(AppSchemasManageQuestionsQuastionCreateInQuestionFileInToJSON)),
        'questionTemplate': AppSchemasManageQuestionsQuastionCreateInQuestionTemplateInToJSON(value.questionTemplate),
        'questionChoices': value.questionChoices === undefined ? undefined : (value.questionChoices === null ? null : (value.questionChoices as Array<any>).map(AppSchemasManageQuestionsQuastionCreateInQuestionChoiceInToJSON)),
        'questionBlanks': value.questionBlanks === undefined ? undefined : (value.questionBlanks === null ? null : (value.questionBlanks as Array<any>).map(AppSchemasManageQuestionsQuastionCreateInQuestionBlankInToJSON)),
        'answer': value.answer,
    };
}

