/* tslint:disable */
/* eslint-disable */
/**
 * TechFUL API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ContentPackageLevel } from './ContentPackageLevel';
import {
    ContentPackageLevelFromJSON,
    ContentPackageLevelFromJSONTyped,
    ContentPackageLevelToJSON,
} from './ContentPackageLevel';

/**
 * 
 * @export
 * @interface ContentPackageUpdateIn
 */
export interface ContentPackageUpdateIn {
    /**
     * 
     * @type {string}
     * @memberof ContentPackageUpdateIn
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ContentPackageUpdateIn
     */
    description?: string | null;
    /**
     * 
     * @type {ContentPackageLevel}
     * @memberof ContentPackageUpdateIn
     */
    contentPackageLevel?: ContentPackageLevel | null;
    /**
     * 
     * @type {boolean}
     * @memberof ContentPackageUpdateIn
     */
    isCompanyPackage?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof ContentPackageUpdateIn
     */
    isSchoolPackage?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ContentPackageUpdateIn
     */
    memo?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ContentPackageUpdateIn
     */
    isPublished?: boolean | null;
}

/**
 * Check if a given object implements the ContentPackageUpdateIn interface.
 */
export function instanceOfContentPackageUpdateIn(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ContentPackageUpdateInFromJSON(json: any): ContentPackageUpdateIn {
    return ContentPackageUpdateInFromJSONTyped(json, false);
}

export function ContentPackageUpdateInFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContentPackageUpdateIn {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'title': !exists(json, 'title') ? undefined : json['title'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'contentPackageLevel': !exists(json, 'contentPackageLevel') ? undefined : ContentPackageLevelFromJSON(json['contentPackageLevel']),
        'isCompanyPackage': !exists(json, 'isCompanyPackage') ? undefined : json['isCompanyPackage'],
        'isSchoolPackage': !exists(json, 'isSchoolPackage') ? undefined : json['isSchoolPackage'],
        'memo': !exists(json, 'memo') ? undefined : json['memo'],
        'isPublished': !exists(json, 'isPublished') ? undefined : json['isPublished'],
    };
}

export function ContentPackageUpdateInToJSON(value?: ContentPackageUpdateIn | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'title': value.title,
        'description': value.description,
        'contentPackageLevel': ContentPackageLevelToJSON(value.contentPackageLevel),
        'isCompanyPackage': value.isCompanyPackage,
        'isSchoolPackage': value.isSchoolPackage,
        'memo': value.memo,
        'isPublished': value.isPublished,
    };
}

